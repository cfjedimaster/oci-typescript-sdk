/**
 * Auto generated test cases for "Data Science API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import datascience = require("../lib/datascience/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test DataScience Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test activateModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ActivateModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ActivateModel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ActivateModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.activateModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ActivateModelRequest",
          data.request,
          "ActivateModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ActivateModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test activateNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ActivateNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ActivateNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ActivateNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.activateNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ActivateNotebookSessionRequest",
          data.request,
          "ActivateNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ActivateNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test cancelWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CancelWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CancelWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CancelWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.cancelWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CancelWorkRequestRequest",
          data.request,
          "CancelWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CancelWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeModelCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ChangeModelCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ChangeModelCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ChangeModelCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.changeModelCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ChangeModelCompartmentRequest",
          data.request,
          "ChangeModelCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ChangeModelCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeNotebookSessionCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ChangeNotebookSessionCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ChangeNotebookSessionCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "datascience",
      "ChangeNotebookSessionCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.changeNotebookSessionCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ChangeNotebookSessionCompartmentRequest",
          data.request,
          "ChangeNotebookSessionCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ChangeNotebookSessionCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeProjectCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ChangeProjectCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ChangeProjectCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ChangeProjectCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.changeProjectCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ChangeProjectCompartmentRequest",
          data.request,
          "ChangeProjectCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ChangeProjectCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CreateModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CreateModel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CreateModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.createModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CreateModelRequest",
          data.request,
          "CreateModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CreateModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createModelArtifact method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CreateModelArtifact"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CreateModelArtifact"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CreateModelArtifact");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.createModelArtifact(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CreateModelArtifactRequest",
          data.request,
          "CreateModelArtifactResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CreateModelArtifactRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createModelProvenance method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CreateModelProvenance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CreateModelProvenance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CreateModelProvenance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.createModelProvenance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CreateModelProvenanceRequest",
          data.request,
          "CreateModelProvenanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CreateModelProvenanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CreateNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CreateNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CreateNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.createNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CreateNotebookSessionRequest",
          data.request,
          "CreateNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CreateNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createProject method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "CreateProject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "CreateProject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "CreateProject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.createProject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "CreateProjectRequest",
          data.request,
          "CreateProjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "CreateProjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deactivateModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "DeactivateModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "DeactivateModel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "DeactivateModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.deactivateModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "DeactivateModelRequest",
          data.request,
          "DeactivateModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "DeactivateModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deactivateNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "DeactivateNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "DeactivateNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "DeactivateNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.deactivateNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "DeactivateNotebookSessionRequest",
          data.request,
          "DeactivateNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "DeactivateNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "DeleteModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "DeleteModel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "DeleteModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.deleteModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "DeleteModelRequest",
          data.request,
          "DeleteModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "DeleteModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "DeleteNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "DeleteNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "DeleteNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.deleteNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "DeleteNotebookSessionRequest",
          data.request,
          "DeleteNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "DeleteNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteProject method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "DeleteProject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "DeleteProject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "DeleteProject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.deleteProject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "DeleteProjectRequest",
          data.request,
          "DeleteProjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "DeleteProjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datascience", "DataScience", "GetModel");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetModelRequest",
          data.request,
          "GetModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getModelArtifactContent method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetModelArtifactContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "GetModelArtifactContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetModelArtifactContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getModelArtifactContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetModelArtifactContentRequest",
          data.request,
          "GetModelArtifactContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetModelArtifactContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getModelProvenance method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetModelProvenance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "GetModelProvenance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetModelProvenance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getModelProvenance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetModelProvenanceRequest",
          data.request,
          "GetModelProvenanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetModelProvenanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "GetNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetNotebookSessionRequest",
          data.request,
          "GetNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getProject method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetProject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datascience", "DataScience", "GetProject");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetProject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getProject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetProjectRequest",
          data.request,
          "GetProjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetProjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test headModelArtifact method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "HeadModelArtifact"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "HeadModelArtifact"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "HeadModelArtifact");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.headModelArtifact(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "HeadModelArtifactRequest",
          data.request,
          "HeadModelArtifactResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "HeadModelArtifactRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listModels method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListModels"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datascience", "DataScience", "ListModels");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListModels");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listModels(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListModelsRequest",
          data.request,
          "ListModelsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListModelsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNotebookSessionShapes method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListNotebookSessionShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListNotebookSessionShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListNotebookSessionShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listNotebookSessionShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListNotebookSessionShapesRequest",
          data.request,
          "ListNotebookSessionShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListNotebookSessionShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNotebookSessions method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListNotebookSessions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListNotebookSessions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListNotebookSessions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listNotebookSessions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListNotebookSessionsRequest",
          data.request,
          "ListNotebookSessionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListNotebookSessionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listProjects method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListProjects"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListProjects"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListProjects");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listProjects(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListProjectsRequest",
          data.request,
          "ListProjectsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListProjectsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateModel method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "UpdateModel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "UpdateModel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "UpdateModel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.updateModel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "UpdateModelRequest",
          data.request,
          "UpdateModelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "UpdateModelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateModelProvenance method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "UpdateModelProvenance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "UpdateModelProvenance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "UpdateModelProvenance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.updateModelProvenance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "UpdateModelProvenanceRequest",
          data.request,
          "UpdateModelProvenanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "UpdateModelProvenanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNotebookSession method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "UpdateNotebookSession"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "UpdateNotebookSession"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "UpdateNotebookSession");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.updateNotebookSession(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "UpdateNotebookSessionRequest",
          data.request,
          "UpdateNotebookSessionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "UpdateNotebookSessionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateProject method", async function() {
    if (!(await tsclient.isApiEnabled("datascience", "UpdateProject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datascience",
      "DataScience",
      "UpdateProject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datascienceClient = new datascience.DataScienceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datascienceClient.endpoint = config.endpoint;
    } else {
      datascienceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datascience", "UpdateProject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datascienceClient.updateProject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datascience",
          "UpdateProjectRequest",
          data.request,
          "UpdateProjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datascience",
            "UpdateProjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
