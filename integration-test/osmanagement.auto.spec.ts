/**
 * Auto generated test cases for "OSMS"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import osmanagement = require("../lib/osmanagement/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test OsManagement Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test addPackagesToSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "AddPackagesToSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "AddPackagesToSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "AddPackagesToSoftwareSource"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.addPackagesToSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "AddPackagesToSoftwareSourceRequest",
          data.request,
          "AddPackagesToSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "AddPackagesToSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachChildSoftwareSourceToManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled("osmanagement", "AttachChildSoftwareSourceToManagedInstance"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "AttachChildSoftwareSourceToManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "AttachChildSoftwareSourceToManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.attachChildSoftwareSourceToManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "AttachChildSoftwareSourceToManagedInstanceRequest",
          data.request,
          "AttachChildSoftwareSourceToManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "AttachChildSoftwareSourceToManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachManagedInstanceToManagedInstanceGroup method", async function() {
    if (
      !(await tsclient.isApiEnabled("osmanagement", "AttachManagedInstanceToManagedInstanceGroup"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "AttachManagedInstanceToManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "AttachManagedInstanceToManagedInstanceGroup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.attachManagedInstanceToManagedInstanceGroup(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "AttachManagedInstanceToManagedInstanceGroupRequest",
          data.request,
          "AttachManagedInstanceToManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "AttachManagedInstanceToManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachParentSoftwareSourceToManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled("osmanagement", "AttachParentSoftwareSourceToManagedInstance"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "AttachParentSoftwareSourceToManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "AttachParentSoftwareSourceToManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.attachParentSoftwareSourceToManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "AttachParentSoftwareSourceToManagedInstanceRequest",
          data.request,
          "AttachParentSoftwareSourceToManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "AttachParentSoftwareSourceToManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeManagedInstanceGroupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ChangeManagedInstanceGroupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ChangeManagedInstanceGroupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ChangeManagedInstanceGroupCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.changeManagedInstanceGroupCompartment(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ChangeManagedInstanceGroupCompartmentRequest",
          data.request,
          "ChangeManagedInstanceGroupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ChangeManagedInstanceGroupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeScheduledJobCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ChangeScheduledJobCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ChangeScheduledJobCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ChangeScheduledJobCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.changeScheduledJobCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ChangeScheduledJobCompartmentRequest",
          data.request,
          "ChangeScheduledJobCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ChangeScheduledJobCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeSoftwareSourceCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ChangeSoftwareSourceCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ChangeSoftwareSourceCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ChangeSoftwareSourceCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.changeSoftwareSourceCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ChangeSoftwareSourceCompartmentRequest",
          data.request,
          "ChangeSoftwareSourceCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ChangeSoftwareSourceCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createManagedInstanceGroup method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "CreateManagedInstanceGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "CreateManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "CreateManagedInstanceGroup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.createManagedInstanceGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "CreateManagedInstanceGroupRequest",
          data.request,
          "CreateManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "CreateManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createScheduledJob method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "CreateScheduledJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "CreateScheduledJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "CreateScheduledJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.createScheduledJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "CreateScheduledJobRequest",
          data.request,
          "CreateScheduledJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "CreateScheduledJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "CreateSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "CreateSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "CreateSoftwareSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.createSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "CreateSoftwareSourceRequest",
          data.request,
          "CreateSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "CreateSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteManagedInstanceGroup method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "DeleteManagedInstanceGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DeleteManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "DeleteManagedInstanceGroup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.deleteManagedInstanceGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DeleteManagedInstanceGroupRequest",
          data.request,
          "DeleteManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DeleteManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteScheduledJob method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "DeleteScheduledJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DeleteScheduledJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "DeleteScheduledJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.deleteScheduledJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DeleteScheduledJobRequest",
          data.request,
          "DeleteScheduledJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DeleteScheduledJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "DeleteSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DeleteSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "DeleteSoftwareSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.deleteSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DeleteSoftwareSourceRequest",
          data.request,
          "DeleteSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DeleteSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachChildSoftwareSourceFromManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled("osmanagement", "DetachChildSoftwareSourceFromManagedInstance"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DetachChildSoftwareSourceFromManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "DetachChildSoftwareSourceFromManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.detachChildSoftwareSourceFromManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DetachChildSoftwareSourceFromManagedInstanceRequest",
          data.request,
          "DetachChildSoftwareSourceFromManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DetachChildSoftwareSourceFromManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachManagedInstanceFromManagedInstanceGroup method", async function() {
    if (
      !(await tsclient.isApiEnabled(
        "osmanagement",
        "DetachManagedInstanceFromManagedInstanceGroup"
      ))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DetachManagedInstanceFromManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "DetachManagedInstanceFromManagedInstanceGroup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.detachManagedInstanceFromManagedInstanceGroup(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DetachManagedInstanceFromManagedInstanceGroupRequest",
          data.request,
          "DetachManagedInstanceFromManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DetachManagedInstanceFromManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachParentSoftwareSourceFromManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled(
        "osmanagement",
        "DetachParentSoftwareSourceFromManagedInstance"
      ))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "DetachParentSoftwareSourceFromManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "DetachParentSoftwareSourceFromManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.detachParentSoftwareSourceFromManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "DetachParentSoftwareSourceFromManagedInstanceRequest",
          data.request,
          "DetachParentSoftwareSourceFromManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "DetachParentSoftwareSourceFromManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getErratum method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetErratum"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetErratum"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetErratum");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getErratum(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetErratumRequest",
          data.request,
          "GetErratumResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetErratumRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetManagedInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getManagedInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetManagedInstanceRequest",
          data.request,
          "GetManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getManagedInstanceGroup method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetManagedInstanceGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetManagedInstanceGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getManagedInstanceGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetManagedInstanceGroupRequest",
          data.request,
          "GetManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getScheduledJob method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetScheduledJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetScheduledJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetScheduledJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getScheduledJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetScheduledJobRequest",
          data.request,
          "GetScheduledJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetScheduledJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSoftwarePackage method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetSoftwarePackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetSoftwarePackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetSoftwarePackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getSoftwarePackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetSoftwarePackageRequest",
          data.request,
          "GetSoftwarePackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetSoftwarePackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetSoftwareSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetSoftwareSourceRequest",
          data.request,
          "GetSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test installAllPackageUpdatesOnManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled("osmanagement", "InstallAllPackageUpdatesOnManagedInstance"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "InstallAllPackageUpdatesOnManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "InstallAllPackageUpdatesOnManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.installAllPackageUpdatesOnManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "InstallAllPackageUpdatesOnManagedInstanceRequest",
          data.request,
          "InstallAllPackageUpdatesOnManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "InstallAllPackageUpdatesOnManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test installPackageOnManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "InstallPackageOnManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "InstallPackageOnManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "InstallPackageOnManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.installPackageOnManagedInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "InstallPackageOnManagedInstanceRequest",
          data.request,
          "InstallPackageOnManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "InstallPackageOnManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test installPackageUpdateOnManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "InstallPackageUpdateOnManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "InstallPackageUpdateOnManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "InstallPackageUpdateOnManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.installPackageUpdateOnManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "InstallPackageUpdateOnManagedInstanceRequest",
          data.request,
          "InstallPackageUpdateOnManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "InstallPackageUpdateOnManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAvailablePackagesForManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListAvailablePackagesForManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListAvailablePackagesForManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ListAvailablePackagesForManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listAvailablePackagesForManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListAvailablePackagesForManagedInstanceRequest",
          data.request,
          "ListAvailablePackagesForManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListAvailablePackagesForManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAvailableSoftwareSourcesForManagedInstance method", async function() {
    if (
      !(await tsclient.isApiEnabled(
        "osmanagement",
        "ListAvailableSoftwareSourcesForManagedInstance"
      ))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListAvailableSoftwareSourcesForManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ListAvailableSoftwareSourcesForManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listAvailableSoftwareSourcesForManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListAvailableSoftwareSourcesForManagedInstanceRequest",
          data.request,
          "ListAvailableSoftwareSourcesForManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListAvailableSoftwareSourcesForManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAvailableUpdatesForManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListAvailableUpdatesForManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListAvailableUpdatesForManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ListAvailableUpdatesForManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listAvailableUpdatesForManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListAvailableUpdatesForManagedInstanceRequest",
          data.request,
          "ListAvailableUpdatesForManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListAvailableUpdatesForManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listManagedInstanceGroups method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListManagedInstanceGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListManagedInstanceGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListManagedInstanceGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listManagedInstanceGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListManagedInstanceGroupsRequest",
          data.request,
          "ListManagedInstanceGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListManagedInstanceGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listManagedInstances method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListManagedInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListManagedInstances"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListManagedInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listManagedInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListManagedInstancesRequest",
          data.request,
          "ListManagedInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListManagedInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPackagesInstalledOnManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListPackagesInstalledOnManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListPackagesInstalledOnManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ListPackagesInstalledOnManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listPackagesInstalledOnManagedInstance(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListPackagesInstalledOnManagedInstanceRequest",
          data.request,
          "ListPackagesInstalledOnManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListPackagesInstalledOnManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listScheduledJobs method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListScheduledJobs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListScheduledJobs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListScheduledJobs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listScheduledJobs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListScheduledJobsRequest",
          data.request,
          "ListScheduledJobsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListScheduledJobsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSoftwareSourcePackages method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListSoftwareSourcePackages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListSoftwareSourcePackages"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "ListSoftwareSourcePackages"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listSoftwareSourcePackages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListSoftwareSourcePackagesRequest",
          data.request,
          "ListSoftwareSourcePackagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListSoftwareSourcePackagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSoftwareSources method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListSoftwareSources"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListSoftwareSources"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListSoftwareSources");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listSoftwareSources(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListSoftwareSourcesRequest",
          data.request,
          "ListSoftwareSourcesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListSoftwareSourcesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listUpcomingScheduledJobs method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListUpcomingScheduledJobs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListUpcomingScheduledJobs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListUpcomingScheduledJobs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listUpcomingScheduledJobs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListUpcomingScheduledJobsRequest",
          data.request,
          "ListUpcomingScheduledJobsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListUpcomingScheduledJobsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removePackageFromManagedInstance method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "RemovePackageFromManagedInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "RemovePackageFromManagedInstance"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "RemovePackageFromManagedInstance"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.removePackageFromManagedInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "RemovePackageFromManagedInstanceRequest",
          data.request,
          "RemovePackageFromManagedInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "RemovePackageFromManagedInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removePackagesFromSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "RemovePackagesFromSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "RemovePackagesFromSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "RemovePackagesFromSoftwareSource"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.removePackagesFromSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "RemovePackagesFromSoftwareSourceRequest",
          data.request,
          "RemovePackagesFromSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "RemovePackagesFromSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test runScheduledJobNow method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "RunScheduledJobNow"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "RunScheduledJobNow"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "RunScheduledJobNow");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.runScheduledJobNow(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "RunScheduledJobNowRequest",
          data.request,
          "RunScheduledJobNowResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "RunScheduledJobNowRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test searchSoftwarePackages method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "SearchSoftwarePackages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "SearchSoftwarePackages"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "SearchSoftwarePackages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.searchSoftwarePackages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "SearchSoftwarePackagesRequest",
          data.request,
          "SearchSoftwarePackagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "SearchSoftwarePackagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test skipNextScheduledJobExecution method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "SkipNextScheduledJobExecution"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "SkipNextScheduledJobExecution"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "SkipNextScheduledJobExecution"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.skipNextScheduledJobExecution(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "SkipNextScheduledJobExecutionRequest",
          data.request,
          "SkipNextScheduledJobExecutionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "SkipNextScheduledJobExecutionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateManagedInstanceGroup method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "UpdateManagedInstanceGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "UpdateManagedInstanceGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "osmanagement",
      "UpdateManagedInstanceGroup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.updateManagedInstanceGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "UpdateManagedInstanceGroupRequest",
          data.request,
          "UpdateManagedInstanceGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "UpdateManagedInstanceGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateScheduledJob method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "UpdateScheduledJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "UpdateScheduledJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "UpdateScheduledJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.updateScheduledJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "UpdateScheduledJobRequest",
          data.request,
          "UpdateScheduledJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "UpdateScheduledJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSoftwareSource method", async function() {
    if (!(await tsclient.isApiEnabled("osmanagement", "UpdateSoftwareSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "osmanagement",
      "OsManagement",
      "UpdateSoftwareSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const osmanagementClient = new osmanagement.OsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      osmanagementClient.endpoint = config.endpoint;
    } else {
      osmanagementClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("osmanagement", "UpdateSoftwareSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await osmanagementClient.updateSoftwareSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "osmanagement",
          "UpdateSoftwareSourceRequest",
          data.request,
          "UpdateSoftwareSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "osmanagement",
            "UpdateSoftwareSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
