/**
 * Auto generated test cases for "Resource Manager API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import resourcemanager = require("../lib/resourcemanager/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test ResourceManager Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test cancelJob method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "CancelJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "CancelJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "CancelJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.cancelJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "CancelJobRequest",
          data.request,
          "CancelJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "CancelJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeStackCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ChangeStackCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ChangeStackCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ChangeStackCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.changeStackCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ChangeStackCompartmentRequest",
          data.request,
          "ChangeStackCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ChangeStackCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createJob method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "CreateJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "CreateJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "CreateJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.createJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "CreateJobRequest",
          data.request,
          "CreateJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "CreateJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createStack method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "CreateStack"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "CreateStack"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "CreateStack");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.createStack(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "CreateStackRequest",
          data.request,
          "CreateStackResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "CreateStackRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteStack method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "DeleteStack"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "DeleteStack"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "DeleteStack");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.deleteStack(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "DeleteStackRequest",
          data.request,
          "DeleteStackResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "DeleteStackRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJob method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetJobRequest",
          data.request,
          "GetJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobLogs method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetJobLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetJobLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetJobLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getJobLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetJobLogsRequest",
          data.request,
          "GetJobLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetJobLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobLogsContent method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetJobLogsContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetJobLogsContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetJobLogsContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getJobLogsContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetJobLogsContentRequest",
          data.request,
          "GetJobLogsContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetJobLogsContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobTfConfig method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetJobTfConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetJobTfConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetJobTfConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getJobTfConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetJobTfConfigRequest",
          data.request,
          "GetJobTfConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetJobTfConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobTfState method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetJobTfState"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetJobTfState"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetJobTfState");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getJobTfState(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetJobTfStateRequest",
          data.request,
          "GetJobTfStateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetJobTfStateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getStack method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetStack"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetStack"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetStack");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getStack(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetStackRequest",
          data.request,
          "GetStackResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetStackRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getStackTfConfig method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetStackTfConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetStackTfConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetStackTfConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getStackTfConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetStackTfConfigRequest",
          data.request,
          "GetStackTfConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetStackTfConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getStackTfState method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetStackTfState"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetStackTfState"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetStackTfState");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getStackTfState(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetStackTfStateRequest",
          data.request,
          "GetStackTfStateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetStackTfStateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobs method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListJobs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListJobs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListJobs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listJobs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListJobsRequest",
          data.request,
          "ListJobsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListJobsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listStacks method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListStacks"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListStacks"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListStacks");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listStacks(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListStacksRequest",
          data.request,
          "ListStacksResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListStacksRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTerraformVersions method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListTerraformVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListTerraformVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListTerraformVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listTerraformVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListTerraformVersionsRequest",
          data.request,
          "ListTerraformVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListTerraformVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateJob method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "UpdateJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "UpdateJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "UpdateJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.updateJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "UpdateJobRequest",
          data.request,
          "UpdateJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "UpdateJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateStack method", async function() {
    if (!(await tsclient.isApiEnabled("resourcemanager", "UpdateStack"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "resourcemanager",
      "ResourceManager",
      "UpdateStack"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const resourcemanagerClient = new resourcemanager.ResourceManagerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      resourcemanagerClient.endpoint = config.endpoint;
    } else {
      resourcemanagerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("resourcemanager", "UpdateStack");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await resourcemanagerClient.updateStack(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "resourcemanager",
          "UpdateStackRequest",
          data.request,
          "UpdateStackResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "resourcemanager",
            "UpdateStackRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
