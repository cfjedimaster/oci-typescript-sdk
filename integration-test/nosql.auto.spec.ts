/**
 * Auto generated test cases for "ndcs-control-plane API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import nosql = require("../lib/nosql/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Nosql Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeTableCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ChangeTableCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ChangeTableCompartment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ChangeTableCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.changeTableCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ChangeTableCompartmentRequest",
          data.request,
          "ChangeTableCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ChangeTableCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createIndex method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "CreateIndex"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "CreateIndex");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "CreateIndex");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.createIndex(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "CreateIndexRequest",
          data.request,
          "CreateIndexResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "CreateIndexRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTable method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "CreateTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "CreateTable");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "CreateTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.createTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "CreateTableRequest",
          data.request,
          "CreateTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "CreateTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteIndex method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "DeleteIndex"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "DeleteIndex");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "DeleteIndex");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.deleteIndex(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "DeleteIndexRequest",
          data.request,
          "DeleteIndexResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "DeleteIndexRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRow method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "DeleteRow"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "DeleteRow");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "DeleteRow");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.deleteRow(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "DeleteRowRequest",
          data.request,
          "DeleteRowResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "DeleteRowRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTable method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "DeleteTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "DeleteTable");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "DeleteTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.deleteTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "DeleteTableRequest",
          data.request,
          "DeleteTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "DeleteTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "DeleteWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "DeleteWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "DeleteWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.deleteWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "DeleteWorkRequestRequest",
          data.request,
          "DeleteWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "DeleteWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIndex method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "GetIndex"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "GetIndex");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "GetIndex");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.getIndex(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "GetIndexRequest",
          data.request,
          "GetIndexResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "GetIndexRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRow method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "GetRow"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "GetRow");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "GetRow");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.getRow(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "GetRowRequest",
          data.request,
          "GetRowResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "GetRowRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTable method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "GetTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "GetTable");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "GetTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.getTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "GetTableRequest",
          data.request,
          "GetTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "GetTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "GetWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIndexes method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListIndexes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListIndexes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListIndexes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listIndexes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListIndexesRequest",
          data.request,
          "ListIndexesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListIndexesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTableUsage method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListTableUsage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListTableUsage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListTableUsage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listTableUsage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListTableUsageRequest",
          data.request,
          "ListTableUsageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListTableUsageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTables method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListTables"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListTables");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListTables");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listTables(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListTablesRequest",
          data.request,
          "ListTablesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListTablesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListWorkRequestErrors");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListWorkRequestLogs");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "ListWorkRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test prepareStatement method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "PrepareStatement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "PrepareStatement");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "PrepareStatement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.prepareStatement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "PrepareStatementRequest",
          data.request,
          "PrepareStatementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "PrepareStatementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test query method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "Query"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "Query");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "Query");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.query(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "QueryRequest",
          data.request,
          "QueryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "QueryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test summarizeStatement method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "SummarizeStatement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "SummarizeStatement");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "SummarizeStatement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.summarizeStatement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "SummarizeStatementRequest",
          data.request,
          "SummarizeStatementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "SummarizeStatementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRow method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "UpdateRow"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "UpdateRow");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "UpdateRow");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.updateRow(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "UpdateRowRequest",
          data.request,
          "UpdateRowResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "UpdateRowRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTable method", async function() {
    if (!(await tsclient.isApiEnabled("nosql", "UpdateTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("nosql", "Nosql", "UpdateTable");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const nosqlClient = new nosql.NosqlClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      nosqlClient.endpoint = config.endpoint;
    } else {
      nosqlClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("nosql", "UpdateTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await nosqlClient.updateTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "nosql",
          "UpdateTableRequest",
          data.request,
          "UpdateTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "nosql",
            "UpdateTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
