/**
 * Auto generated test cases for "Key Management Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import keymanagement = require("../lib/keymanagement/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test KmsCrypto Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test decrypt method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "Decrypt"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("keymanagement", "KmsCrypto", "Decrypt");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsCryptoClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsCryptoClient",
      "Decrypt"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "Decrypt");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.decrypt(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "DecryptRequest",
          data.request,
          "DecryptResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "DecryptRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test encrypt method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "Encrypt"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("keymanagement", "KmsCrypto", "Encrypt");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsCryptoClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsCryptoClient",
      "Encrypt"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "Encrypt");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.encrypt(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "EncryptRequest",
          data.request,
          "EncryptResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "EncryptRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateDataEncryptionKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "GenerateDataEncryptionKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsCrypto",
      "GenerateDataEncryptionKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsCryptoClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsCryptoClient",
      "GenerateDataEncryptionKey"
    );
    const requests: any[] = await tsclient.getRequests(
      "keymanagement",
      "GenerateDataEncryptionKey"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.generateDataEncryptionKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "GenerateDataEncryptionKeyRequest",
          data.request,
          "GenerateDataEncryptionKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "GenerateDataEncryptionKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
