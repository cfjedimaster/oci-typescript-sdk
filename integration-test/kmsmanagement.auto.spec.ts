/**
 * Auto generated test cases for "Key Management Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import keymanagement = require("../lib/keymanagement/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test KmsManagement Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test cancelKeyDeletion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "CancelKeyDeletion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "CancelKeyDeletion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "CancelKeyDeletion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "CancelKeyDeletion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.cancelKeyDeletion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "CancelKeyDeletionRequest",
          data.request,
          "CancelKeyDeletionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "CancelKeyDeletionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test cancelKeyVersionDeletion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "CancelKeyVersionDeletion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "CancelKeyVersionDeletion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "CancelKeyVersionDeletion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "CancelKeyVersionDeletion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.cancelKeyVersionDeletion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "CancelKeyVersionDeletionRequest",
          data.request,
          "CancelKeyVersionDeletionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "CancelKeyVersionDeletionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeKeyCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ChangeKeyCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ChangeKeyCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ChangeKeyCompartment"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ChangeKeyCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.changeKeyCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ChangeKeyCompartmentRequest",
          data.request,
          "ChangeKeyCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ChangeKeyCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "CreateKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "CreateKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "CreateKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "CreateKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.createKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "CreateKeyRequest",
          data.request,
          "CreateKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "CreateKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createKeyVersion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "CreateKeyVersion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "CreateKeyVersion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "CreateKeyVersion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "CreateKeyVersion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.createKeyVersion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "CreateKeyVersionRequest",
          data.request,
          "CreateKeyVersionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "CreateKeyVersionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test disableKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "DisableKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "DisableKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "DisableKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "DisableKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.disableKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "DisableKeyRequest",
          data.request,
          "DisableKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "DisableKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test enableKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "EnableKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "EnableKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "EnableKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "EnableKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.enableKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "EnableKeyRequest",
          data.request,
          "EnableKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "EnableKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "GetKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("keymanagement", "KmsManagement", "GetKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "GetKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "GetKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.getKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "GetKeyRequest",
          data.request,
          "GetKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "GetKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getKeyVersion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "GetKeyVersion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "GetKeyVersion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "GetKeyVersion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "GetKeyVersion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.getKeyVersion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "GetKeyVersionRequest",
          data.request,
          "GetKeyVersionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "GetKeyVersionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWrappingKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "GetWrappingKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "GetWrappingKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "GetWrappingKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "GetWrappingKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.getWrappingKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "GetWrappingKeyRequest",
          data.request,
          "GetWrappingKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "GetWrappingKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test importKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ImportKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ImportKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ImportKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ImportKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.importKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ImportKeyRequest",
          data.request,
          "ImportKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ImportKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test importKeyVersion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ImportKeyVersion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ImportKeyVersion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ImportKeyVersion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ImportKeyVersion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.importKeyVersion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ImportKeyVersionRequest",
          data.request,
          "ImportKeyVersionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ImportKeyVersionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listKeyVersions method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ListKeyVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ListKeyVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ListKeyVersions"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ListKeyVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.listKeyVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ListKeyVersionsRequest",
          data.request,
          "ListKeyVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ListKeyVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listKeys method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ListKeys"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ListKeys"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ListKeys"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ListKeys");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.listKeys(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ListKeysRequest",
          data.request,
          "ListKeysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ListKeysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test scheduleKeyDeletion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ScheduleKeyDeletion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ScheduleKeyDeletion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ScheduleKeyDeletion"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "ScheduleKeyDeletion");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.scheduleKeyDeletion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ScheduleKeyDeletionRequest",
          data.request,
          "ScheduleKeyDeletionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ScheduleKeyDeletionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test scheduleKeyVersionDeletion method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "ScheduleKeyVersionDeletion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "ScheduleKeyVersionDeletion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "ScheduleKeyVersionDeletion"
    );
    const requests: any[] = await tsclient.getRequests(
      "keymanagement",
      "ScheduleKeyVersionDeletion"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.scheduleKeyVersionDeletion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "ScheduleKeyVersionDeletionRequest",
          data.request,
          "ScheduleKeyVersionDeletionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "ScheduleKeyVersionDeletionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateKey method", async function() {
    if (!(await tsclient.isApiEnabled("keymanagement", "UpdateKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "keymanagement",
      "KmsManagement",
      "UpdateKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const keymanagementClient = new keymanagement.KmsManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    keymanagementClient.endpoint = await tsclient.getEndPoint(
      "keymanagement",
      "KmsManagementClient",
      "UpdateKey"
    );
    const requests: any[] = await tsclient.getRequests("keymanagement", "UpdateKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await keymanagementClient.updateKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "keymanagement",
          "UpdateKeyRequest",
          data.request,
          "UpdateKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "keymanagement",
            "UpdateKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
