/**
 * Auto generated test cases for "Application Migration Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import applicationmigration = require("../lib/applicationmigration/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test ApplicationMigration Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test cancelWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "CancelWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "CancelWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "CancelWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.cancelWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "CancelWorkRequestRequest",
          data.request,
          "CancelWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "CancelWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeMigrationCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ChangeMigrationCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ChangeMigrationCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "ChangeMigrationCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.changeMigrationCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ChangeMigrationCompartmentRequest",
          data.request,
          "ChangeMigrationCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ChangeMigrationCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeSourceCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ChangeSourceCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ChangeSourceCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "ChangeSourceCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.changeSourceCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ChangeSourceCompartmentRequest",
          data.request,
          "ChangeSourceCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ChangeSourceCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createMigration method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "CreateMigration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "CreateMigration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "CreateMigration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.createMigration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "CreateMigrationRequest",
          data.request,
          "CreateMigrationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "CreateMigrationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSource method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "CreateSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "CreateSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "CreateSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.createSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "CreateSourceRequest",
          data.request,
          "CreateSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "CreateSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteMigration method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "DeleteMigration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "DeleteMigration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "DeleteMigration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.deleteMigration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "DeleteMigrationRequest",
          data.request,
          "DeleteMigrationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "DeleteMigrationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSource method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "DeleteSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "DeleteSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "DeleteSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.deleteSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "DeleteSourceRequest",
          data.request,
          "DeleteSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "DeleteSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getMigration method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "GetMigration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "GetMigration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "GetMigration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.getMigration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "GetMigrationRequest",
          data.request,
          "GetMigrationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "GetMigrationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSource method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "GetSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "GetSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "GetSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.getSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "GetSourceRequest",
          data.request,
          "GetSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "GetSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMigrations method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListMigrations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListMigrations"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "ListMigrations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listMigrations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListMigrationsRequest",
          data.request,
          "ListMigrationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListMigrationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSourceApplications method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListSourceApplications"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListSourceApplications"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "ListSourceApplications"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listSourceApplications(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListSourceApplicationsRequest",
          data.request,
          "ListSourceApplicationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListSourceApplicationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSources method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListSources"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListSources"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "ListSources");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listSources(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListSourcesRequest",
          data.request,
          "ListSourcesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListSourcesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "ListWorkRequestErrors"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "ListWorkRequestLogs"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test migrateApplication method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "MigrateApplication"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "MigrateApplication"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "applicationmigration",
      "MigrateApplication"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.migrateApplication(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "MigrateApplicationRequest",
          data.request,
          "MigrateApplicationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "MigrateApplicationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateMigration method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "UpdateMigration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "UpdateMigration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "UpdateMigration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.updateMigration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "UpdateMigrationRequest",
          data.request,
          "UpdateMigrationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "UpdateMigrationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSource method", async function() {
    if (!(await tsclient.isApiEnabled("applicationmigration", "UpdateSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "applicationmigration",
      "ApplicationMigration",
      "UpdateSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const applicationmigrationClient = new applicationmigration.ApplicationMigrationClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      applicationmigrationClient.endpoint = config.endpoint;
    } else {
      applicationmigrationClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("applicationmigration", "UpdateSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await applicationmigrationClient.updateSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "applicationmigration",
          "UpdateSourceRequest",
          data.request,
          "UpdateSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "applicationmigration",
            "UpdateSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
