/**
 * Auto generated test cases for "Oracle Content and Experience API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import oce = require("../lib/oce/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test OceInstance Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeOceInstanceCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "ChangeOceInstanceCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "oce",
      "OceInstance",
      "ChangeOceInstanceCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "ChangeOceInstanceCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.changeOceInstanceCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "ChangeOceInstanceCompartmentRequest",
          data.request,
          "ChangeOceInstanceCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "ChangeOceInstanceCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createOceInstance method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "CreateOceInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "CreateOceInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "CreateOceInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.createOceInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "CreateOceInstanceRequest",
          data.request,
          "CreateOceInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "CreateOceInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteOceInstance method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "DeleteOceInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "DeleteOceInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "DeleteOceInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.deleteOceInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "DeleteOceInstanceRequest",
          data.request,
          "DeleteOceInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "DeleteOceInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getOceInstance method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "GetOceInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "GetOceInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "GetOceInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.getOceInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "GetOceInstanceRequest",
          data.request,
          "GetOceInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "GetOceInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "GetWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listOceInstances method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "ListOceInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "ListOceInstances");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "ListOceInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.listOceInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "ListOceInstancesRequest",
          data.request,
          "ListOceInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "ListOceInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "oce",
      "OceInstance",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "oce",
      "OceInstance",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "ListWorkRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateOceInstance method", async function() {
    if (!(await tsclient.isApiEnabled("oce", "UpdateOceInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("oce", "OceInstance", "UpdateOceInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const oceClient = new oce.OceInstanceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      oceClient.endpoint = config.endpoint;
    } else {
      oceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("oce", "UpdateOceInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await oceClient.updateOceInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "oce",
          "UpdateOceInstanceRequest",
          data.request,
          "UpdateOceInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "oce",
            "UpdateOceInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
