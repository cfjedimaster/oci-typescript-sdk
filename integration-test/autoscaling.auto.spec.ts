/**
 * Auto generated test cases for "Autoscaling API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import autoscaling = require("../lib/autoscaling/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test AutoScaling Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeAutoScalingConfigurationCompartment method", async function() {
    if (
      !(await tsclient.isApiEnabled("autoscaling", "ChangeAutoScalingConfigurationCompartment"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "ChangeAutoScalingConfigurationCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "ChangeAutoScalingConfigurationCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.changeAutoScalingConfigurationCompartment(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "ChangeAutoScalingConfigurationCompartmentRequest",
          data.request,
          "ChangeAutoScalingConfigurationCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "ChangeAutoScalingConfigurationCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutoScalingConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "CreateAutoScalingConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "CreateAutoScalingConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "CreateAutoScalingConfiguration"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.createAutoScalingConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "CreateAutoScalingConfigurationRequest",
          data.request,
          "CreateAutoScalingConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "CreateAutoScalingConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutoScalingPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "CreateAutoScalingPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "CreateAutoScalingPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("autoscaling", "CreateAutoScalingPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.createAutoScalingPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "CreateAutoScalingPolicyRequest",
          data.request,
          "CreateAutoScalingPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "CreateAutoScalingPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAutoScalingConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "DeleteAutoScalingConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "DeleteAutoScalingConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "DeleteAutoScalingConfiguration"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.deleteAutoScalingConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "DeleteAutoScalingConfigurationRequest",
          data.request,
          "DeleteAutoScalingConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "DeleteAutoScalingConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAutoScalingPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "DeleteAutoScalingPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "DeleteAutoScalingPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("autoscaling", "DeleteAutoScalingPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.deleteAutoScalingPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "DeleteAutoScalingPolicyRequest",
          data.request,
          "DeleteAutoScalingPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "DeleteAutoScalingPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutoScalingConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "GetAutoScalingConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "GetAutoScalingConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "GetAutoScalingConfiguration"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.getAutoScalingConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "GetAutoScalingConfigurationRequest",
          data.request,
          "GetAutoScalingConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "GetAutoScalingConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutoScalingPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "GetAutoScalingPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "GetAutoScalingPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("autoscaling", "GetAutoScalingPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.getAutoScalingPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "GetAutoScalingPolicyRequest",
          data.request,
          "GetAutoScalingPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "GetAutoScalingPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutoScalingConfigurations method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "ListAutoScalingConfigurations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "ListAutoScalingConfigurations"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "ListAutoScalingConfigurations"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.listAutoScalingConfigurations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "ListAutoScalingConfigurationsRequest",
          data.request,
          "ListAutoScalingConfigurationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "ListAutoScalingConfigurationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutoScalingPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "ListAutoScalingPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "ListAutoScalingPolicies"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("autoscaling", "ListAutoScalingPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.listAutoScalingPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "ListAutoScalingPoliciesRequest",
          data.request,
          "ListAutoScalingPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "ListAutoScalingPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutoScalingConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "UpdateAutoScalingConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "UpdateAutoScalingConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "autoscaling",
      "UpdateAutoScalingConfiguration"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.updateAutoScalingConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "UpdateAutoScalingConfigurationRequest",
          data.request,
          "UpdateAutoScalingConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "UpdateAutoScalingConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutoScalingPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("autoscaling", "UpdateAutoScalingPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "autoscaling",
      "AutoScaling",
      "UpdateAutoScalingPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const autoscalingClient = new autoscaling.AutoScalingClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      autoscalingClient.endpoint = config.endpoint;
    } else {
      autoscalingClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("autoscaling", "UpdateAutoScalingPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await autoscalingClient.updateAutoScalingPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "autoscaling",
          "UpdateAutoScalingPolicyRequest",
          data.request,
          "UpdateAutoScalingPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "autoscaling",
            "UpdateAutoScalingPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
