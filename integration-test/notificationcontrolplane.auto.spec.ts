/**
 * Auto generated test cases for "Notifications API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import ons = require("../lib/ons/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test NotificationControlPlane Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeTopicCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "ChangeTopicCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "ChangeTopicCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "ChangeTopicCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.changeTopicCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "ChangeTopicCompartmentRequest",
          data.request,
          "ChangeTopicCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "ChangeTopicCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTopic method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "CreateTopic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "CreateTopic"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "CreateTopic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.createTopic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "CreateTopicRequest",
          data.request,
          "CreateTopicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "CreateTopicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTopic method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "DeleteTopic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "DeleteTopic"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "DeleteTopic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.deleteTopic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "DeleteTopicRequest",
          data.request,
          "DeleteTopicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "DeleteTopicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTopic method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "GetTopic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "GetTopic"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "GetTopic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.getTopic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "GetTopicRequest",
          data.request,
          "GetTopicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "GetTopicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTopics method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "ListTopics"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "ListTopics"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "ListTopics");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.listTopics(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "ListTopicsRequest",
          data.request,
          "ListTopicsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "ListTopicsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTopic method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "UpdateTopic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationControlPlane",
      "UpdateTopic"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationControlPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "UpdateTopic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.updateTopic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "UpdateTopicRequest",
          data.request,
          "UpdateTopicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "UpdateTopicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
