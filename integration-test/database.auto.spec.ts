/**
 * Auto generated test cases for "Database Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import database = require("../lib/database/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Database Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test activateExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ActivateExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ActivateExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ActivateExadataInfrastructure");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.activateExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ActivateExadataInfrastructureRequest",
          data.request,
          "ActivateExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ActivateExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeAutonomousContainerDatabaseCompartment method", async function() {
    if (
      !(await tsclient.isApiEnabled("database", "ChangeAutonomousContainerDatabaseCompartment"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeAutonomousContainerDatabaseCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ChangeAutonomousContainerDatabaseCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeAutonomousContainerDatabaseCompartment(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeAutonomousContainerDatabaseCompartmentRequest",
          data.request,
          "ChangeAutonomousContainerDatabaseCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeAutonomousContainerDatabaseCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeAutonomousDatabaseCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ChangeAutonomousDatabaseCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeAutonomousDatabaseCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ChangeAutonomousDatabaseCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeAutonomousDatabaseCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeAutonomousDatabaseCompartmentRequest",
          data.request,
          "ChangeAutonomousDatabaseCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeAutonomousDatabaseCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeAutonomousExadataInfrastructureCompartment method", async function() {
    if (
      !(await tsclient.isApiEnabled("database", "ChangeAutonomousExadataInfrastructureCompartment"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeAutonomousExadataInfrastructureCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ChangeAutonomousExadataInfrastructureCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeAutonomousExadataInfrastructureCompartment(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeAutonomousExadataInfrastructureCompartmentRequest",
          data.request,
          "ChangeAutonomousExadataInfrastructureCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeAutonomousExadataInfrastructureCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeBackupDestinationCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ChangeBackupDestinationCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeBackupDestinationCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ChangeBackupDestinationCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeBackupDestinationCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeBackupDestinationCompartmentRequest",
          data.request,
          "ChangeBackupDestinationCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeBackupDestinationCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeDbSystemCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ChangeDbSystemCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeDbSystemCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ChangeDbSystemCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeDbSystemCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeDbSystemCompartmentRequest",
          data.request,
          "ChangeDbSystemCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeDbSystemCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeExadataInfrastructureCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ChangeExadataInfrastructureCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeExadataInfrastructureCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ChangeExadataInfrastructureCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeExadataInfrastructureCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeExadataInfrastructureCompartmentRequest",
          data.request,
          "ChangeExadataInfrastructureCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeExadataInfrastructureCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVmClusterCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ChangeVmClusterCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ChangeVmClusterCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ChangeVmClusterCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.changeVmClusterCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ChangeVmClusterCompartmentRequest",
          data.request,
          "ChangeVmClusterCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ChangeVmClusterCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test completeExternalBackupJob method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CompleteExternalBackupJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CompleteExternalBackupJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CompleteExternalBackupJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.completeExternalBackupJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CompleteExternalBackupJobRequest",
          data.request,
          "CompleteExternalBackupJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CompleteExternalBackupJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutonomousContainerDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateAutonomousContainerDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateAutonomousContainerDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "CreateAutonomousContainerDatabase"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createAutonomousContainerDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateAutonomousContainerDatabaseRequest",
          data.request,
          "CreateAutonomousContainerDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateAutonomousContainerDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateAutonomousDataWarehouseRequest",
          data.request,
          "CreateAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutonomousDataWarehouseBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateAutonomousDataWarehouseBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateAutonomousDataWarehouseBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "CreateAutonomousDataWarehouseBackup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createAutonomousDataWarehouseBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateAutonomousDataWarehouseBackupRequest",
          data.request,
          "CreateAutonomousDataWarehouseBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateAutonomousDataWarehouseBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateAutonomousDatabaseRequest",
          data.request,
          "CreateAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAutonomousDatabaseBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateAutonomousDatabaseBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateAutonomousDatabaseBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "CreateAutonomousDatabaseBackup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createAutonomousDatabaseBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateAutonomousDatabaseBackupRequest",
          data.request,
          "CreateAutonomousDatabaseBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateAutonomousDatabaseBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "CreateBackup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateBackupRequest",
          data.request,
          "CreateBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBackupDestination method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateBackupDestination"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateBackupDestination"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateBackupDestination");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createBackupDestination(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateBackupDestinationRequest",
          data.request,
          "CreateBackupDestinationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateBackupDestinationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDataGuardAssociation method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateDataGuardAssociation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateDataGuardAssociation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateDataGuardAssociation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createDataGuardAssociation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateDataGuardAssociationRequest",
          data.request,
          "CreateDataGuardAssociationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateDataGuardAssociationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "CreateDatabase");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateDatabaseRequest",
          data.request,
          "CreateDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDbHome method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateDbHome"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "CreateDbHome");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateDbHome");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createDbHome(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateDbHomeRequest",
          data.request,
          "CreateDbHomeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateDbHomeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateExadataInfrastructure");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateExadataInfrastructureRequest",
          data.request,
          "CreateExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createExternalBackupJob method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateExternalBackupJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateExternalBackupJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateExternalBackupJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createExternalBackupJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateExternalBackupJobRequest",
          data.request,
          "CreateExternalBackupJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateExternalBackupJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVmCluster method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateVmCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "CreateVmCluster");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateVmCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createVmCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateVmClusterRequest",
          data.request,
          "CreateVmClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateVmClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "CreateVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "CreateVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "CreateVmClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.createVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "CreateVmClusterNetworkRequest",
          data.request,
          "CreateVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "CreateVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test dbNodeAction method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DbNodeAction"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "DbNodeAction");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DbNodeAction");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.dbNodeAction(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DbNodeActionRequest",
          data.request,
          "DbNodeActionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DbNodeActionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeleteAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteAutonomousDataWarehouseRequest",
          data.request,
          "DeleteAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeleteAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteAutonomousDatabaseRequest",
          data.request,
          "DeleteAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "DeleteBackup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteBackupRequest",
          data.request,
          "DeleteBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBackupDestination method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteBackupDestination"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeleteBackupDestination"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteBackupDestination");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteBackupDestination(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteBackupDestinationRequest",
          data.request,
          "DeleteBackupDestinationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteBackupDestinationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "DeleteDatabase");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteDatabaseRequest",
          data.request,
          "DeleteDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDbHome method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteDbHome"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "DeleteDbHome");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteDbHome");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteDbHome(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteDbHomeRequest",
          data.request,
          "DeleteDbHomeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteDbHomeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeleteExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteExadataInfrastructure");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteExadataInfrastructureRequest",
          data.request,
          "DeleteExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVmCluster method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteVmCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "DeleteVmCluster");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteVmCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteVmCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteVmClusterRequest",
          data.request,
          "DeleteVmClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteVmClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeleteVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeleteVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "DeleteVmClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deleteVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeleteVmClusterNetworkRequest",
          data.request,
          "DeleteVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeleteVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deregisterAutonomousDatabaseDataSafe method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DeregisterAutonomousDatabaseDataSafe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DeregisterAutonomousDatabaseDataSafe"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "DeregisterAutonomousDatabaseDataSafe"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.deregisterAutonomousDatabaseDataSafe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DeregisterAutonomousDatabaseDataSafeRequest",
          data.request,
          "DeregisterAutonomousDatabaseDataSafeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DeregisterAutonomousDatabaseDataSafeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test downloadExadataInfrastructureConfigFile method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DownloadExadataInfrastructureConfigFile"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DownloadExadataInfrastructureConfigFile"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "DownloadExadataInfrastructureConfigFile"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.downloadExadataInfrastructureConfigFile(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DownloadExadataInfrastructureConfigFileRequest",
          data.request,
          "DownloadExadataInfrastructureConfigFileResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DownloadExadataInfrastructureConfigFileRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test downloadVmClusterNetworkConfigFile method", async function() {
    if (!(await tsclient.isApiEnabled("database", "DownloadVmClusterNetworkConfigFile"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "DownloadVmClusterNetworkConfigFile"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "DownloadVmClusterNetworkConfigFile"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.downloadVmClusterNetworkConfigFile(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "DownloadVmClusterNetworkConfigFileRequest",
          data.request,
          "DownloadVmClusterNetworkConfigFileResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "DownloadVmClusterNetworkConfigFileRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test failoverDataGuardAssociation method", async function() {
    if (!(await tsclient.isApiEnabled("database", "FailoverDataGuardAssociation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "FailoverDataGuardAssociation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "FailoverDataGuardAssociation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.failoverDataGuardAssociation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "FailoverDataGuardAssociationRequest",
          data.request,
          "FailoverDataGuardAssociationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "FailoverDataGuardAssociationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateAutonomousDataWarehouseWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GenerateAutonomousDataWarehouseWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GenerateAutonomousDataWarehouseWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GenerateAutonomousDataWarehouseWallet"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.generateAutonomousDataWarehouseWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GenerateAutonomousDataWarehouseWalletRequest",
          data.request,
          "GenerateAutonomousDataWarehouseWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GenerateAutonomousDataWarehouseWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateAutonomousDatabaseWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GenerateAutonomousDatabaseWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GenerateAutonomousDatabaseWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GenerateAutonomousDatabaseWallet"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.generateAutonomousDatabaseWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GenerateAutonomousDatabaseWalletRequest",
          data.request,
          "GenerateAutonomousDatabaseWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GenerateAutonomousDatabaseWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateRecommendedVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GenerateRecommendedVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GenerateRecommendedVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GenerateRecommendedVmClusterNetwork"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.generateRecommendedVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GenerateRecommendedVmClusterNetworkRequest",
          data.request,
          "GenerateRecommendedVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GenerateRecommendedVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousContainerDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousContainerDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousContainerDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GetAutonomousContainerDatabase"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousContainerDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousContainerDatabaseRequest",
          data.request,
          "GetAutonomousContainerDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousContainerDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDataWarehouseRequest",
          data.request,
          "GetAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDataWarehouseBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDataWarehouseBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDataWarehouseBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GetAutonomousDataWarehouseBackup"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDataWarehouseBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDataWarehouseBackupRequest",
          data.request,
          "GetAutonomousDataWarehouseBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDataWarehouseBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDatabaseRequest",
          data.request,
          "GetAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDatabaseBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDatabaseBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDatabaseBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetAutonomousDatabaseBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDatabaseBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDatabaseBackupRequest",
          data.request,
          "GetAutonomousDatabaseBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDatabaseBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDatabaseRegionalWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDatabaseRegionalWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDatabaseRegionalWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GetAutonomousDatabaseRegionalWallet"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDatabaseRegionalWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDatabaseRegionalWalletRequest",
          data.request,
          "GetAutonomousDatabaseRegionalWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDatabaseRegionalWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousDatabaseWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousDatabaseWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousDatabaseWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetAutonomousDatabaseWallet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousDatabaseWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousDatabaseWalletRequest",
          data.request,
          "GetAutonomousDatabaseWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousDatabaseWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAutonomousExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetAutonomousExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetAutonomousExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "GetAutonomousExadataInfrastructure"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getAutonomousExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetAutonomousExadataInfrastructureRequest",
          data.request,
          "GetAutonomousExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetAutonomousExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackup method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetBackup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetBackupRequest",
          data.request,
          "GetBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackupDestination method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetBackupDestination"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetBackupDestination"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetBackupDestination");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getBackupDestination(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetBackupDestinationRequest",
          data.request,
          "GetBackupDestinationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetBackupDestinationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDataGuardAssociation method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDataGuardAssociation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetDataGuardAssociation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDataGuardAssociation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDataGuardAssociation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDataGuardAssociationRequest",
          data.request,
          "GetDataGuardAssociationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDataGuardAssociationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDatabase");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDatabaseRequest",
          data.request,
          "GetDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbHome method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbHome"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDbHome");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbHome");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbHome(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbHomeRequest",
          data.request,
          "GetDbHomeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbHomeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbHomePatch method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbHomePatch"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDbHomePatch");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbHomePatch");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbHomePatch(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbHomePatchRequest",
          data.request,
          "GetDbHomePatchResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbHomePatchRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbHomePatchHistoryEntry method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbHomePatchHistoryEntry"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetDbHomePatchHistoryEntry"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbHomePatchHistoryEntry");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbHomePatchHistoryEntry(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbHomePatchHistoryEntryRequest",
          data.request,
          "GetDbHomePatchHistoryEntryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbHomePatchHistoryEntryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbNode method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbNode"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDbNode");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbNode");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbNode(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbNodeRequest",
          data.request,
          "GetDbNodeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbNodeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbSystem method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDbSystem");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbSystemRequest",
          data.request,
          "GetDbSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbSystemPatch method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbSystemPatch"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetDbSystemPatch");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbSystemPatch");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbSystemPatch(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbSystemPatchRequest",
          data.request,
          "GetDbSystemPatchResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbSystemPatchRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDbSystemPatchHistoryEntry method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetDbSystemPatchHistoryEntry"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetDbSystemPatchHistoryEntry"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetDbSystemPatchHistoryEntry");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getDbSystemPatchHistoryEntry(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetDbSystemPatchHistoryEntryRequest",
          data.request,
          "GetDbSystemPatchHistoryEntryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetDbSystemPatchHistoryEntryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetExadataInfrastructure");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetExadataInfrastructureRequest",
          data.request,
          "GetExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExadataInfrastructureOcpus method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetExadataInfrastructureOcpus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetExadataInfrastructureOcpus"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetExadataInfrastructureOcpus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getExadataInfrastructureOcpus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetExadataInfrastructureOcpusRequest",
          data.request,
          "GetExadataInfrastructureOcpusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetExadataInfrastructureOcpusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExadataIormConfig method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetExadataIormConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetExadataIormConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetExadataIormConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getExadataIormConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetExadataIormConfigRequest",
          data.request,
          "GetExadataIormConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetExadataIormConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExternalBackupJob method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetExternalBackupJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetExternalBackupJob"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetExternalBackupJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getExternalBackupJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetExternalBackupJobRequest",
          data.request,
          "GetExternalBackupJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetExternalBackupJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getMaintenanceRun method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetMaintenanceRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetMaintenanceRun"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetMaintenanceRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getMaintenanceRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetMaintenanceRunRequest",
          data.request,
          "GetMaintenanceRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetMaintenanceRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVmCluster method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetVmCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "GetVmCluster");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetVmCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getVmCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetVmClusterRequest",
          data.request,
          "GetVmClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetVmClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "GetVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "GetVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "GetVmClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.getVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "GetVmClusterNetworkRequest",
          data.request,
          "GetVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "GetVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test launchAutonomousExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "LaunchAutonomousExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "LaunchAutonomousExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "LaunchAutonomousExadataInfrastructure"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.launchAutonomousExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "LaunchAutonomousExadataInfrastructureRequest",
          data.request,
          "LaunchAutonomousExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "LaunchAutonomousExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test launchDbSystem method", async function() {
    if (!(await tsclient.isApiEnabled("database", "LaunchDbSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "LaunchDbSystem");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "LaunchDbSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.launchDbSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "LaunchDbSystemRequest",
          data.request,
          "LaunchDbSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "LaunchDbSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousContainerDatabases method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousContainerDatabases"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousContainerDatabases"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListAutonomousContainerDatabases"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousContainerDatabases(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousContainerDatabasesRequest",
          data.request,
          "ListAutonomousContainerDatabasesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousContainerDatabasesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDataWarehouseBackups method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDataWarehouseBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDataWarehouseBackups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListAutonomousDataWarehouseBackups"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDataWarehouseBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDataWarehouseBackupsRequest",
          data.request,
          "ListAutonomousDataWarehouseBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDataWarehouseBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDataWarehouses method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDataWarehouses"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDataWarehouses"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListAutonomousDataWarehouses");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDataWarehouses(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDataWarehousesRequest",
          data.request,
          "ListAutonomousDataWarehousesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDataWarehousesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDatabaseBackups method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDatabaseBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDatabaseBackups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListAutonomousDatabaseBackups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDatabaseBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDatabaseBackupsRequest",
          data.request,
          "ListAutonomousDatabaseBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDatabaseBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDatabases method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDatabases"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDatabases"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListAutonomousDatabases");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDatabases(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDatabasesRequest",
          data.request,
          "ListAutonomousDatabasesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDatabasesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDbPreviewVersions method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDbPreviewVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDbPreviewVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListAutonomousDbPreviewVersions"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDbPreviewVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDbPreviewVersionsRequest",
          data.request,
          "ListAutonomousDbPreviewVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDbPreviewVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousDbVersions method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousDbVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousDbVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListAutonomousDbVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousDbVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousDbVersionsRequest",
          data.request,
          "ListAutonomousDbVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousDbVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousExadataInfrastructureShapes method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousExadataInfrastructureShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousExadataInfrastructureShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListAutonomousExadataInfrastructureShapes"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousExadataInfrastructureShapes(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousExadataInfrastructureShapesRequest",
          data.request,
          "ListAutonomousExadataInfrastructureShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousExadataInfrastructureShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAutonomousExadataInfrastructures method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListAutonomousExadataInfrastructures"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListAutonomousExadataInfrastructures"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListAutonomousExadataInfrastructures"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listAutonomousExadataInfrastructures(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListAutonomousExadataInfrastructuresRequest",
          data.request,
          "ListAutonomousExadataInfrastructuresResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListAutonomousExadataInfrastructuresRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBackupDestination method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListBackupDestination"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListBackupDestination"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListBackupDestination");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listBackupDestination(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListBackupDestinationRequest",
          data.request,
          "ListBackupDestinationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListBackupDestinationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBackups method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListBackups");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListBackups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListBackupsRequest",
          data.request,
          "ListBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDataGuardAssociations method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDataGuardAssociations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDataGuardAssociations"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDataGuardAssociations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDataGuardAssociations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDataGuardAssociationsRequest",
          data.request,
          "ListDataGuardAssociationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDataGuardAssociationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDatabases method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDatabases"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListDatabases");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDatabases");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDatabases(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDatabasesRequest",
          data.request,
          "ListDatabasesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDatabasesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbHomePatchHistoryEntries method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbHomePatchHistoryEntries"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDbHomePatchHistoryEntries"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbHomePatchHistoryEntries");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbHomePatchHistoryEntries(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbHomePatchHistoryEntriesRequest",
          data.request,
          "ListDbHomePatchHistoryEntriesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbHomePatchHistoryEntriesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbHomePatches method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbHomePatches"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDbHomePatches"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbHomePatches");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbHomePatches(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbHomePatchesRequest",
          data.request,
          "ListDbHomePatchesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbHomePatchesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbHomes method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbHomes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListDbHomes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbHomes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbHomes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbHomesRequest",
          data.request,
          "ListDbHomesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbHomesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbNodes method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbNodes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListDbNodes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbNodes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbNodes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbNodesRequest",
          data.request,
          "ListDbNodesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbNodesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbSystemPatchHistoryEntries method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbSystemPatchHistoryEntries"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDbSystemPatchHistoryEntries"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "ListDbSystemPatchHistoryEntries"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbSystemPatchHistoryEntries(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbSystemPatchHistoryEntriesRequest",
          data.request,
          "ListDbSystemPatchHistoryEntriesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbSystemPatchHistoryEntriesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbSystemPatches method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbSystemPatches"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDbSystemPatches"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbSystemPatches");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbSystemPatches(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbSystemPatchesRequest",
          data.request,
          "ListDbSystemPatchesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbSystemPatchesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbSystemShapes method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbSystemShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListDbSystemShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbSystemShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbSystemShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbSystemShapesRequest",
          data.request,
          "ListDbSystemShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbSystemShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbSystems method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbSystems"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListDbSystems");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbSystems");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbSystems(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbSystemsRequest",
          data.request,
          "ListDbSystemsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbSystemsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDbVersions method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListDbVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListDbVersions");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListDbVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listDbVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListDbVersionsRequest",
          data.request,
          "ListDbVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListDbVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listExadataInfrastructures method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListExadataInfrastructures"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListExadataInfrastructures"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListExadataInfrastructures");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listExadataInfrastructures(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListExadataInfrastructuresRequest",
          data.request,
          "ListExadataInfrastructuresResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListExadataInfrastructuresRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listGiVersions method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListGiVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListGiVersions");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListGiVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listGiVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListGiVersionsRequest",
          data.request,
          "ListGiVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListGiVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMaintenanceRuns method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListMaintenanceRuns"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListMaintenanceRuns"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListMaintenanceRuns");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listMaintenanceRuns(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListMaintenanceRunsRequest",
          data.request,
          "ListMaintenanceRunsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListMaintenanceRunsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVmClusterNetworks method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListVmClusterNetworks"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ListVmClusterNetworks"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListVmClusterNetworks");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listVmClusterNetworks(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListVmClusterNetworksRequest",
          data.request,
          "ListVmClusterNetworksResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListVmClusterNetworksRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVmClusters method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ListVmClusters"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "ListVmClusters");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ListVmClusters");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.listVmClusters(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ListVmClustersRequest",
          data.request,
          "ListVmClustersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ListVmClustersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test registerAutonomousDatabaseDataSafe method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RegisterAutonomousDatabaseDataSafe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "RegisterAutonomousDatabaseDataSafe"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "RegisterAutonomousDatabaseDataSafe"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.registerAutonomousDatabaseDataSafe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RegisterAutonomousDatabaseDataSafeRequest",
          data.request,
          "RegisterAutonomousDatabaseDataSafeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RegisterAutonomousDatabaseDataSafeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test reinstateDataGuardAssociation method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ReinstateDataGuardAssociation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ReinstateDataGuardAssociation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ReinstateDataGuardAssociation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.reinstateDataGuardAssociation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ReinstateDataGuardAssociationRequest",
          data.request,
          "ReinstateDataGuardAssociationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ReinstateDataGuardAssociationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restartAutonomousContainerDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RestartAutonomousContainerDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "RestartAutonomousContainerDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "RestartAutonomousContainerDatabase"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.restartAutonomousContainerDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RestartAutonomousContainerDatabaseRequest",
          data.request,
          "RestartAutonomousContainerDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RestartAutonomousContainerDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restartAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RestartAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "RestartAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "RestartAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.restartAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RestartAutonomousDatabaseRequest",
          data.request,
          "RestartAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RestartAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restoreAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RestoreAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "RestoreAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "RestoreAutonomousDataWarehouse"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.restoreAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RestoreAutonomousDataWarehouseRequest",
          data.request,
          "RestoreAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RestoreAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restoreAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RestoreAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "RestoreAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "RestoreAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.restoreAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RestoreAutonomousDatabaseRequest",
          data.request,
          "RestoreAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RestoreAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restoreDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "RestoreDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "RestoreDatabase");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "RestoreDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.restoreDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "RestoreDatabaseRequest",
          data.request,
          "RestoreDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "RestoreDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test startAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "StartAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "StartAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "StartAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.startAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "StartAutonomousDataWarehouseRequest",
          data.request,
          "StartAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "StartAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test startAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "StartAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "StartAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "StartAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.startAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "StartAutonomousDatabaseRequest",
          data.request,
          "StartAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "StartAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test stopAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "StopAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "StopAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "StopAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.stopAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "StopAutonomousDataWarehouseRequest",
          data.request,
          "StopAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "StopAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test stopAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "StopAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "StopAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "StopAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.stopAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "StopAutonomousDatabaseRequest",
          data.request,
          "StopAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "StopAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test switchoverDataGuardAssociation method", async function() {
    if (!(await tsclient.isApiEnabled("database", "SwitchoverDataGuardAssociation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "SwitchoverDataGuardAssociation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "SwitchoverDataGuardAssociation"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.switchoverDataGuardAssociation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "SwitchoverDataGuardAssociationRequest",
          data.request,
          "SwitchoverDataGuardAssociationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "SwitchoverDataGuardAssociationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateAutonomousContainerDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "TerminateAutonomousContainerDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "TerminateAutonomousContainerDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "TerminateAutonomousContainerDatabase"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.terminateAutonomousContainerDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "TerminateAutonomousContainerDatabaseRequest",
          data.request,
          "TerminateAutonomousContainerDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "TerminateAutonomousContainerDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateAutonomousExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "TerminateAutonomousExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "TerminateAutonomousExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "TerminateAutonomousExadataInfrastructure"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.terminateAutonomousExadataInfrastructure(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "TerminateAutonomousExadataInfrastructureRequest",
          data.request,
          "TerminateAutonomousExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "TerminateAutonomousExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateDbSystem method", async function() {
    if (!(await tsclient.isApiEnabled("database", "TerminateDbSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "TerminateDbSystem"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "TerminateDbSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.terminateDbSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "TerminateDbSystemRequest",
          data.request,
          "TerminateDbSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "TerminateDbSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousContainerDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousContainerDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousContainerDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "UpdateAutonomousContainerDatabase"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousContainerDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousContainerDatabaseRequest",
          data.request,
          "UpdateAutonomousContainerDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousContainerDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousDataWarehouse method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousDataWarehouse"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousDataWarehouse"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateAutonomousDataWarehouse");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousDataWarehouse(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousDataWarehouseRequest",
          data.request,
          "UpdateAutonomousDataWarehouseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousDataWarehouseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousDatabase"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateAutonomousDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousDatabaseRequest",
          data.request,
          "UpdateAutonomousDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousDatabaseRegionalWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousDatabaseRegionalWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousDatabaseRegionalWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "UpdateAutonomousDatabaseRegionalWallet"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousDatabaseRegionalWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousDatabaseRegionalWalletRequest",
          data.request,
          "UpdateAutonomousDatabaseRegionalWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousDatabaseRegionalWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousDatabaseWallet method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousDatabaseWallet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousDatabaseWallet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "UpdateAutonomousDatabaseWallet"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousDatabaseWallet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousDatabaseWalletRequest",
          data.request,
          "UpdateAutonomousDatabaseWalletResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousDatabaseWalletRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAutonomousExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateAutonomousExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateAutonomousExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "database",
      "UpdateAutonomousExadataInfrastructure"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateAutonomousExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateAutonomousExadataInfrastructureRequest",
          data.request,
          "UpdateAutonomousExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateAutonomousExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBackupDestination method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateBackupDestination"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateBackupDestination"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateBackupDestination");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateBackupDestination(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateBackupDestinationRequest",
          data.request,
          "UpdateBackupDestinationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateBackupDestinationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDatabase method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateDatabase"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "UpdateDatabase");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateDatabase");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateDatabase(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateDatabaseRequest",
          data.request,
          "UpdateDatabaseResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateDatabaseRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDbHome method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateDbHome"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "UpdateDbHome");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateDbHome");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateDbHome(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateDbHomeRequest",
          data.request,
          "UpdateDbHomeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateDbHomeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDbSystem method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateDbSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "UpdateDbSystem");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateDbSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateDbSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateDbSystemRequest",
          data.request,
          "UpdateDbSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateDbSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateExadataInfrastructure method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateExadataInfrastructure"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateExadataInfrastructure"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateExadataInfrastructure");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateExadataInfrastructure(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateExadataInfrastructureRequest",
          data.request,
          "UpdateExadataInfrastructureResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateExadataInfrastructureRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateExadataIormConfig method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateExadataIormConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateExadataIormConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateExadataIormConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateExadataIormConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateExadataIormConfigRequest",
          data.request,
          "UpdateExadataIormConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateExadataIormConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateMaintenanceRun method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateMaintenanceRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateMaintenanceRun"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateMaintenanceRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateMaintenanceRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateMaintenanceRunRequest",
          data.request,
          "UpdateMaintenanceRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateMaintenanceRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVmCluster method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateVmCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("database", "Database", "UpdateVmCluster");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateVmCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateVmCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateVmClusterRequest",
          data.request,
          "UpdateVmClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateVmClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "UpdateVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "UpdateVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "UpdateVmClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.updateVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "UpdateVmClusterNetworkRequest",
          data.request,
          "UpdateVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "UpdateVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test validateVmClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("database", "ValidateVmClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "database",
      "Database",
      "ValidateVmClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const databaseClient = new database.DatabaseClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      databaseClient.endpoint = config.endpoint;
    } else {
      databaseClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("database", "ValidateVmClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await databaseClient.validateVmClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "database",
          "ValidateVmClusterNetworkRequest",
          data.request,
          "ValidateVmClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "database",
            "ValidateVmClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
