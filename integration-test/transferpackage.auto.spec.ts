/**
 * Auto generated test cases for "Data Transfer Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import dts = require("../lib/dts/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test TransferPackage Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test attachDevicesToTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "AttachDevicesToTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "AttachDevicesToTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "AttachDevicesToTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.attachDevicesToTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "AttachDevicesToTransferPackageRequest",
          data.request,
          "AttachDevicesToTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "AttachDevicesToTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "CreateTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "CreateTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "CreateTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.createTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "CreateTransferPackageRequest",
          data.request,
          "CreateTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "CreateTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "DeleteTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "DeleteTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "DeleteTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.deleteTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "DeleteTransferPackageRequest",
          data.request,
          "DeleteTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "DeleteTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachDevicesFromTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "DetachDevicesFromTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "DetachDevicesFromTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "DetachDevicesFromTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.detachDevicesFromTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "DetachDevicesFromTransferPackageRequest",
          data.request,
          "DetachDevicesFromTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "DetachDevicesFromTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "GetTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "GetTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "GetTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.getTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "GetTransferPackageRequest",
          data.request,
          "GetTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "GetTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTransferPackages method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "ListTransferPackages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "ListTransferPackages"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "ListTransferPackages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.listTransferPackages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "ListTransferPackagesRequest",
          data.request,
          "ListTransferPackagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "ListTransferPackagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTransferPackage method", async function() {
    if (!(await tsclient.isApiEnabled("dts", "UpdateTransferPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dts",
      "TransferPackage",
      "UpdateTransferPackage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dtsClient = new dts.TransferPackageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dtsClient.endpoint = config.endpoint;
    } else {
      dtsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dts", "UpdateTransferPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dtsClient.updateTransferPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dts",
          "UpdateTransferPackageRequest",
          data.request,
          "UpdateTransferPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dts",
            "UpdateTransferPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
