/**
 * Auto generated test cases for "Core Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import core = require("../lib/core/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Blockstorage Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeBootVolumeBackupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeBootVolumeBackupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeBootVolumeBackupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeBootVolumeBackupCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeBootVolumeBackupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeBootVolumeBackupCompartmentRequest",
          data.request,
          "ChangeBootVolumeBackupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeBootVolumeBackupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeBootVolumeCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeBootVolumeCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeBootVolumeCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeBootVolumeCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeBootVolumeCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeBootVolumeCompartmentRequest",
          data.request,
          "ChangeBootVolumeCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeBootVolumeCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVolumeBackupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVolumeBackupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeVolumeBackupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeVolumeBackupCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVolumeBackupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVolumeBackupCompartmentRequest",
          data.request,
          "ChangeVolumeBackupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVolumeBackupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVolumeCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVolumeCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeVolumeCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeVolumeCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVolumeCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVolumeCompartmentRequest",
          data.request,
          "ChangeVolumeCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVolumeCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVolumeGroupBackupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVolumeGroupBackupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeVolumeGroupBackupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeVolumeGroupBackupCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVolumeGroupBackupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVolumeGroupBackupCompartmentRequest",
          data.request,
          "ChangeVolumeGroupBackupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVolumeGroupBackupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVolumeGroupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVolumeGroupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ChangeVolumeGroupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeVolumeGroupCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVolumeGroupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVolumeGroupCompartmentRequest",
          data.request,
          "ChangeVolumeGroupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVolumeGroupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test copyBootVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CopyBootVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CopyBootVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CopyBootVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.copyBootVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CopyBootVolumeBackupRequest",
          data.request,
          "CopyBootVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CopyBootVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test copyVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CopyVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "CopyVolumeBackup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CopyVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.copyVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CopyVolumeBackupRequest",
          data.request,
          "CopyVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CopyVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "CreateBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateBootVolumeRequest",
          data.request,
          "CreateBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBootVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateBootVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateBootVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateBootVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createBootVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateBootVolumeBackupRequest",
          data.request,
          "CreateBootVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateBootVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "CreateVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeRequest",
          data.request,
          "CreateVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeBackupRequest",
          data.request,
          "CreateVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolumeBackupPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolumeBackupPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateVolumeBackupPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVolumeBackupPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolumeBackupPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeBackupPolicyRequest",
          data.request,
          "CreateVolumeBackupPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeBackupPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolumeBackupPolicyAssignment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolumeBackupPolicyAssignment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateVolumeBackupPolicyAssignment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "CreateVolumeBackupPolicyAssignment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolumeBackupPolicyAssignment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeBackupPolicyAssignmentRequest",
          data.request,
          "CreateVolumeBackupPolicyAssignmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeBackupPolicyAssignmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolumeGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolumeGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateVolumeGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVolumeGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolumeGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeGroupRequest",
          data.request,
          "CreateVolumeGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVolumeGroupBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVolumeGroupBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "CreateVolumeGroupBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVolumeGroupBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVolumeGroupBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVolumeGroupBackupRequest",
          data.request,
          "CreateVolumeGroupBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVolumeGroupBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "DeleteBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteBootVolumeRequest",
          data.request,
          "DeleteBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBootVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteBootVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteBootVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteBootVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteBootVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteBootVolumeBackupRequest",
          data.request,
          "DeleteBootVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteBootVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBootVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteBootVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteBootVolumeKmsKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteBootVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteBootVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteBootVolumeKmsKeyRequest",
          data.request,
          "DeleteBootVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteBootVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "DeleteVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeRequest",
          data.request,
          "DeleteVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeBackupRequest",
          data.request,
          "DeleteVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeBackupPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeBackupPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeBackupPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolumeBackupPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeBackupPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeBackupPolicyRequest",
          data.request,
          "DeleteVolumeBackupPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeBackupPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeBackupPolicyAssignment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeBackupPolicyAssignment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeBackupPolicyAssignment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "DeleteVolumeBackupPolicyAssignment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeBackupPolicyAssignment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeBackupPolicyAssignmentRequest",
          data.request,
          "DeleteVolumeBackupPolicyAssignmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeBackupPolicyAssignmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolumeGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeGroupRequest",
          data.request,
          "DeleteVolumeGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeGroupBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeGroupBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeGroupBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolumeGroupBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeGroupBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeGroupBackupRequest",
          data.request,
          "DeleteVolumeGroupBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeGroupBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "DeleteVolumeKmsKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVolumeKmsKeyRequest",
          data.request,
          "DeleteVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "GetBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetBootVolumeRequest",
          data.request,
          "GetBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBootVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetBootVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetBootVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetBootVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getBootVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetBootVolumeBackupRequest",
          data.request,
          "GetBootVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetBootVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBootVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetBootVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetBootVolumeKmsKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetBootVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getBootVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetBootVolumeKmsKeyRequest",
          data.request,
          "GetBootVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetBootVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "GetVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeRequest",
          data.request,
          "GetVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "GetVolumeBackup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeBackupRequest",
          data.request,
          "GetVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeBackupPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeBackupPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetVolumeBackupPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeBackupPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeBackupPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeBackupPolicyRequest",
          data.request,
          "GetVolumeBackupPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeBackupPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeBackupPolicyAssetAssignment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeBackupPolicyAssetAssignment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetVolumeBackupPolicyAssetAssignment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "GetVolumeBackupPolicyAssetAssignment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeBackupPolicyAssetAssignment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeBackupPolicyAssetAssignmentRequest",
          data.request,
          "GetVolumeBackupPolicyAssetAssignmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeBackupPolicyAssetAssignmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeBackupPolicyAssignment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeBackupPolicyAssignment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetVolumeBackupPolicyAssignment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeBackupPolicyAssignment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeBackupPolicyAssignment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeBackupPolicyAssignmentRequest",
          data.request,
          "GetVolumeBackupPolicyAssignmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeBackupPolicyAssignmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "GetVolumeGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeGroupRequest",
          data.request,
          "GetVolumeGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeGroupBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeGroupBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "GetVolumeGroupBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeGroupBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeGroupBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeGroupBackupRequest",
          data.request,
          "GetVolumeGroupBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeGroupBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "GetVolumeKmsKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeKmsKeyRequest",
          data.request,
          "GetVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBootVolumeBackups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListBootVolumeBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ListBootVolumeBackups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListBootVolumeBackups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listBootVolumeBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListBootVolumeBackupsRequest",
          data.request,
          "ListBootVolumeBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListBootVolumeBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBootVolumes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListBootVolumes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "ListBootVolumes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListBootVolumes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listBootVolumes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListBootVolumesRequest",
          data.request,
          "ListBootVolumesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListBootVolumesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumeBackupPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumeBackupPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ListVolumeBackupPolicies"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumeBackupPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumeBackupPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumeBackupPoliciesRequest",
          data.request,
          "ListVolumeBackupPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumeBackupPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumeBackups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumeBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ListVolumeBackups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumeBackups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumeBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumeBackupsRequest",
          data.request,
          "ListVolumeBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumeBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumeGroupBackups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumeGroupBackups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "ListVolumeGroupBackups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumeGroupBackups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumeGroupBackups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumeGroupBackupsRequest",
          data.request,
          "ListVolumeGroupBackupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumeGroupBackupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumeGroups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumeGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "ListVolumeGroups");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumeGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumeGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumeGroupsRequest",
          data.request,
          "ListVolumeGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumeGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "ListVolumes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumesRequest",
          data.request,
          "ListVolumesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "UpdateBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateBootVolumeRequest",
          data.request,
          "UpdateBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBootVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateBootVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateBootVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateBootVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateBootVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateBootVolumeBackupRequest",
          data.request,
          "UpdateBootVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateBootVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBootVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateBootVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateBootVolumeKmsKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateBootVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateBootVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateBootVolumeKmsKeyRequest",
          data.request,
          "UpdateBootVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateBootVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Blockstorage", "UpdateVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeRequest",
          data.request,
          "UpdateVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolumeBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolumeBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateVolumeBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolumeBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolumeBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeBackupRequest",
          data.request,
          "UpdateVolumeBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolumeBackupPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolumeBackupPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateVolumeBackupPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolumeBackupPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolumeBackupPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeBackupPolicyRequest",
          data.request,
          "UpdateVolumeBackupPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeBackupPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolumeGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolumeGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateVolumeGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolumeGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolumeGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeGroupRequest",
          data.request,
          "UpdateVolumeGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolumeGroupBackup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolumeGroupBackup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateVolumeGroupBackup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolumeGroupBackup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolumeGroupBackup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeGroupBackupRequest",
          data.request,
          "UpdateVolumeGroupBackupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeGroupBackupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVolumeKmsKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVolumeKmsKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Blockstorage",
      "UpdateVolumeKmsKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.BlockstorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVolumeKmsKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVolumeKmsKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVolumeKmsKeyRequest",
          data.request,
          "UpdateVolumeKmsKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVolumeKmsKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
