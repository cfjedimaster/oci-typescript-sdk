/**
 * Auto generated test cases for "Container Engine for Kubernetes API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import containerengine = require("../lib/containerengine/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test ContainerEngine Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test createCluster method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "CreateCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "CreateCluster"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "CreateCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.createCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "CreateClusterRequest",
          data.request,
          "CreateClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "CreateClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createKubeconfig method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "CreateKubeconfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "CreateKubeconfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "CreateKubeconfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.createKubeconfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "CreateKubeconfigRequest",
          data.request,
          "CreateKubeconfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "CreateKubeconfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createNodePool method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "CreateNodePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "CreateNodePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "CreateNodePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.createNodePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "CreateNodePoolRequest",
          data.request,
          "CreateNodePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "CreateNodePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCluster method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "DeleteCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "DeleteCluster"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "DeleteCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.deleteCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "DeleteClusterRequest",
          data.request,
          "DeleteClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "DeleteClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteNodePool method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "DeleteNodePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "DeleteNodePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "DeleteNodePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.deleteNodePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "DeleteNodePoolRequest",
          data.request,
          "DeleteNodePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "DeleteNodePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "DeleteWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "DeleteWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "DeleteWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.deleteWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "DeleteWorkRequestRequest",
          data.request,
          "DeleteWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "DeleteWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCluster method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "GetCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "GetCluster"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "GetCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.getCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "GetClusterRequest",
          data.request,
          "GetClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "GetClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getClusterOptions method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "GetClusterOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "GetClusterOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "GetClusterOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.getClusterOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "GetClusterOptionsRequest",
          data.request,
          "GetClusterOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "GetClusterOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNodePool method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "GetNodePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "GetNodePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "GetNodePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.getNodePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "GetNodePoolRequest",
          data.request,
          "GetNodePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "GetNodePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNodePoolOptions method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "GetNodePoolOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "GetNodePoolOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "GetNodePoolOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.getNodePoolOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "GetNodePoolOptionsRequest",
          data.request,
          "GetNodePoolOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "GetNodePoolOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listClusters method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "ListClusters"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "ListClusters"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "ListClusters");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.listClusters(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "ListClustersRequest",
          data.request,
          "ListClustersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "ListClustersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNodePools method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "ListNodePools"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "ListNodePools"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "ListNodePools");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.listNodePools(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "ListNodePoolsRequest",
          data.request,
          "ListNodePoolsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "ListNodePoolsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCluster method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "UpdateCluster"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "UpdateCluster"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "UpdateCluster");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.updateCluster(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "UpdateClusterRequest",
          data.request,
          "UpdateClusterResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "UpdateClusterRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNodePool method", async function() {
    if (!(await tsclient.isApiEnabled("containerengine", "UpdateNodePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "containerengine",
      "ContainerEngine",
      "UpdateNodePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const containerengineClient = new containerengine.ContainerEngineClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      containerengineClient.endpoint = config.endpoint;
    } else {
      containerengineClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("containerengine", "UpdateNodePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await containerengineClient.updateNodePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "containerengine",
          "UpdateNodePoolRequest",
          data.request,
          "UpdateNodePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "containerengine",
            "UpdateNodePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
