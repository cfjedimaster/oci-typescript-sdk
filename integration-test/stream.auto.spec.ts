/**
 * Auto generated test cases for "Streaming Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import streaming = require("../lib/streaming/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Stream Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test consumerCommit method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "ConsumerCommit"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "ConsumerCommit");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "ConsumerCommit"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "ConsumerCommit");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.consumerCommit(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "ConsumerCommitRequest",
          data.request,
          "ConsumerCommitResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "ConsumerCommitRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test consumerHeartbeat method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "ConsumerHeartbeat"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "ConsumerHeartbeat");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "ConsumerHeartbeat"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "ConsumerHeartbeat");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.consumerHeartbeat(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "ConsumerHeartbeatRequest",
          data.request,
          "ConsumerHeartbeatResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "ConsumerHeartbeatRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCursor method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "CreateCursor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "CreateCursor");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "CreateCursor"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "CreateCursor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.createCursor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "CreateCursorRequest",
          data.request,
          "CreateCursorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "CreateCursorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createGroupCursor method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "CreateGroupCursor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "CreateGroupCursor");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "CreateGroupCursor"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "CreateGroupCursor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.createGroupCursor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "CreateGroupCursorRequest",
          data.request,
          "CreateGroupCursorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "CreateGroupCursorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getGroup method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "GetGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "GetGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint("streaming", "StreamClient", "GetGroup");
    const requests: any[] = await tsclient.getRequests("streaming", "GetGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.getGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "GetGroupRequest",
          data.request,
          "GetGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "GetGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getMessages method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "GetMessages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "GetMessages");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "GetMessages"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "GetMessages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.getMessages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "GetMessagesRequest",
          data.request,
          "GetMessagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "GetMessagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test putMessages method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "PutMessages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "PutMessages");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "PutMessages"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "PutMessages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.putMessages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "PutMessagesRequest",
          data.request,
          "PutMessagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "PutMessagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateGroup method", async function() {
    if (!(await tsclient.isApiEnabled("streaming", "UpdateGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("streaming", "Stream", "UpdateGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const streamingClient = new streaming.StreamClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    streamingClient.endpoint = await tsclient.getEndPoint(
      "streaming",
      "StreamClient",
      "UpdateGroup"
    );
    const requests: any[] = await tsclient.getRequests("streaming", "UpdateGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await streamingClient.updateGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "streaming",
          "UpdateGroupRequest",
          data.request,
          "UpdateGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "streaming",
            "UpdateGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
