/**
 * Auto generated test cases for "Marketplace Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import marketplace = require("../lib/marketplace/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Marketplace Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test createAcceptedAgreement method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "CreateAcceptedAgreement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "CreateAcceptedAgreement"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "CreateAcceptedAgreement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.createAcceptedAgreement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "CreateAcceptedAgreementRequest",
          data.request,
          "CreateAcceptedAgreementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "CreateAcceptedAgreementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAcceptedAgreement method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "DeleteAcceptedAgreement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "DeleteAcceptedAgreement"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "DeleteAcceptedAgreement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.deleteAcceptedAgreement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "DeleteAcceptedAgreementRequest",
          data.request,
          "DeleteAcceptedAgreementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "DeleteAcceptedAgreementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAcceptedAgreement method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "GetAcceptedAgreement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "GetAcceptedAgreement"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "GetAcceptedAgreement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.getAcceptedAgreement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "GetAcceptedAgreementRequest",
          data.request,
          "GetAcceptedAgreementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "GetAcceptedAgreementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAgreement method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "GetAgreement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "GetAgreement"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "GetAgreement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.getAgreement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "GetAgreementRequest",
          data.request,
          "GetAgreementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "GetAgreementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getListing method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "GetListing"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("marketplace", "Marketplace", "GetListing");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "GetListing");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.getListing(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "GetListingRequest",
          data.request,
          "GetListingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "GetListingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPackage method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "GetPackage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("marketplace", "Marketplace", "GetPackage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "GetPackage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.getPackage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "GetPackageRequest",
          data.request,
          "GetPackageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "GetPackageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAcceptedAgreements method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListAcceptedAgreements"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListAcceptedAgreements"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListAcceptedAgreements");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listAcceptedAgreements(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListAcceptedAgreementsRequest",
          data.request,
          "ListAcceptedAgreementsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListAcceptedAgreementsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAgreements method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListAgreements"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListAgreements"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListAgreements");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listAgreements(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListAgreementsRequest",
          data.request,
          "ListAgreementsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListAgreementsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCategories method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListCategories"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListCategories"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListCategories");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listCategories(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListCategoriesRequest",
          data.request,
          "ListCategoriesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListCategoriesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listListings method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListListings"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListListings"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListListings");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listListings(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListListingsRequest",
          data.request,
          "ListListingsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListListingsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPackages method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListPackages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListPackages"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListPackages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listPackages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListPackagesRequest",
          data.request,
          "ListPackagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListPackagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPublishers method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "ListPublishers"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "ListPublishers"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "ListPublishers");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.listPublishers(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "ListPublishersRequest",
          data.request,
          "ListPublishersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "ListPublishersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAcceptedAgreement method", async function() {
    if (!(await tsclient.isApiEnabled("marketplace", "UpdateAcceptedAgreement"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "marketplace",
      "Marketplace",
      "UpdateAcceptedAgreement"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const marketplaceClient = new marketplace.MarketplaceClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      marketplaceClient.endpoint = config.endpoint;
    } else {
      marketplaceClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("marketplace", "UpdateAcceptedAgreement");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await marketplaceClient.updateAcceptedAgreement(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "marketplace",
          "UpdateAcceptedAgreementRequest",
          data.request,
          "UpdateAcceptedAgreementResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "marketplace",
            "UpdateAcceptedAgreementRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
