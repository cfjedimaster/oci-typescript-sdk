/**
 * Auto generated test cases for "Events API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import events = require("../lib/events/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Events Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeRuleCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("events", "ChangeRuleCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "events",
      "Events",
      "ChangeRuleCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "ChangeRuleCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.changeRuleCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "ChangeRuleCompartmentRequest",
          data.request,
          "ChangeRuleCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "ChangeRuleCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRule method", async function() {
    if (!(await tsclient.isApiEnabled("events", "CreateRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("events", "Events", "CreateRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "CreateRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.createRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "CreateRuleRequest",
          data.request,
          "CreateRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "CreateRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRule method", async function() {
    if (!(await tsclient.isApiEnabled("events", "DeleteRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("events", "Events", "DeleteRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "DeleteRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.deleteRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "DeleteRuleRequest",
          data.request,
          "DeleteRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "DeleteRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRule method", async function() {
    if (!(await tsclient.isApiEnabled("events", "GetRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("events", "Events", "GetRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "GetRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.getRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "GetRuleRequest",
          data.request,
          "GetRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "GetRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRules method", async function() {
    if (!(await tsclient.isApiEnabled("events", "ListRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("events", "Events", "ListRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "ListRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.listRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "ListRulesRequest",
          data.request,
          "ListRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "ListRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRule method", async function() {
    if (!(await tsclient.isApiEnabled("events", "UpdateRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("events", "Events", "UpdateRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const eventsClient = new events.EventsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      eventsClient.endpoint = config.endpoint;
    } else {
      eventsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("events", "UpdateRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await eventsClient.updateRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "events",
          "UpdateRuleRequest",
          data.request,
          "UpdateRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "events",
            "UpdateRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
