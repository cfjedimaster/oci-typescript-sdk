/**
 * Auto generated test cases for "Web Application Acceleration and Security Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import waas = require("../lib/waas/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Redirect Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeHttpRedirectCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ChangeHttpRedirectCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Redirect",
      "ChangeHttpRedirectCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ChangeHttpRedirectCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.changeHttpRedirectCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ChangeHttpRedirectCompartmentRequest",
          data.request,
          "ChangeHttpRedirectCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ChangeHttpRedirectCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createHttpRedirect method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CreateHttpRedirect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Redirect", "CreateHttpRedirect");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CreateHttpRedirect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.createHttpRedirect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CreateHttpRedirectRequest",
          data.request,
          "CreateHttpRedirectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CreateHttpRedirectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteHttpRedirect method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "DeleteHttpRedirect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Redirect", "DeleteHttpRedirect");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "DeleteHttpRedirect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.deleteHttpRedirect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "DeleteHttpRedirectRequest",
          data.request,
          "DeleteHttpRedirectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "DeleteHttpRedirectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getHttpRedirect method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetHttpRedirect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Redirect", "GetHttpRedirect");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetHttpRedirect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getHttpRedirect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetHttpRedirectRequest",
          data.request,
          "GetHttpRedirectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetHttpRedirectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listHttpRedirects method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListHttpRedirects"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Redirect", "ListHttpRedirects");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListHttpRedirects");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listHttpRedirects(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListHttpRedirectsRequest",
          data.request,
          "ListHttpRedirectsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListHttpRedirectsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateHttpRedirect method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateHttpRedirect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Redirect", "UpdateHttpRedirect");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.RedirectClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateHttpRedirect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateHttpRedirect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateHttpRedirectRequest",
          data.request,
          "UpdateHttpRedirectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateHttpRedirectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
