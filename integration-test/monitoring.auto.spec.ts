/**
 * Auto generated test cases for "Monitoring API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import monitoring = require("../lib/monitoring/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Monitoring Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeAlarmCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "ChangeAlarmCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "ChangeAlarmCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "ChangeAlarmCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.changeAlarmCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "ChangeAlarmCompartmentRequest",
          data.request,
          "ChangeAlarmCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "ChangeAlarmCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAlarm method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "CreateAlarm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "CreateAlarm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "CreateAlarm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.createAlarm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "CreateAlarmRequest",
          data.request,
          "CreateAlarmResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "CreateAlarmRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAlarm method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "DeleteAlarm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "DeleteAlarm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "DeleteAlarm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.deleteAlarm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "DeleteAlarmRequest",
          data.request,
          "DeleteAlarmResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "DeleteAlarmRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAlarm method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "GetAlarm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "GetAlarm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "GetAlarm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.getAlarm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "GetAlarmRequest",
          data.request,
          "GetAlarmResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "GetAlarmRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAlarmHistory method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "GetAlarmHistory"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "GetAlarmHistory"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "GetAlarmHistory");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.getAlarmHistory(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "GetAlarmHistoryRequest",
          data.request,
          "GetAlarmHistoryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "GetAlarmHistoryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAlarms method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "ListAlarms"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "ListAlarms");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "ListAlarms");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.listAlarms(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "ListAlarmsRequest",
          data.request,
          "ListAlarmsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "ListAlarmsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAlarmsStatus method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "ListAlarmsStatus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "ListAlarmsStatus"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "ListAlarmsStatus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.listAlarmsStatus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "ListAlarmsStatusRequest",
          data.request,
          "ListAlarmsStatusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "ListAlarmsStatusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMetrics method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "ListMetrics"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "ListMetrics");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "ListMetrics");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.listMetrics(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "ListMetricsRequest",
          data.request,
          "ListMetricsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "ListMetricsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test postMetricData method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "PostMetricData"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "PostMetricData"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "PostMetricData");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.postMetricData(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "PostMetricDataRequest",
          data.request,
          "PostMetricDataResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "PostMetricDataRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removeAlarmSuppression method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "RemoveAlarmSuppression"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "RemoveAlarmSuppression"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "RemoveAlarmSuppression");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.removeAlarmSuppression(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "RemoveAlarmSuppressionRequest",
          data.request,
          "RemoveAlarmSuppressionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "RemoveAlarmSuppressionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test summarizeMetricsData method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "SummarizeMetricsData"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "monitoring",
      "Monitoring",
      "SummarizeMetricsData"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "SummarizeMetricsData");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.summarizeMetricsData(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "SummarizeMetricsDataRequest",
          data.request,
          "SummarizeMetricsDataResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "SummarizeMetricsDataRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAlarm method", async function() {
    if (!(await tsclient.isApiEnabled("monitoring", "UpdateAlarm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("monitoring", "Monitoring", "UpdateAlarm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const monitoringClient = new monitoring.MonitoringClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      monitoringClient.endpoint = config.endpoint;
    } else {
      monitoringClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("monitoring", "UpdateAlarm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await monitoringClient.updateAlarm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "monitoring",
          "UpdateAlarmRequest",
          data.request,
          "UpdateAlarmResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "monitoring",
            "UpdateAlarmRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
