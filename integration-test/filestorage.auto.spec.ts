/**
 * Auto generated test cases for "File Storage API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import filestorage = require("../lib/filestorage/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test FileStorage Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeFileSystemCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ChangeFileSystemCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ChangeFileSystemCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "filestorage",
      "ChangeFileSystemCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.changeFileSystemCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ChangeFileSystemCompartmentRequest",
          data.request,
          "ChangeFileSystemCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ChangeFileSystemCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeMountTargetCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ChangeMountTargetCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ChangeMountTargetCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "filestorage",
      "ChangeMountTargetCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.changeMountTargetCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ChangeMountTargetCompartmentRequest",
          data.request,
          "ChangeMountTargetCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ChangeMountTargetCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createExport method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "CreateExport"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "CreateExport"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "CreateExport");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.createExport(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "CreateExportRequest",
          data.request,
          "CreateExportResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "CreateExportRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createFileSystem method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "CreateFileSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "CreateFileSystem"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "CreateFileSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.createFileSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "CreateFileSystemRequest",
          data.request,
          "CreateFileSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "CreateFileSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createMountTarget method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "CreateMountTarget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "CreateMountTarget"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "CreateMountTarget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.createMountTarget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "CreateMountTargetRequest",
          data.request,
          "CreateMountTargetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "CreateMountTargetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSnapshot method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "CreateSnapshot"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "CreateSnapshot"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "CreateSnapshot");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.createSnapshot(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "CreateSnapshotRequest",
          data.request,
          "CreateSnapshotResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "CreateSnapshotRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteExport method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "DeleteExport"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "DeleteExport"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "DeleteExport");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.deleteExport(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "DeleteExportRequest",
          data.request,
          "DeleteExportResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "DeleteExportRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteFileSystem method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "DeleteFileSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "DeleteFileSystem"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "DeleteFileSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.deleteFileSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "DeleteFileSystemRequest",
          data.request,
          "DeleteFileSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "DeleteFileSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteMountTarget method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "DeleteMountTarget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "DeleteMountTarget"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "DeleteMountTarget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.deleteMountTarget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "DeleteMountTargetRequest",
          data.request,
          "DeleteMountTargetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "DeleteMountTargetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSnapshot method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "DeleteSnapshot"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "DeleteSnapshot"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "DeleteSnapshot");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.deleteSnapshot(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "DeleteSnapshotRequest",
          data.request,
          "DeleteSnapshotResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "DeleteSnapshotRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExport method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "GetExport"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("filestorage", "FileStorage", "GetExport");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "GetExport");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.getExport(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "GetExportRequest",
          data.request,
          "GetExportResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "GetExportRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getExportSet method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "GetExportSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "GetExportSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "GetExportSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.getExportSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "GetExportSetRequest",
          data.request,
          "GetExportSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "GetExportSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFileSystem method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "GetFileSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "GetFileSystem"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "GetFileSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.getFileSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "GetFileSystemRequest",
          data.request,
          "GetFileSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "GetFileSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getMountTarget method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "GetMountTarget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "GetMountTarget"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "GetMountTarget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.getMountTarget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "GetMountTargetRequest",
          data.request,
          "GetMountTargetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "GetMountTargetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSnapshot method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "GetSnapshot"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "GetSnapshot"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "GetSnapshot");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.getSnapshot(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "GetSnapshotRequest",
          data.request,
          "GetSnapshotResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "GetSnapshotRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listExportSets method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ListExportSets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ListExportSets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "ListExportSets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.listExportSets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ListExportSetsRequest",
          data.request,
          "ListExportSetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ListExportSetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listExports method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ListExports"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ListExports"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "ListExports");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.listExports(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ListExportsRequest",
          data.request,
          "ListExportsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ListExportsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFileSystems method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ListFileSystems"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ListFileSystems"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "ListFileSystems");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.listFileSystems(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ListFileSystemsRequest",
          data.request,
          "ListFileSystemsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ListFileSystemsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMountTargets method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ListMountTargets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ListMountTargets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "ListMountTargets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.listMountTargets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ListMountTargetsRequest",
          data.request,
          "ListMountTargetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ListMountTargetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSnapshots method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "ListSnapshots"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "ListSnapshots"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "ListSnapshots");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.listSnapshots(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "ListSnapshotsRequest",
          data.request,
          "ListSnapshotsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "ListSnapshotsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateExport method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "UpdateExport"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "UpdateExport"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "UpdateExport");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.updateExport(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "UpdateExportRequest",
          data.request,
          "UpdateExportResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "UpdateExportRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateExportSet method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "UpdateExportSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "UpdateExportSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "UpdateExportSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.updateExportSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "UpdateExportSetRequest",
          data.request,
          "UpdateExportSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "UpdateExportSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateFileSystem method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "UpdateFileSystem"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "UpdateFileSystem"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "UpdateFileSystem");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.updateFileSystem(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "UpdateFileSystemRequest",
          data.request,
          "UpdateFileSystemResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "UpdateFileSystemRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateMountTarget method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "UpdateMountTarget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "UpdateMountTarget"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "UpdateMountTarget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.updateMountTarget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "UpdateMountTargetRequest",
          data.request,
          "UpdateMountTargetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "UpdateMountTargetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSnapshot method", async function() {
    if (!(await tsclient.isApiEnabled("filestorage", "UpdateSnapshot"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "filestorage",
      "FileStorage",
      "UpdateSnapshot"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const filestorageClient = new filestorage.FileStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      filestorageClient.endpoint = config.endpoint;
    } else {
      filestorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("filestorage", "UpdateSnapshot");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await filestorageClient.updateSnapshot(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "filestorage",
          "UpdateSnapshotRequest",
          data.request,
          "UpdateSnapshotResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "filestorage",
            "UpdateSnapshotRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
