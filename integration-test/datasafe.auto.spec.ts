/**
 * Auto generated test cases for "Data Safe API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import datasafe = require("../lib/datasafe/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test DataSafe Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeDataSafePrivateEndpointCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "ChangeDataSafePrivateEndpointCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "ChangeDataSafePrivateEndpointCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "datasafe",
      "ChangeDataSafePrivateEndpointCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.changeDataSafePrivateEndpointCompartment(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "ChangeDataSafePrivateEndpointCompartmentRequest",
          data.request,
          "ChangeDataSafePrivateEndpointCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "ChangeDataSafePrivateEndpointCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDataSafePrivateEndpoint method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "CreateDataSafePrivateEndpoint"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "CreateDataSafePrivateEndpoint"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "CreateDataSafePrivateEndpoint");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.createDataSafePrivateEndpoint(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "CreateDataSafePrivateEndpointRequest",
          data.request,
          "CreateDataSafePrivateEndpointResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "CreateDataSafePrivateEndpointRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDataSafePrivateEndpoint method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "DeleteDataSafePrivateEndpoint"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "DeleteDataSafePrivateEndpoint"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "DeleteDataSafePrivateEndpoint");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.deleteDataSafePrivateEndpoint(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "DeleteDataSafePrivateEndpointRequest",
          data.request,
          "DeleteDataSafePrivateEndpointResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "DeleteDataSafePrivateEndpointRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test enableDataSafeConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "EnableDataSafeConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "EnableDataSafeConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "EnableDataSafeConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.enableDataSafeConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "EnableDataSafeConfigurationRequest",
          data.request,
          "EnableDataSafeConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "EnableDataSafeConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDataSafeConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "GetDataSafeConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "GetDataSafeConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "GetDataSafeConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.getDataSafeConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "GetDataSafeConfigurationRequest",
          data.request,
          "GetDataSafeConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "GetDataSafeConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDataSafePrivateEndpoint method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "GetDataSafePrivateEndpoint"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "GetDataSafePrivateEndpoint"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "GetDataSafePrivateEndpoint");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.getDataSafePrivateEndpoint(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "GetDataSafePrivateEndpointRequest",
          data.request,
          "GetDataSafePrivateEndpointResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "GetDataSafePrivateEndpointRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datasafe", "DataSafe", "GetWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDataSafePrivateEndpoints method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "ListDataSafePrivateEndpoints"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "ListDataSafePrivateEndpoints"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "ListDataSafePrivateEndpoints");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.listDataSafePrivateEndpoints(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "ListDataSafePrivateEndpointsRequest",
          data.request,
          "ListDataSafePrivateEndpointsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "ListDataSafePrivateEndpointsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datasafe", "DataSafe", "ListWorkRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDataSafePrivateEndpoint method", async function() {
    if (!(await tsclient.isApiEnabled("datasafe", "UpdateDataSafePrivateEndpoint"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datasafe",
      "DataSafe",
      "UpdateDataSafePrivateEndpoint"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datasafeClient = new datasafe.DataSafeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datasafeClient.endpoint = config.endpoint;
    } else {
      datasafeClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datasafe", "UpdateDataSafePrivateEndpoint");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datasafeClient.updateDataSafePrivateEndpoint(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datasafe",
          "UpdateDataSafePrivateEndpointRequest",
          data.request,
          "UpdateDataSafePrivateEndpointResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datasafe",
            "UpdateDataSafePrivateEndpointRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
