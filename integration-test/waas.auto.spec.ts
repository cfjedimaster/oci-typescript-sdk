/**
 * Auto generated test cases for "Web Application Acceleration and Security Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import waas = require("../lib/waas/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Waas Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test acceptRecommendations method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "AcceptRecommendations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "AcceptRecommendations");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "AcceptRecommendations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.acceptRecommendations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "AcceptRecommendationsRequest",
          data.request,
          "AcceptRecommendationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "AcceptRecommendationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test cancelWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CancelWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "CancelWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CancelWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.cancelWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CancelWorkRequestRequest",
          data.request,
          "CancelWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CancelWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeAddressListCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ChangeAddressListCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ChangeAddressListCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ChangeAddressListCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.changeAddressListCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ChangeAddressListCompartmentRequest",
          data.request,
          "ChangeAddressListCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ChangeAddressListCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeCertificateCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ChangeCertificateCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ChangeCertificateCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ChangeCertificateCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.changeCertificateCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ChangeCertificateCompartmentRequest",
          data.request,
          "ChangeCertificateCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ChangeCertificateCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeCustomProtectionRuleCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ChangeCustomProtectionRuleCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ChangeCustomProtectionRuleCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "waas",
      "ChangeCustomProtectionRuleCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.changeCustomProtectionRuleCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ChangeCustomProtectionRuleCompartmentRequest",
          data.request,
          "ChangeCustomProtectionRuleCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ChangeCustomProtectionRuleCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeWaasPolicyCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ChangeWaasPolicyCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ChangeWaasPolicyCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ChangeWaasPolicyCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.changeWaasPolicyCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ChangeWaasPolicyCompartmentRequest",
          data.request,
          "ChangeWaasPolicyCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ChangeWaasPolicyCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAddressList method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CreateAddressList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "CreateAddressList");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CreateAddressList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.createAddressList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CreateAddressListRequest",
          data.request,
          "CreateAddressListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CreateAddressListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CreateCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "CreateCertificate");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CreateCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.createCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CreateCertificateRequest",
          data.request,
          "CreateCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CreateCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCustomProtectionRule method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CreateCustomProtectionRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "CreateCustomProtectionRule"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CreateCustomProtectionRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.createCustomProtectionRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CreateCustomProtectionRuleRequest",
          data.request,
          "CreateCustomProtectionRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CreateCustomProtectionRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createWaasPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "CreateWaasPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "CreateWaasPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "CreateWaasPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.createWaasPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "CreateWaasPolicyRequest",
          data.request,
          "CreateWaasPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "CreateWaasPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAddressList method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "DeleteAddressList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "DeleteAddressList");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "DeleteAddressList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.deleteAddressList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "DeleteAddressListRequest",
          data.request,
          "DeleteAddressListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "DeleteAddressListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "DeleteCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "DeleteCertificate");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "DeleteCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.deleteCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "DeleteCertificateRequest",
          data.request,
          "DeleteCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "DeleteCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCustomProtectionRule method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "DeleteCustomProtectionRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "DeleteCustomProtectionRule"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "DeleteCustomProtectionRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.deleteCustomProtectionRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "DeleteCustomProtectionRuleRequest",
          data.request,
          "DeleteCustomProtectionRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "DeleteCustomProtectionRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteWaasPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "DeleteWaasPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "DeleteWaasPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "DeleteWaasPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.deleteWaasPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "DeleteWaasPolicyRequest",
          data.request,
          "DeleteWaasPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "DeleteWaasPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAddressList method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetAddressList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetAddressList");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetAddressList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getAddressList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetAddressListRequest",
          data.request,
          "GetAddressListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetAddressListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetCertificate");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetCertificateRequest",
          data.request,
          "GetCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCustomProtectionRule method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetCustomProtectionRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetCustomProtectionRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetCustomProtectionRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getCustomProtectionRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetCustomProtectionRuleRequest",
          data.request,
          "GetCustomProtectionRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetCustomProtectionRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDeviceFingerprintChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetDeviceFingerprintChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "GetDeviceFingerprintChallenge"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetDeviceFingerprintChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getDeviceFingerprintChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetDeviceFingerprintChallengeRequest",
          data.request,
          "GetDeviceFingerprintChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetDeviceFingerprintChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getHumanInteractionChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetHumanInteractionChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "GetHumanInteractionChallenge"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetHumanInteractionChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getHumanInteractionChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetHumanInteractionChallengeRequest",
          data.request,
          "GetHumanInteractionChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetHumanInteractionChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJsChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetJsChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetJsChallenge");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetJsChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getJsChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetJsChallengeRequest",
          data.request,
          "GetJsChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetJsChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPolicyConfig method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetPolicyConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetPolicyConfig");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetPolicyConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getPolicyConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetPolicyConfigRequest",
          data.request,
          "GetPolicyConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetPolicyConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getProtectionRule method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetProtectionRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetProtectionRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetProtectionRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getProtectionRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetProtectionRuleRequest",
          data.request,
          "GetProtectionRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetProtectionRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getProtectionSettings method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetProtectionSettings"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetProtectionSettings");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetProtectionSettings");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getProtectionSettings(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetProtectionSettingsRequest",
          data.request,
          "GetProtectionSettingsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetProtectionSettingsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWaasPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetWaasPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetWaasPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetWaasPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getWaasPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetWaasPolicyRequest",
          data.request,
          "GetWaasPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetWaasPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWafAddressRateLimiting method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetWafAddressRateLimiting"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "GetWafAddressRateLimiting"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetWafAddressRateLimiting");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getWafAddressRateLimiting(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetWafAddressRateLimitingRequest",
          data.request,
          "GetWafAddressRateLimitingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetWafAddressRateLimitingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWafConfig method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetWafConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetWafConfig");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetWafConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getWafConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetWafConfigRequest",
          data.request,
          "GetWafConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetWafConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "GetWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAccessRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListAccessRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListAccessRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListAccessRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listAccessRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListAccessRulesRequest",
          data.request,
          "ListAccessRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListAccessRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAddressLists method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListAddressLists"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListAddressLists");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListAddressLists");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listAddressLists(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListAddressListsRequest",
          data.request,
          "ListAddressListsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListAddressListsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCachingRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListCachingRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListCachingRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListCachingRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listCachingRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListCachingRulesRequest",
          data.request,
          "ListCachingRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListCachingRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCaptchas method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListCaptchas"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListCaptchas");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListCaptchas");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listCaptchas(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListCaptchasRequest",
          data.request,
          "ListCaptchasResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListCaptchasRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCertificates method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListCertificates"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListCertificates");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListCertificates");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listCertificates(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListCertificatesRequest",
          data.request,
          "ListCertificatesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListCertificatesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCustomProtectionRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListCustomProtectionRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ListCustomProtectionRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListCustomProtectionRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listCustomProtectionRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListCustomProtectionRulesRequest",
          data.request,
          "ListCustomProtectionRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListCustomProtectionRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listEdgeSubnets method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListEdgeSubnets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListEdgeSubnets");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListEdgeSubnets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listEdgeSubnets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListEdgeSubnetsRequest",
          data.request,
          "ListEdgeSubnetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListEdgeSubnetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listGoodBots method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListGoodBots"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListGoodBots");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListGoodBots");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listGoodBots(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListGoodBotsRequest",
          data.request,
          "ListGoodBotsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListGoodBotsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listProtectionRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListProtectionRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListProtectionRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListProtectionRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listProtectionRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListProtectionRulesRequest",
          data.request,
          "ListProtectionRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListProtectionRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRecommendations method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListRecommendations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListRecommendations");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListRecommendations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listRecommendations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListRecommendationsRequest",
          data.request,
          "ListRecommendationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListRecommendationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listThreatFeeds method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListThreatFeeds"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListThreatFeeds");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListThreatFeeds");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listThreatFeeds(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListThreatFeedsRequest",
          data.request,
          "ListThreatFeedsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListThreatFeedsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWaasPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWaasPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWaasPolicies");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWaasPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWaasPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWaasPoliciesRequest",
          data.request,
          "ListWaasPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWaasPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWaasPolicyCustomProtectionRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWaasPolicyCustomProtectionRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "ListWaasPolicyCustomProtectionRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "waas",
      "ListWaasPolicyCustomProtectionRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWaasPolicyCustomProtectionRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWaasPolicyCustomProtectionRulesRequest",
          data.request,
          "ListWaasPolicyCustomProtectionRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWaasPolicyCustomProtectionRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWafBlockedRequests method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWafBlockedRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWafBlockedRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWafBlockedRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWafBlockedRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWafBlockedRequestsRequest",
          data.request,
          "ListWafBlockedRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWafBlockedRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWafLogs method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWafLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWafLogs");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWafLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWafLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWafLogsRequest",
          data.request,
          "ListWafLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWafLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWafRequests method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWafRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWafRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWafRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWafRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWafRequestsRequest",
          data.request,
          "ListWafRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWafRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWafTraffic method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWafTraffic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWafTraffic");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWafTraffic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWafTraffic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWafTrafficRequest",
          data.request,
          "ListWafTrafficResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWafTrafficRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWhitelists method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWhitelists"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWhitelists");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWhitelists");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWhitelists(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWhitelistsRequest",
          data.request,
          "ListWhitelistsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWhitelistsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "ListWorkRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test purgeCache method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "PurgeCache"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "PurgeCache");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "PurgeCache");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.purgeCache(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "PurgeCacheRequest",
          data.request,
          "PurgeCacheResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "PurgeCacheRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAccessRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateAccessRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateAccessRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateAccessRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateAccessRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateAccessRulesRequest",
          data.request,
          "UpdateAccessRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateAccessRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAddressList method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateAddressList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateAddressList");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateAddressList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateAddressList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateAddressListRequest",
          data.request,
          "UpdateAddressListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateAddressListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCachingRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateCachingRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateCachingRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateCachingRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateCachingRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateCachingRulesRequest",
          data.request,
          "UpdateCachingRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateCachingRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCaptchas method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateCaptchas"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateCaptchas");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateCaptchas");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateCaptchas(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateCaptchasRequest",
          data.request,
          "UpdateCaptchasResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateCaptchasRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateCertificate");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateCertificateRequest",
          data.request,
          "UpdateCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCustomProtectionRule method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateCustomProtectionRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "UpdateCustomProtectionRule"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateCustomProtectionRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateCustomProtectionRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateCustomProtectionRuleRequest",
          data.request,
          "UpdateCustomProtectionRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateCustomProtectionRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDeviceFingerprintChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateDeviceFingerprintChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "UpdateDeviceFingerprintChallenge"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateDeviceFingerprintChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateDeviceFingerprintChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateDeviceFingerprintChallengeRequest",
          data.request,
          "UpdateDeviceFingerprintChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateDeviceFingerprintChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateGoodBots method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateGoodBots"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateGoodBots");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateGoodBots");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateGoodBots(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateGoodBotsRequest",
          data.request,
          "UpdateGoodBotsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateGoodBotsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateHumanInteractionChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateHumanInteractionChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "UpdateHumanInteractionChallenge"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateHumanInteractionChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateHumanInteractionChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateHumanInteractionChallengeRequest",
          data.request,
          "UpdateHumanInteractionChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateHumanInteractionChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateJsChallenge method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateJsChallenge"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateJsChallenge");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateJsChallenge");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateJsChallenge(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateJsChallengeRequest",
          data.request,
          "UpdateJsChallengeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateJsChallengeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePolicyConfig method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdatePolicyConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdatePolicyConfig");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdatePolicyConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updatePolicyConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdatePolicyConfigRequest",
          data.request,
          "UpdatePolicyConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdatePolicyConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateProtectionRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateProtectionRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateProtectionRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateProtectionRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateProtectionRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateProtectionRulesRequest",
          data.request,
          "UpdateProtectionRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateProtectionRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateProtectionSettings method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateProtectionSettings"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateProtectionSettings");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateProtectionSettings");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateProtectionSettings(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateProtectionSettingsRequest",
          data.request,
          "UpdateProtectionSettingsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateProtectionSettingsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateThreatFeeds method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateThreatFeeds"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateThreatFeeds");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateThreatFeeds");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateThreatFeeds(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateThreatFeedsRequest",
          data.request,
          "UpdateThreatFeedsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateThreatFeedsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateWaasPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateWaasPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateWaasPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateWaasPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateWaasPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateWaasPolicyRequest",
          data.request,
          "UpdateWaasPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateWaasPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateWaasPolicyCustomProtectionRules method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateWaasPolicyCustomProtectionRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "UpdateWaasPolicyCustomProtectionRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "waas",
      "UpdateWaasPolicyCustomProtectionRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateWaasPolicyCustomProtectionRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateWaasPolicyCustomProtectionRulesRequest",
          data.request,
          "UpdateWaasPolicyCustomProtectionRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateWaasPolicyCustomProtectionRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateWafAddressRateLimiting method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateWafAddressRateLimiting"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "waas",
      "Waas",
      "UpdateWafAddressRateLimiting"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateWafAddressRateLimiting");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateWafAddressRateLimiting(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateWafAddressRateLimitingRequest",
          data.request,
          "UpdateWafAddressRateLimitingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateWafAddressRateLimitingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateWafConfig method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateWafConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateWafConfig");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateWafConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateWafConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateWafConfigRequest",
          data.request,
          "UpdateWafConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateWafConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateWhitelists method", async function() {
    if (!(await tsclient.isApiEnabled("waas", "UpdateWhitelists"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("waas", "Waas", "UpdateWhitelists");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const waasClient = new waas.WaasClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      waasClient.endpoint = config.endpoint;
    } else {
      waasClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("waas", "UpdateWhitelists");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await waasClient.updateWhitelists(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "waas",
          "UpdateWhitelistsRequest",
          data.request,
          "UpdateWhitelistsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "waas",
            "UpdateWhitelistsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
