/**
 * Auto generated test cases for "Core Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import core = require("../lib/core/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test VirtualNetwork Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test acceptLocalPeeringToken method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AcceptLocalPeeringToken"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "AcceptLocalPeeringToken"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AcceptLocalPeeringToken");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.acceptLocalPeeringToken(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AcceptLocalPeeringTokenRequest",
          data.request,
          "AcceptLocalPeeringTokenResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AcceptLocalPeeringTokenRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test addNetworkSecurityGroupSecurityRules method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AddNetworkSecurityGroupSecurityRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "AddNetworkSecurityGroupSecurityRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "AddNetworkSecurityGroupSecurityRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.addNetworkSecurityGroupSecurityRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AddNetworkSecurityGroupSecurityRulesRequest",
          data.request,
          "AddNetworkSecurityGroupSecurityRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AddNetworkSecurityGroupSecurityRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachServiceId method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AttachServiceId"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "AttachServiceId"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AttachServiceId");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.attachServiceId(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AttachServiceIdRequest",
          data.request,
          "AttachServiceIdResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AttachServiceIdRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test bulkAddVirtualCircuitPublicPrefixes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "BulkAddVirtualCircuitPublicPrefixes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "BulkAddVirtualCircuitPublicPrefixes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "BulkAddVirtualCircuitPublicPrefixes"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.bulkAddVirtualCircuitPublicPrefixes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "BulkAddVirtualCircuitPublicPrefixesRequest",
          data.request,
          "BulkAddVirtualCircuitPublicPrefixesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "BulkAddVirtualCircuitPublicPrefixesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test bulkDeleteVirtualCircuitPublicPrefixes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "BulkDeleteVirtualCircuitPublicPrefixes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "BulkDeleteVirtualCircuitPublicPrefixes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "BulkDeleteVirtualCircuitPublicPrefixes"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.bulkDeleteVirtualCircuitPublicPrefixes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "BulkDeleteVirtualCircuitPublicPrefixesRequest",
          data.request,
          "BulkDeleteVirtualCircuitPublicPrefixesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "BulkDeleteVirtualCircuitPublicPrefixesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeCpeCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeCpeCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeCpeCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeCpeCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeCpeCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeCpeCompartmentRequest",
          data.request,
          "ChangeCpeCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeCpeCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeCrossConnectCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeCrossConnectCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeCrossConnectCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeCrossConnectCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeCrossConnectCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeCrossConnectCompartmentRequest",
          data.request,
          "ChangeCrossConnectCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeCrossConnectCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeCrossConnectGroupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeCrossConnectGroupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeCrossConnectGroupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeCrossConnectGroupCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeCrossConnectGroupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeCrossConnectGroupCompartmentRequest",
          data.request,
          "ChangeCrossConnectGroupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeCrossConnectGroupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeDhcpOptionsCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeDhcpOptionsCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeDhcpOptionsCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeDhcpOptionsCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeDhcpOptionsCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeDhcpOptionsCompartmentRequest",
          data.request,
          "ChangeDhcpOptionsCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeDhcpOptionsCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeDrgCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeDrgCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeDrgCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeDrgCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeDrgCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeDrgCompartmentRequest",
          data.request,
          "ChangeDrgCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeDrgCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeIPSecConnectionCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeIPSecConnectionCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeIPSecConnectionCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeIPSecConnectionCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeIPSecConnectionCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeIPSecConnectionCompartmentRequest",
          data.request,
          "ChangeIPSecConnectionCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeIPSecConnectionCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeInternetGatewayCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeInternetGatewayCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeInternetGatewayCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeInternetGatewayCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeInternetGatewayCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeInternetGatewayCompartmentRequest",
          data.request,
          "ChangeInternetGatewayCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeInternetGatewayCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeLocalPeeringGatewayCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeLocalPeeringGatewayCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeLocalPeeringGatewayCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeLocalPeeringGatewayCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeLocalPeeringGatewayCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeLocalPeeringGatewayCompartmentRequest",
          data.request,
          "ChangeLocalPeeringGatewayCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeLocalPeeringGatewayCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeNatGatewayCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeNatGatewayCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeNatGatewayCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeNatGatewayCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeNatGatewayCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeNatGatewayCompartmentRequest",
          data.request,
          "ChangeNatGatewayCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeNatGatewayCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeNetworkSecurityGroupCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeNetworkSecurityGroupCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeNetworkSecurityGroupCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeNetworkSecurityGroupCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeNetworkSecurityGroupCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeNetworkSecurityGroupCompartmentRequest",
          data.request,
          "ChangeNetworkSecurityGroupCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeNetworkSecurityGroupCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changePublicIpCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangePublicIpCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangePublicIpCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangePublicIpCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changePublicIpCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangePublicIpCompartmentRequest",
          data.request,
          "ChangePublicIpCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangePublicIpCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeRemotePeeringConnectionCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeRemotePeeringConnectionCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeRemotePeeringConnectionCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeRemotePeeringConnectionCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeRemotePeeringConnectionCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeRemotePeeringConnectionCompartmentRequest",
          data.request,
          "ChangeRemotePeeringConnectionCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeRemotePeeringConnectionCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeRouteTableCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeRouteTableCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeRouteTableCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeRouteTableCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeRouteTableCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeRouteTableCompartmentRequest",
          data.request,
          "ChangeRouteTableCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeRouteTableCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeSecurityListCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeSecurityListCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeSecurityListCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeSecurityListCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeSecurityListCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeSecurityListCompartmentRequest",
          data.request,
          "ChangeSecurityListCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeSecurityListCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeServiceGatewayCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeServiceGatewayCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeServiceGatewayCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeServiceGatewayCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeServiceGatewayCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeServiceGatewayCompartmentRequest",
          data.request,
          "ChangeServiceGatewayCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeServiceGatewayCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeSubnetCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeSubnetCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeSubnetCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeSubnetCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeSubnetCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeSubnetCompartmentRequest",
          data.request,
          "ChangeSubnetCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeSubnetCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVcnCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVcnCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeVcnCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeVcnCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVcnCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVcnCompartmentRequest",
          data.request,
          "ChangeVcnCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVcnCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeVirtualCircuitCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeVirtualCircuitCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ChangeVirtualCircuitCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeVirtualCircuitCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeVirtualCircuitCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeVirtualCircuitCompartmentRequest",
          data.request,
          "ChangeVirtualCircuitCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeVirtualCircuitCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test connectLocalPeeringConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ConnectLocalPeeringConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ConnectLocalPeeringConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ConnectLocalPeeringConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.connectLocalPeeringConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ConnectLocalPeeringConnectionsRequest",
          data.request,
          "ConnectLocalPeeringConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ConnectLocalPeeringConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test connectLocalPeeringGateways method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ConnectLocalPeeringGateways"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ConnectLocalPeeringGateways"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ConnectLocalPeeringGateways");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.connectLocalPeeringGateways(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ConnectLocalPeeringGatewaysRequest",
          data.request,
          "ConnectLocalPeeringGatewaysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ConnectLocalPeeringGatewaysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test connectRemotePeeringConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ConnectRemotePeeringConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ConnectRemotePeeringConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ConnectRemotePeeringConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.connectRemotePeeringConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ConnectRemotePeeringConnectionsRequest",
          data.request,
          "ConnectRemotePeeringConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ConnectRemotePeeringConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCpe method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateCpe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreateCpe");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateCpe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createCpe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateCpeRequest",
          data.request,
          "CreateCpeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateCpeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCrossConnect method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateCrossConnect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateCrossConnect"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateCrossConnect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createCrossConnect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateCrossConnectRequest",
          data.request,
          "CreateCrossConnectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateCrossConnectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCrossConnectGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateCrossConnectGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateCrossConnectGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateCrossConnectGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createCrossConnectGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateCrossConnectGroupRequest",
          data.request,
          "CreateCrossConnectGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateCrossConnectGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDhcpOptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateDhcpOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateDhcpOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateDhcpOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createDhcpOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateDhcpOptionsRequest",
          data.request,
          "CreateDhcpOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateDhcpOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDrg method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateDrg"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreateDrg");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateDrg");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createDrg(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateDrgRequest",
          data.request,
          "CreateDrgResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateDrgRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDrgAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateDrgAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateDrgAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateDrgAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createDrgAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateDrgAttachmentRequest",
          data.request,
          "CreateDrgAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateDrgAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createFlowLogConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateFlowLogConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateFlowLogConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateFlowLogConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createFlowLogConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateFlowLogConfigRequest",
          data.request,
          "CreateFlowLogConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateFlowLogConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createFlowLogConfigAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateFlowLogConfigAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateFlowLogConfigAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateFlowLogConfigAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createFlowLogConfigAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateFlowLogConfigAttachmentRequest",
          data.request,
          "CreateFlowLogConfigAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateFlowLogConfigAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createIPSecConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateIPSecConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateIPSecConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateIPSecConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createIPSecConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateIPSecConnectionRequest",
          data.request,
          "CreateIPSecConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateIPSecConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createInternetGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateInternetGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateInternetGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateInternetGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createInternetGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateInternetGatewayRequest",
          data.request,
          "CreateInternetGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateInternetGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createIpv6 method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateIpv6"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreateIpv6");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateIpv6");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createIpv6(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateIpv6Request",
          data.request,
          "CreateIpv6Response",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateIpv6Request",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createLocalPeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateLocalPeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateLocalPeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateLocalPeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createLocalPeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateLocalPeeringConnectionRequest",
          data.request,
          "CreateLocalPeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateLocalPeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createLocalPeeringGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateLocalPeeringGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateLocalPeeringGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateLocalPeeringGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createLocalPeeringGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateLocalPeeringGatewayRequest",
          data.request,
          "CreateLocalPeeringGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateLocalPeeringGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createNatGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateNatGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateNatGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateNatGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createNatGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateNatGatewayRequest",
          data.request,
          "CreateNatGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateNatGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createNetworkSecurityGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateNetworkSecurityGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateNetworkSecurityGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateNetworkSecurityGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createNetworkSecurityGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateNetworkSecurityGroupRequest",
          data.request,
          "CreateNetworkSecurityGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateNetworkSecurityGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPrivateIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreatePrivateIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreatePrivateIp"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreatePrivateIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createPrivateIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreatePrivateIpRequest",
          data.request,
          "CreatePrivateIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreatePrivateIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPublicIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreatePublicIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreatePublicIp");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreatePublicIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createPublicIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreatePublicIpRequest",
          data.request,
          "CreatePublicIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreatePublicIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRemotePeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateRemotePeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateRemotePeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateRemotePeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createRemotePeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateRemotePeeringConnectionRequest",
          data.request,
          "CreateRemotePeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateRemotePeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRouteTable method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateRouteTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateRouteTable"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateRouteTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createRouteTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateRouteTableRequest",
          data.request,
          "CreateRouteTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateRouteTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSecurityList method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateSecurityList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateSecurityList"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateSecurityList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createSecurityList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateSecurityListRequest",
          data.request,
          "CreateSecurityListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateSecurityListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createServiceGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateServiceGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateServiceGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateServiceGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createServiceGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateServiceGatewayRequest",
          data.request,
          "CreateServiceGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateServiceGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSubnet method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateSubnet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreateSubnet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateSubnet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createSubnet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateSubnetRequest",
          data.request,
          "CreateSubnetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateSubnetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVcn method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVcn"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "CreateVcn");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVcn");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVcn(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVcnRequest",
          data.request,
          "CreateVcnResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVcnRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createVirtualCircuit method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateVirtualCircuit"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "CreateVirtualCircuit"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateVirtualCircuit");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createVirtualCircuit(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateVirtualCircuitRequest",
          data.request,
          "CreateVirtualCircuitResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateVirtualCircuitRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCpe method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteCpe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeleteCpe");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteCpe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteCpe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteCpeRequest",
          data.request,
          "DeleteCpeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteCpeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCrossConnect method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteCrossConnect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteCrossConnect"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteCrossConnect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteCrossConnect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteCrossConnectRequest",
          data.request,
          "DeleteCrossConnectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteCrossConnectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCrossConnectGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteCrossConnectGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteCrossConnectGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteCrossConnectGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteCrossConnectGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteCrossConnectGroupRequest",
          data.request,
          "DeleteCrossConnectGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteCrossConnectGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDhcpOptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteDhcpOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteDhcpOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteDhcpOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteDhcpOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteDhcpOptionsRequest",
          data.request,
          "DeleteDhcpOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteDhcpOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDrg method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteDrg"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeleteDrg");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteDrg");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteDrg(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteDrgRequest",
          data.request,
          "DeleteDrgResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteDrgRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDrgAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteDrgAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteDrgAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteDrgAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteDrgAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteDrgAttachmentRequest",
          data.request,
          "DeleteDrgAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteDrgAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteFlowLogConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteFlowLogConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteFlowLogConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteFlowLogConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteFlowLogConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteFlowLogConfigRequest",
          data.request,
          "DeleteFlowLogConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteFlowLogConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteFlowLogConfigAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteFlowLogConfigAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteFlowLogConfigAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteFlowLogConfigAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteFlowLogConfigAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteFlowLogConfigAttachmentRequest",
          data.request,
          "DeleteFlowLogConfigAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteFlowLogConfigAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteIPSecConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteIPSecConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteIPSecConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteIPSecConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteIPSecConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteIPSecConnectionRequest",
          data.request,
          "DeleteIPSecConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteIPSecConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteInternetGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteInternetGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteInternetGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteInternetGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteInternetGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteInternetGatewayRequest",
          data.request,
          "DeleteInternetGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteInternetGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteIpv6 method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteIpv6"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeleteIpv6");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteIpv6");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteIpv6(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteIpv6Request",
          data.request,
          "DeleteIpv6Response",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteIpv6Request",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteLocalPeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteLocalPeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteLocalPeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteLocalPeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteLocalPeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteLocalPeeringConnectionRequest",
          data.request,
          "DeleteLocalPeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteLocalPeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteLocalPeeringGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteLocalPeeringGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteLocalPeeringGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteLocalPeeringGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteLocalPeeringGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteLocalPeeringGatewayRequest",
          data.request,
          "DeleteLocalPeeringGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteLocalPeeringGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteNatGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteNatGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteNatGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteNatGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteNatGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteNatGatewayRequest",
          data.request,
          "DeleteNatGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteNatGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteNetworkSecurityGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteNetworkSecurityGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteNetworkSecurityGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteNetworkSecurityGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteNetworkSecurityGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteNetworkSecurityGroupRequest",
          data.request,
          "DeleteNetworkSecurityGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteNetworkSecurityGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePrivateIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeletePrivateIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeletePrivateIp"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeletePrivateIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deletePrivateIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeletePrivateIpRequest",
          data.request,
          "DeletePrivateIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeletePrivateIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePublicIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeletePublicIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeletePublicIp");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeletePublicIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deletePublicIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeletePublicIpRequest",
          data.request,
          "DeletePublicIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeletePublicIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRemotePeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteRemotePeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteRemotePeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteRemotePeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteRemotePeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteRemotePeeringConnectionRequest",
          data.request,
          "DeleteRemotePeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteRemotePeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRouteTable method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteRouteTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteRouteTable"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteRouteTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteRouteTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteRouteTableRequest",
          data.request,
          "DeleteRouteTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteRouteTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSecurityList method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteSecurityList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteSecurityList"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteSecurityList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteSecurityList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteSecurityListRequest",
          data.request,
          "DeleteSecurityListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteSecurityListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteServiceGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteServiceGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteServiceGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteServiceGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteServiceGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteServiceGatewayRequest",
          data.request,
          "DeleteServiceGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteServiceGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSubnet method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteSubnet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeleteSubnet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteSubnet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteSubnet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteSubnetRequest",
          data.request,
          "DeleteSubnetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteSubnetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVcn method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVcn"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "DeleteVcn");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVcn");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVcn(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVcnRequest",
          data.request,
          "DeleteVcnResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVcnRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteVirtualCircuit method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteVirtualCircuit"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DeleteVirtualCircuit"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteVirtualCircuit");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteVirtualCircuit(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteVirtualCircuitRequest",
          data.request,
          "DeleteVirtualCircuitResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteVirtualCircuitRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachServiceId method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DetachServiceId"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "DetachServiceId"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DetachServiceId");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.detachServiceId(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DetachServiceIdRequest",
          data.request,
          "DetachServiceIdResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DetachServiceIdRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateLocalPeeringToken method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GenerateLocalPeeringToken"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GenerateLocalPeeringToken"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GenerateLocalPeeringToken");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.generateLocalPeeringToken(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GenerateLocalPeeringTokenRequest",
          data.request,
          "GenerateLocalPeeringTokenResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GenerateLocalPeeringTokenRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCpe method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCpe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetCpe");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCpe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCpe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCpeRequest",
          data.request,
          "GetCpeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCpeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCpeDeviceConfigContent method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCpeDeviceConfigContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCpeDeviceConfigContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCpeDeviceConfigContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCpeDeviceConfigContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCpeDeviceConfigContentRequest",
          data.request,
          "GetCpeDeviceConfigContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCpeDeviceConfigContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCpeDeviceShape method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCpeDeviceShape"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCpeDeviceShape"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCpeDeviceShape");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCpeDeviceShape(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCpeDeviceShapeRequest",
          data.request,
          "GetCpeDeviceShapeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCpeDeviceShapeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCrossConnect method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCrossConnect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCrossConnect"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCrossConnect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCrossConnect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCrossConnectRequest",
          data.request,
          "GetCrossConnectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCrossConnectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCrossConnectGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCrossConnectGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCrossConnectGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCrossConnectGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCrossConnectGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCrossConnectGroupRequest",
          data.request,
          "GetCrossConnectGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCrossConnectGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCrossConnectLetterOfAuthority method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCrossConnectLetterOfAuthority"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCrossConnectLetterOfAuthority"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCrossConnectLetterOfAuthority");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCrossConnectLetterOfAuthority(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCrossConnectLetterOfAuthorityRequest",
          data.request,
          "GetCrossConnectLetterOfAuthorityResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCrossConnectLetterOfAuthorityRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCrossConnectStatus method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetCrossConnectStatus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetCrossConnectStatus"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetCrossConnectStatus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getCrossConnectStatus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetCrossConnectStatusRequest",
          data.request,
          "GetCrossConnectStatusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetCrossConnectStatusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDhcpOptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetDhcpOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetDhcpOptions");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetDhcpOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getDhcpOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetDhcpOptionsRequest",
          data.request,
          "GetDhcpOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetDhcpOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDrg method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetDrg"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetDrg");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetDrg");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getDrg(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetDrgRequest",
          data.request,
          "GetDrgResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetDrgRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDrgAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetDrgAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetDrgAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetDrgAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getDrgAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetDrgAttachmentRequest",
          data.request,
          "GetDrgAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetDrgAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDrgRedundancyStatus method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetDrgRedundancyStatus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetDrgRedundancyStatus"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetDrgRedundancyStatus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getDrgRedundancyStatus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetDrgRedundancyStatusRequest",
          data.request,
          "GetDrgRedundancyStatusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetDrgRedundancyStatusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFastConnectProviderService method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetFastConnectProviderService"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetFastConnectProviderService"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetFastConnectProviderService");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getFastConnectProviderService(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetFastConnectProviderServiceRequest",
          data.request,
          "GetFastConnectProviderServiceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetFastConnectProviderServiceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFastConnectProviderServiceKey method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetFastConnectProviderServiceKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetFastConnectProviderServiceKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetFastConnectProviderServiceKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getFastConnectProviderServiceKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetFastConnectProviderServiceKeyRequest",
          data.request,
          "GetFastConnectProviderServiceKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetFastConnectProviderServiceKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFlowLogConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetFlowLogConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetFlowLogConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetFlowLogConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getFlowLogConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetFlowLogConfigRequest",
          data.request,
          "GetFlowLogConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetFlowLogConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFlowLogConfigAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetFlowLogConfigAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetFlowLogConfigAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetFlowLogConfigAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getFlowLogConfigAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetFlowLogConfigAttachmentRequest",
          data.request,
          "GetFlowLogConfigAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetFlowLogConfigAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIPSecConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIPSecConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIPSecConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIPSecConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIPSecConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIPSecConnectionRequest",
          data.request,
          "GetIPSecConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIPSecConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIPSecConnectionDeviceConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIPSecConnectionDeviceConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIPSecConnectionDeviceConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIPSecConnectionDeviceConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIPSecConnectionDeviceConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIPSecConnectionDeviceConfigRequest",
          data.request,
          "GetIPSecConnectionDeviceConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIPSecConnectionDeviceConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIPSecConnectionDeviceStatus method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIPSecConnectionDeviceStatus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIPSecConnectionDeviceStatus"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIPSecConnectionDeviceStatus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIPSecConnectionDeviceStatus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIPSecConnectionDeviceStatusRequest",
          data.request,
          "GetIPSecConnectionDeviceStatusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIPSecConnectionDeviceStatusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIPSecConnectionTunnel method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIPSecConnectionTunnel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIPSecConnectionTunnel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIPSecConnectionTunnel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIPSecConnectionTunnel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIPSecConnectionTunnelRequest",
          data.request,
          "GetIPSecConnectionTunnelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIPSecConnectionTunnelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIPSecConnectionTunnelSharedSecret method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIPSecConnectionTunnelSharedSecret"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIPSecConnectionTunnelSharedSecret"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "GetIPSecConnectionTunnelSharedSecret"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIPSecConnectionTunnelSharedSecret(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIPSecConnectionTunnelSharedSecretRequest",
          data.request,
          "GetIPSecConnectionTunnelSharedSecretResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIPSecConnectionTunnelSharedSecretRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInternetGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInternetGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetInternetGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetInternetGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInternetGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInternetGatewayRequest",
          data.request,
          "GetInternetGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInternetGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIpsecCpeDeviceConfigContent method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIpsecCpeDeviceConfigContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetIpsecCpeDeviceConfigContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIpsecCpeDeviceConfigContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIpsecCpeDeviceConfigContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIpsecCpeDeviceConfigContentRequest",
          data.request,
          "GetIpsecCpeDeviceConfigContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIpsecCpeDeviceConfigContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIpv6 method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetIpv6"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetIpv6");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetIpv6");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getIpv6(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetIpv6Request",
          data.request,
          "GetIpv6Response",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetIpv6Request",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getLocalPeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetLocalPeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetLocalPeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetLocalPeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getLocalPeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetLocalPeeringConnectionRequest",
          data.request,
          "GetLocalPeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetLocalPeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getLocalPeeringGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetLocalPeeringGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetLocalPeeringGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetLocalPeeringGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getLocalPeeringGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetLocalPeeringGatewayRequest",
          data.request,
          "GetLocalPeeringGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetLocalPeeringGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNatGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetNatGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetNatGateway");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetNatGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getNatGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetNatGatewayRequest",
          data.request,
          "GetNatGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetNatGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNetworkSecurityGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetNetworkSecurityGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetNetworkSecurityGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetNetworkSecurityGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getNetworkSecurityGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetNetworkSecurityGroupRequest",
          data.request,
          "GetNetworkSecurityGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetNetworkSecurityGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPrivateIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetPrivateIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetPrivateIp");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetPrivateIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getPrivateIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetPrivateIpRequest",
          data.request,
          "GetPrivateIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetPrivateIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPublicIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetPublicIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetPublicIp");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetPublicIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getPublicIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetPublicIpRequest",
          data.request,
          "GetPublicIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetPublicIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPublicIpByIpAddress method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetPublicIpByIpAddress"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetPublicIpByIpAddress"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetPublicIpByIpAddress");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getPublicIpByIpAddress(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetPublicIpByIpAddressRequest",
          data.request,
          "GetPublicIpByIpAddressResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetPublicIpByIpAddressRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPublicIpByPrivateIpId method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetPublicIpByPrivateIpId"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetPublicIpByPrivateIpId"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetPublicIpByPrivateIpId");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getPublicIpByPrivateIpId(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetPublicIpByPrivateIpIdRequest",
          data.request,
          "GetPublicIpByPrivateIpIdResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetPublicIpByPrivateIpIdRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRemotePeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetRemotePeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetRemotePeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetRemotePeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getRemotePeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetRemotePeeringConnectionRequest",
          data.request,
          "GetRemotePeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetRemotePeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRouteTable method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetRouteTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetRouteTable");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetRouteTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getRouteTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetRouteTableRequest",
          data.request,
          "GetRouteTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetRouteTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSecurityList method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetSecurityList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetSecurityList"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetSecurityList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getSecurityList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetSecurityListRequest",
          data.request,
          "GetSecurityListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetSecurityListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getService method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetService"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetService");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetService");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getService(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetServiceRequest",
          data.request,
          "GetServiceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetServiceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getServiceGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetServiceGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetServiceGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetServiceGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getServiceGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetServiceGatewayRequest",
          data.request,
          "GetServiceGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetServiceGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSubnet method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetSubnet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetSubnet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetSubnet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getSubnet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetSubnetRequest",
          data.request,
          "GetSubnetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetSubnetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTunnelCpeDeviceConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetTunnelCpeDeviceConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetTunnelCpeDeviceConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetTunnelCpeDeviceConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getTunnelCpeDeviceConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetTunnelCpeDeviceConfigRequest",
          data.request,
          "GetTunnelCpeDeviceConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetTunnelCpeDeviceConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTunnelCpeDeviceConfigContent method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetTunnelCpeDeviceConfigContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetTunnelCpeDeviceConfigContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetTunnelCpeDeviceConfigContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getTunnelCpeDeviceConfigContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetTunnelCpeDeviceConfigContentRequest",
          data.request,
          "GetTunnelCpeDeviceConfigContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetTunnelCpeDeviceConfigContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVcn method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVcn"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetVcn");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVcn");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVcn(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVcnRequest",
          data.request,
          "GetVcnResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVcnRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVirtualCircuit method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVirtualCircuit"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "GetVirtualCircuit"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVirtualCircuit");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVirtualCircuit(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVirtualCircuitRequest",
          data.request,
          "GetVirtualCircuitResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVirtualCircuitRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVnic method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVnic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "GetVnic");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVnic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVnic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVnicRequest",
          data.request,
          "GetVnicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVnicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAllowedPeerRegionsForRemotePeering method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListAllowedPeerRegionsForRemotePeering"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListAllowedPeerRegionsForRemotePeering"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ListAllowedPeerRegionsForRemotePeering"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listAllowedPeerRegionsForRemotePeering(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListAllowedPeerRegionsForRemotePeeringRequest",
          data.request,
          "ListAllowedPeerRegionsForRemotePeeringResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListAllowedPeerRegionsForRemotePeeringRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCpeDeviceShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCpeDeviceShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListCpeDeviceShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCpeDeviceShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCpeDeviceShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCpeDeviceShapesRequest",
          data.request,
          "ListCpeDeviceShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCpeDeviceShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCpes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCpes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListCpes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCpes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCpes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCpesRequest",
          data.request,
          "ListCpesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCpesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCrossConnectGroups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCrossConnectGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListCrossConnectGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCrossConnectGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCrossConnectGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCrossConnectGroupsRequest",
          data.request,
          "ListCrossConnectGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCrossConnectGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCrossConnectLocations method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCrossConnectLocations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListCrossConnectLocations"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCrossConnectLocations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCrossConnectLocations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCrossConnectLocationsRequest",
          data.request,
          "ListCrossConnectLocationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCrossConnectLocationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCrossConnects method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCrossConnects"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListCrossConnects"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCrossConnects");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCrossConnects(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCrossConnectsRequest",
          data.request,
          "ListCrossConnectsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCrossConnectsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCrossconnectPortSpeedShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListCrossconnectPortSpeedShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListCrossconnectPortSpeedShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListCrossconnectPortSpeedShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listCrossconnectPortSpeedShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListCrossconnectPortSpeedShapesRequest",
          data.request,
          "ListCrossconnectPortSpeedShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListCrossconnectPortSpeedShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDhcpOptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDhcpOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListDhcpOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDhcpOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDhcpOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDhcpOptionsRequest",
          data.request,
          "ListDhcpOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDhcpOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDrgAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDrgAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListDrgAttachments"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDrgAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDrgAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDrgAttachmentsRequest",
          data.request,
          "ListDrgAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDrgAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDrgs method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDrgs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListDrgs");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDrgs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDrgs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDrgsRequest",
          data.request,
          "ListDrgsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDrgsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFastConnectProviderServices method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListFastConnectProviderServices"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListFastConnectProviderServices"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListFastConnectProviderServices");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listFastConnectProviderServices(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListFastConnectProviderServicesRequest",
          data.request,
          "ListFastConnectProviderServicesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListFastConnectProviderServicesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFastConnectProviderVirtualCircuitBandwidthShapes method", async function() {
    if (
      !(await tsclient.isApiEnabled("core", "ListFastConnectProviderVirtualCircuitBandwidthShapes"))
    ) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListFastConnectProviderVirtualCircuitBandwidthShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ListFastConnectProviderVirtualCircuitBandwidthShapes"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listFastConnectProviderVirtualCircuitBandwidthShapes(
          data.request
        );
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListFastConnectProviderVirtualCircuitBandwidthShapesRequest",
          data.request,
          "ListFastConnectProviderVirtualCircuitBandwidthShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListFastConnectProviderVirtualCircuitBandwidthShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFlowLogConfigAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListFlowLogConfigAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListFlowLogConfigAttachments"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListFlowLogConfigAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listFlowLogConfigAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListFlowLogConfigAttachmentsRequest",
          data.request,
          "ListFlowLogConfigAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListFlowLogConfigAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFlowLogConfigs method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListFlowLogConfigs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListFlowLogConfigs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListFlowLogConfigs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listFlowLogConfigs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListFlowLogConfigsRequest",
          data.request,
          "ListFlowLogConfigsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListFlowLogConfigsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIPSecConnectionTunnels method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListIPSecConnectionTunnels"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListIPSecConnectionTunnels"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListIPSecConnectionTunnels");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listIPSecConnectionTunnels(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListIPSecConnectionTunnelsRequest",
          data.request,
          "ListIPSecConnectionTunnelsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListIPSecConnectionTunnelsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIPSecConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListIPSecConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListIPSecConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListIPSecConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listIPSecConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListIPSecConnectionsRequest",
          data.request,
          "ListIPSecConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListIPSecConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInternetGateways method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInternetGateways"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListInternetGateways"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInternetGateways");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInternetGateways(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInternetGatewaysRequest",
          data.request,
          "ListInternetGatewaysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInternetGatewaysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIpv6s method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListIpv6s"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListIpv6s");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListIpv6s");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listIpv6s(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListIpv6sRequest",
          data.request,
          "ListIpv6sResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListIpv6sRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listLocalPeeringConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListLocalPeeringConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListLocalPeeringConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListLocalPeeringConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listLocalPeeringConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListLocalPeeringConnectionsRequest",
          data.request,
          "ListLocalPeeringConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListLocalPeeringConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listLocalPeeringGateways method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListLocalPeeringGateways"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListLocalPeeringGateways"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListLocalPeeringGateways");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listLocalPeeringGateways(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListLocalPeeringGatewaysRequest",
          data.request,
          "ListLocalPeeringGatewaysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListLocalPeeringGatewaysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNatGateways method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListNatGateways"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListNatGateways"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListNatGateways");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listNatGateways(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListNatGatewaysRequest",
          data.request,
          "ListNatGatewaysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListNatGatewaysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNetworkSecurityGroupSecurityRules method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListNetworkSecurityGroupSecurityRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListNetworkSecurityGroupSecurityRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ListNetworkSecurityGroupSecurityRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listNetworkSecurityGroupSecurityRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListNetworkSecurityGroupSecurityRulesRequest",
          data.request,
          "ListNetworkSecurityGroupSecurityRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListNetworkSecurityGroupSecurityRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNetworkSecurityGroupVnics method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListNetworkSecurityGroupVnics"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListNetworkSecurityGroupVnics"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListNetworkSecurityGroupVnics");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listNetworkSecurityGroupVnics(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListNetworkSecurityGroupVnicsRequest",
          data.request,
          "ListNetworkSecurityGroupVnicsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListNetworkSecurityGroupVnicsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNetworkSecurityGroups method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListNetworkSecurityGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListNetworkSecurityGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListNetworkSecurityGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listNetworkSecurityGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListNetworkSecurityGroupsRequest",
          data.request,
          "ListNetworkSecurityGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListNetworkSecurityGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPrivateIps method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListPrivateIps"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListPrivateIps");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListPrivateIps");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listPrivateIps(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListPrivateIpsRequest",
          data.request,
          "ListPrivateIpsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListPrivateIpsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPublicIps method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListPublicIps"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListPublicIps");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListPublicIps");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listPublicIps(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListPublicIpsRequest",
          data.request,
          "ListPublicIpsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListPublicIpsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRemotePeeringConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListRemotePeeringConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListRemotePeeringConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListRemotePeeringConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listRemotePeeringConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListRemotePeeringConnectionsRequest",
          data.request,
          "ListRemotePeeringConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListRemotePeeringConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRouteTables method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListRouteTables"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListRouteTables"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListRouteTables");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listRouteTables(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListRouteTablesRequest",
          data.request,
          "ListRouteTablesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListRouteTablesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSecurityLists method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListSecurityLists"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListSecurityLists"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListSecurityLists");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listSecurityLists(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListSecurityListsRequest",
          data.request,
          "ListSecurityListsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListSecurityListsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listServiceGateways method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListServiceGateways"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListServiceGateways"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListServiceGateways");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listServiceGateways(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListServiceGatewaysRequest",
          data.request,
          "ListServiceGatewaysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListServiceGatewaysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listServices method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListServices"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListServices");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListServices");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listServices(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListServicesRequest",
          data.request,
          "ListServicesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListServicesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSubnets method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListSubnets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListSubnets");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListSubnets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listSubnets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListSubnetsRequest",
          data.request,
          "ListSubnetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListSubnetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVcns method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVcns"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "ListVcns");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVcns");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVcns(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVcnsRequest",
          data.request,
          "ListVcnsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVcnsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVirtualCircuitBandwidthShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVirtualCircuitBandwidthShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListVirtualCircuitBandwidthShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVirtualCircuitBandwidthShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVirtualCircuitBandwidthShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVirtualCircuitBandwidthShapesRequest",
          data.request,
          "ListVirtualCircuitBandwidthShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVirtualCircuitBandwidthShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVirtualCircuitPublicPrefixes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVirtualCircuitPublicPrefixes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListVirtualCircuitPublicPrefixes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVirtualCircuitPublicPrefixes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVirtualCircuitPublicPrefixes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVirtualCircuitPublicPrefixesRequest",
          data.request,
          "ListVirtualCircuitPublicPrefixesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVirtualCircuitPublicPrefixesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVirtualCircuits method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVirtualCircuits"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "ListVirtualCircuits"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVirtualCircuits");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVirtualCircuits(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVirtualCircuitsRequest",
          data.request,
          "ListVirtualCircuitsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVirtualCircuitsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removeNetworkSecurityGroupSecurityRules method", async function() {
    if (!(await tsclient.isApiEnabled("core", "RemoveNetworkSecurityGroupSecurityRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "RemoveNetworkSecurityGroupSecurityRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "RemoveNetworkSecurityGroupSecurityRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.removeNetworkSecurityGroupSecurityRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "RemoveNetworkSecurityGroupSecurityRulesRequest",
          data.request,
          "RemoveNetworkSecurityGroupSecurityRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "RemoveNetworkSecurityGroupSecurityRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCpe method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateCpe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateCpe");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateCpe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateCpe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateCpeRequest",
          data.request,
          "UpdateCpeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateCpeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCrossConnect method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateCrossConnect"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateCrossConnect"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateCrossConnect");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateCrossConnect(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateCrossConnectRequest",
          data.request,
          "UpdateCrossConnectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateCrossConnectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCrossConnectGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateCrossConnectGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateCrossConnectGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateCrossConnectGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateCrossConnectGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateCrossConnectGroupRequest",
          data.request,
          "UpdateCrossConnectGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateCrossConnectGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDhcpOptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateDhcpOptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateDhcpOptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateDhcpOptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateDhcpOptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateDhcpOptionsRequest",
          data.request,
          "UpdateDhcpOptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateDhcpOptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDrg method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateDrg"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateDrg");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateDrg");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateDrg(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateDrgRequest",
          data.request,
          "UpdateDrgResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateDrgRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDrgAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateDrgAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateDrgAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateDrgAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateDrgAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateDrgAttachmentRequest",
          data.request,
          "UpdateDrgAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateDrgAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateFlowLogConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateFlowLogConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateFlowLogConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateFlowLogConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateFlowLogConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateFlowLogConfigRequest",
          data.request,
          "UpdateFlowLogConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateFlowLogConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateFlowLogConfigAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateFlowLogConfigAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateFlowLogConfigAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateFlowLogConfigAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateFlowLogConfigAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateFlowLogConfigAttachmentRequest",
          data.request,
          "UpdateFlowLogConfigAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateFlowLogConfigAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIPSecConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateIPSecConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateIPSecConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateIPSecConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateIPSecConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateIPSecConnectionRequest",
          data.request,
          "UpdateIPSecConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateIPSecConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIPSecConnectionTunnel method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateIPSecConnectionTunnel"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateIPSecConnectionTunnel"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateIPSecConnectionTunnel");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateIPSecConnectionTunnel(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateIPSecConnectionTunnelRequest",
          data.request,
          "UpdateIPSecConnectionTunnelResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateIPSecConnectionTunnelRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIPSecConnectionTunnelSharedSecret method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateIPSecConnectionTunnelSharedSecret"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateIPSecConnectionTunnelSharedSecret"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "UpdateIPSecConnectionTunnelSharedSecret"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateIPSecConnectionTunnelSharedSecret(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateIPSecConnectionTunnelSharedSecretRequest",
          data.request,
          "UpdateIPSecConnectionTunnelSharedSecretResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateIPSecConnectionTunnelSharedSecretRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateInternetGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateInternetGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateInternetGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateInternetGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateInternetGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateInternetGatewayRequest",
          data.request,
          "UpdateInternetGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateInternetGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIpv6 method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateIpv6"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateIpv6");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateIpv6");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateIpv6(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateIpv6Request",
          data.request,
          "UpdateIpv6Response",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateIpv6Request",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateLocalPeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateLocalPeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateLocalPeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateLocalPeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateLocalPeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateLocalPeeringConnectionRequest",
          data.request,
          "UpdateLocalPeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateLocalPeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateLocalPeeringGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateLocalPeeringGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateLocalPeeringGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateLocalPeeringGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateLocalPeeringGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateLocalPeeringGatewayRequest",
          data.request,
          "UpdateLocalPeeringGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateLocalPeeringGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNatGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateNatGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateNatGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateNatGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateNatGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateNatGatewayRequest",
          data.request,
          "UpdateNatGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateNatGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNetworkSecurityGroup method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateNetworkSecurityGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateNetworkSecurityGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateNetworkSecurityGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateNetworkSecurityGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateNetworkSecurityGroupRequest",
          data.request,
          "UpdateNetworkSecurityGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateNetworkSecurityGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNetworkSecurityGroupSecurityRules method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateNetworkSecurityGroupSecurityRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateNetworkSecurityGroupSecurityRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "UpdateNetworkSecurityGroupSecurityRules"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateNetworkSecurityGroupSecurityRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateNetworkSecurityGroupSecurityRulesRequest",
          data.request,
          "UpdateNetworkSecurityGroupSecurityRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateNetworkSecurityGroupSecurityRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePrivateIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdatePrivateIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdatePrivateIp"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdatePrivateIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updatePrivateIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdatePrivateIpRequest",
          data.request,
          "UpdatePrivateIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdatePrivateIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePublicIp method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdatePublicIp"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdatePublicIp");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdatePublicIp");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updatePublicIp(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdatePublicIpRequest",
          data.request,
          "UpdatePublicIpResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdatePublicIpRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRemotePeeringConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateRemotePeeringConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateRemotePeeringConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateRemotePeeringConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateRemotePeeringConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateRemotePeeringConnectionRequest",
          data.request,
          "UpdateRemotePeeringConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateRemotePeeringConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRouteTable method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateRouteTable"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateRouteTable"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateRouteTable");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateRouteTable(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateRouteTableRequest",
          data.request,
          "UpdateRouteTableResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateRouteTableRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSecurityList method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateSecurityList"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateSecurityList"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateSecurityList");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateSecurityList(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateSecurityListRequest",
          data.request,
          "UpdateSecurityListResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateSecurityListRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateServiceGateway method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateServiceGateway"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateServiceGateway"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateServiceGateway");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateServiceGateway(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateServiceGatewayRequest",
          data.request,
          "UpdateServiceGatewayResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateServiceGatewayRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSubnet method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateSubnet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateSubnet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateSubnet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateSubnet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateSubnetRequest",
          data.request,
          "UpdateSubnetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateSubnetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTunnelCpeDeviceConfig method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateTunnelCpeDeviceConfig"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateTunnelCpeDeviceConfig"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateTunnelCpeDeviceConfig");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateTunnelCpeDeviceConfig(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateTunnelCpeDeviceConfigRequest",
          data.request,
          "UpdateTunnelCpeDeviceConfigResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateTunnelCpeDeviceConfigRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVcn method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVcn"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateVcn");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVcn");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVcn(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVcnRequest",
          data.request,
          "UpdateVcnResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVcnRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVirtualCircuit method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVirtualCircuit"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "VirtualNetwork",
      "UpdateVirtualCircuit"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVirtualCircuit");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVirtualCircuit(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVirtualCircuitRequest",
          data.request,
          "UpdateVirtualCircuitResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVirtualCircuitRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateVnic method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateVnic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "VirtualNetwork", "UpdateVnic");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.VirtualNetworkClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateVnic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateVnic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateVnicRequest",
          data.request,
          "UpdateVnicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateVnicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
