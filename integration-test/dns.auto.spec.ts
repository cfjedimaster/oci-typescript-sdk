/**
 * Auto generated test cases for "DNS API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import dns = require("../lib/dns/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Dns Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeSteeringPolicyCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ChangeSteeringPolicyCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "ChangeSteeringPolicyCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ChangeSteeringPolicyCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.changeSteeringPolicyCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ChangeSteeringPolicyCompartmentRequest",
          data.request,
          "ChangeSteeringPolicyCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ChangeSteeringPolicyCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeTsigKeyCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ChangeTsigKeyCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "ChangeTsigKeyCompartment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ChangeTsigKeyCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.changeTsigKeyCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ChangeTsigKeyCompartmentRequest",
          data.request,
          "ChangeTsigKeyCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ChangeTsigKeyCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeZoneCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ChangeZoneCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "ChangeZoneCompartment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ChangeZoneCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.changeZoneCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ChangeZoneCompartmentRequest",
          data.request,
          "ChangeZoneCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ChangeZoneCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSteeringPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "CreateSteeringPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "CreateSteeringPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "CreateSteeringPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.createSteeringPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "CreateSteeringPolicyRequest",
          data.request,
          "CreateSteeringPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "CreateSteeringPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSteeringPolicyAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "CreateSteeringPolicyAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "CreateSteeringPolicyAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "CreateSteeringPolicyAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.createSteeringPolicyAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "CreateSteeringPolicyAttachmentRequest",
          data.request,
          "CreateSteeringPolicyAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "CreateSteeringPolicyAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTsigKey method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "CreateTsigKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "CreateTsigKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "CreateTsigKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.createTsigKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "CreateTsigKeyRequest",
          data.request,
          "CreateTsigKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "CreateTsigKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createZone method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "CreateZone"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "CreateZone");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "CreateZone");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.createZone(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "CreateZoneRequest",
          data.request,
          "CreateZoneResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "CreateZoneRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDomainRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteDomainRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "DeleteDomainRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteDomainRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteDomainRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteDomainRecordsRequest",
          data.request,
          "DeleteDomainRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteDomainRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRRSet method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteRRSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "DeleteRRSet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteRRSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteRRSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteRRSetRequest",
          data.request,
          "DeleteRRSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteRRSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSteeringPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteSteeringPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "DeleteSteeringPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteSteeringPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteSteeringPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteSteeringPolicyRequest",
          data.request,
          "DeleteSteeringPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteSteeringPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSteeringPolicyAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteSteeringPolicyAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "DeleteSteeringPolicyAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteSteeringPolicyAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteSteeringPolicyAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteSteeringPolicyAttachmentRequest",
          data.request,
          "DeleteSteeringPolicyAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteSteeringPolicyAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTsigKey method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteTsigKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "DeleteTsigKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteTsigKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteTsigKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteTsigKeyRequest",
          data.request,
          "DeleteTsigKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteTsigKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteZone method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "DeleteZone"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "DeleteZone");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "DeleteZone");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.deleteZone(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "DeleteZoneRequest",
          data.request,
          "DeleteZoneResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "DeleteZoneRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDomainRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetDomainRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetDomainRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetDomainRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getDomainRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetDomainRecordsRequest",
          data.request,
          "GetDomainRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetDomainRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRRSet method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetRRSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetRRSet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetRRSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getRRSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetRRSetRequest",
          data.request,
          "GetRRSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetRRSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSteeringPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetSteeringPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetSteeringPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetSteeringPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getSteeringPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetSteeringPolicyRequest",
          data.request,
          "GetSteeringPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetSteeringPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSteeringPolicyAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetSteeringPolicyAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "GetSteeringPolicyAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetSteeringPolicyAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getSteeringPolicyAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetSteeringPolicyAttachmentRequest",
          data.request,
          "GetSteeringPolicyAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetSteeringPolicyAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTsigKey method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetTsigKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetTsigKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetTsigKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getTsigKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetTsigKeyRequest",
          data.request,
          "GetTsigKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetTsigKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getZone method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetZone"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetZone");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetZone");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getZone(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetZoneRequest",
          data.request,
          "GetZoneResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetZoneRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getZoneRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "GetZoneRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "GetZoneRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "GetZoneRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.getZoneRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "GetZoneRecordsRequest",
          data.request,
          "GetZoneRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "GetZoneRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSteeringPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ListSteeringPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "ListSteeringPolicies");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ListSteeringPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.listSteeringPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ListSteeringPoliciesRequest",
          data.request,
          "ListSteeringPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ListSteeringPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSteeringPolicyAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ListSteeringPolicyAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "ListSteeringPolicyAttachments"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ListSteeringPolicyAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.listSteeringPolicyAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ListSteeringPolicyAttachmentsRequest",
          data.request,
          "ListSteeringPolicyAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ListSteeringPolicyAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTsigKeys method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ListTsigKeys"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "ListTsigKeys");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ListTsigKeys");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.listTsigKeys(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ListTsigKeysRequest",
          data.request,
          "ListTsigKeysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ListTsigKeysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listZones method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "ListZones"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "ListZones");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "ListZones");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.listZones(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "ListZonesRequest",
          data.request,
          "ListZonesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "ListZonesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test patchDomainRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "PatchDomainRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "PatchDomainRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "PatchDomainRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.patchDomainRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "PatchDomainRecordsRequest",
          data.request,
          "PatchDomainRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "PatchDomainRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test patchRRSet method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "PatchRRSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "PatchRRSet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "PatchRRSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.patchRRSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "PatchRRSetRequest",
          data.request,
          "PatchRRSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "PatchRRSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test patchZoneRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "PatchZoneRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "PatchZoneRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "PatchZoneRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.patchZoneRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "PatchZoneRecordsRequest",
          data.request,
          "PatchZoneRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "PatchZoneRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDomainRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateDomainRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateDomainRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateDomainRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateDomainRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateDomainRecordsRequest",
          data.request,
          "UpdateDomainRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateDomainRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRRSet method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateRRSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateRRSet");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateRRSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateRRSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateRRSetRequest",
          data.request,
          "UpdateRRSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateRRSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSteeringPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateSteeringPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateSteeringPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateSteeringPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateSteeringPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateSteeringPolicyRequest",
          data.request,
          "UpdateSteeringPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateSteeringPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSteeringPolicyAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateSteeringPolicyAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dns",
      "Dns",
      "UpdateSteeringPolicyAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateSteeringPolicyAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateSteeringPolicyAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateSteeringPolicyAttachmentRequest",
          data.request,
          "UpdateSteeringPolicyAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateSteeringPolicyAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTsigKey method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateTsigKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateTsigKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateTsigKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateTsigKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateTsigKeyRequest",
          data.request,
          "UpdateTsigKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateTsigKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateZone method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateZone"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateZone");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateZone");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateZone(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateZoneRequest",
          data.request,
          "UpdateZoneResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateZoneRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateZoneRecords method", async function() {
    if (!(await tsclient.isApiEnabled("dns", "UpdateZoneRecords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dns", "Dns", "UpdateZoneRecords");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dnsClient = new dns.DnsClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dnsClient.endpoint = config.endpoint;
    } else {
      dnsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dns", "UpdateZoneRecords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dnsClient.updateZoneRecords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dns",
          "UpdateZoneRecordsRequest",
          data.request,
          "UpdateZoneRecordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dns",
            "UpdateZoneRecordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
