/**
 * Auto generated test cases for "Core Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import core = require("../lib/core/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Compute Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test addImageShapeCompatibilityEntry method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AddImageShapeCompatibilityEntry"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "AddImageShapeCompatibilityEntry"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AddImageShapeCompatibilityEntry");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.addImageShapeCompatibilityEntry(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AddImageShapeCompatibilityEntryRequest",
          data.request,
          "AddImageShapeCompatibilityEntryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AddImageShapeCompatibilityEntryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AttachBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "AttachBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AttachBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.attachBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AttachBootVolumeRequest",
          data.request,
          "AttachBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AttachBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachVnic method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AttachVnic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "AttachVnic");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AttachVnic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.attachVnic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AttachVnicRequest",
          data.request,
          "AttachVnicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AttachVnicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test attachVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AttachVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "AttachVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AttachVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.attachVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AttachVolumeRequest",
          data.request,
          "AttachVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AttachVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test captureConsoleHistory method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CaptureConsoleHistory"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "CaptureConsoleHistory");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CaptureConsoleHistory");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.captureConsoleHistory(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CaptureConsoleHistoryRequest",
          data.request,
          "CaptureConsoleHistoryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CaptureConsoleHistoryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeDedicatedVmHostCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeDedicatedVmHostCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ChangeDedicatedVmHostCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeDedicatedVmHostCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeDedicatedVmHostCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeDedicatedVmHostCompartmentRequest",
          data.request,
          "ChangeDedicatedVmHostCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeDedicatedVmHostCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeImageCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeImageCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ChangeImageCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeImageCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeImageCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeImageCompartmentRequest",
          data.request,
          "ChangeImageCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeImageCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeInstanceCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeInstanceCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ChangeInstanceCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeInstanceCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeInstanceCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeInstanceCompartmentRequest",
          data.request,
          "ChangeInstanceCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeInstanceCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAppCatalogSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateAppCatalogSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "CreateAppCatalogSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateAppCatalogSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createAppCatalogSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateAppCatalogSubscriptionRequest",
          data.request,
          "CreateAppCatalogSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateAppCatalogSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDedicatedVmHost method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateDedicatedVmHost"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "CreateDedicatedVmHost");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateDedicatedVmHost");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createDedicatedVmHost(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateDedicatedVmHostRequest",
          data.request,
          "CreateDedicatedVmHostResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateDedicatedVmHostRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createImage method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateImage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "CreateImage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateImage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createImage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateImageRequest",
          data.request,
          "CreateImageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateImageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createInstanceConsoleConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateInstanceConsoleConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "CreateInstanceConsoleConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateInstanceConsoleConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createInstanceConsoleConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateInstanceConsoleConnectionRequest",
          data.request,
          "CreateInstanceConsoleConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateInstanceConsoleConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAppCatalogSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteAppCatalogSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "DeleteAppCatalogSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteAppCatalogSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteAppCatalogSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteAppCatalogSubscriptionRequest",
          data.request,
          "DeleteAppCatalogSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteAppCatalogSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteConsoleHistory method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteConsoleHistory"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DeleteConsoleHistory");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteConsoleHistory");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteConsoleHistory(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteConsoleHistoryRequest",
          data.request,
          "DeleteConsoleHistoryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteConsoleHistoryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDedicatedVmHost method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteDedicatedVmHost"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DeleteDedicatedVmHost");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteDedicatedVmHost");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteDedicatedVmHost(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteDedicatedVmHostRequest",
          data.request,
          "DeleteDedicatedVmHostResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteDedicatedVmHostRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteImage method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteImage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DeleteImage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteImage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteImage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteImageRequest",
          data.request,
          "DeleteImageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteImageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteInstanceConsoleConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteInstanceConsoleConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "DeleteInstanceConsoleConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteInstanceConsoleConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteInstanceConsoleConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteInstanceConsoleConnectionRequest",
          data.request,
          "DeleteInstanceConsoleConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteInstanceConsoleConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachBootVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DetachBootVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DetachBootVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DetachBootVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.detachBootVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DetachBootVolumeRequest",
          data.request,
          "DetachBootVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DetachBootVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachVnic method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DetachVnic"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DetachVnic");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DetachVnic");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.detachVnic(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DetachVnicRequest",
          data.request,
          "DetachVnicResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DetachVnicRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachVolume method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DetachVolume"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "DetachVolume");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DetachVolume");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.detachVolume(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DetachVolumeRequest",
          data.request,
          "DetachVolumeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DetachVolumeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test exportImage method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ExportImage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ExportImage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ExportImage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.exportImage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ExportImageRequest",
          data.request,
          "ExportImageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ExportImageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAppCatalogListing method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetAppCatalogListing"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetAppCatalogListing");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetAppCatalogListing");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getAppCatalogListing(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetAppCatalogListingRequest",
          data.request,
          "GetAppCatalogListingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetAppCatalogListingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAppCatalogListingAgreements method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetAppCatalogListingAgreements"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetAppCatalogListingAgreements"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetAppCatalogListingAgreements");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getAppCatalogListingAgreements(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetAppCatalogListingAgreementsRequest",
          data.request,
          "GetAppCatalogListingAgreementsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetAppCatalogListingAgreementsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAppCatalogListingResourceVersion method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetAppCatalogListingResourceVersion"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetAppCatalogListingResourceVersion"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "GetAppCatalogListingResourceVersion"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getAppCatalogListingResourceVersion(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetAppCatalogListingResourceVersionRequest",
          data.request,
          "GetAppCatalogListingResourceVersionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetAppCatalogListingResourceVersionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBootVolumeAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetBootVolumeAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetBootVolumeAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetBootVolumeAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getBootVolumeAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetBootVolumeAttachmentRequest",
          data.request,
          "GetBootVolumeAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetBootVolumeAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getConsoleHistory method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetConsoleHistory"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetConsoleHistory");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetConsoleHistory");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getConsoleHistory(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetConsoleHistoryRequest",
          data.request,
          "GetConsoleHistoryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetConsoleHistoryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getConsoleHistoryContent method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetConsoleHistoryContent"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetConsoleHistoryContent"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetConsoleHistoryContent");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getConsoleHistoryContent(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetConsoleHistoryContentRequest",
          data.request,
          "GetConsoleHistoryContentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetConsoleHistoryContentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDedicatedVmHost method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetDedicatedVmHost"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetDedicatedVmHost");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetDedicatedVmHost");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getDedicatedVmHost(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetDedicatedVmHostRequest",
          data.request,
          "GetDedicatedVmHostResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetDedicatedVmHostRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getImage method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetImage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetImage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetImage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getImage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetImageRequest",
          data.request,
          "GetImageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetImageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getImageShapeCompatibilityEntry method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetImageShapeCompatibilityEntry"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetImageShapeCompatibilityEntry"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetImageShapeCompatibilityEntry");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getImageShapeCompatibilityEntry(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetImageShapeCompatibilityEntryRequest",
          data.request,
          "GetImageShapeCompatibilityEntryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetImageShapeCompatibilityEntryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInstance method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInstanceRequest",
          data.request,
          "GetInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInstanceConsoleConnection method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInstanceConsoleConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetInstanceConsoleConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetInstanceConsoleConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInstanceConsoleConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInstanceConsoleConnectionRequest",
          data.request,
          "GetInstanceConsoleConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInstanceConsoleConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVnicAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVnicAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetVnicAttachment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVnicAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVnicAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVnicAttachmentRequest",
          data.request,
          "GetVnicAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVnicAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getVolumeAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetVolumeAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "GetVolumeAttachment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetVolumeAttachment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getVolumeAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetVolumeAttachmentRequest",
          data.request,
          "GetVolumeAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetVolumeAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWindowsInstanceInitialCredentials method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetWindowsInstanceInitialCredentials"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "GetWindowsInstanceInitialCredentials"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "GetWindowsInstanceInitialCredentials"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getWindowsInstanceInitialCredentials(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetWindowsInstanceInitialCredentialsRequest",
          data.request,
          "GetWindowsInstanceInitialCredentialsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetWindowsInstanceInitialCredentialsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test instanceAction method", async function() {
    if (!(await tsclient.isApiEnabled("core", "InstanceAction"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "InstanceAction");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "InstanceAction");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.instanceAction(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "InstanceActionRequest",
          data.request,
          "InstanceActionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "InstanceActionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test launchInstance method", async function() {
    if (!(await tsclient.isApiEnabled("core", "LaunchInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "LaunchInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "LaunchInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.launchInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "LaunchInstanceRequest",
          data.request,
          "LaunchInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "LaunchInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAppCatalogListingResourceVersions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListAppCatalogListingResourceVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListAppCatalogListingResourceVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ListAppCatalogListingResourceVersions"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listAppCatalogListingResourceVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListAppCatalogListingResourceVersionsRequest",
          data.request,
          "ListAppCatalogListingResourceVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListAppCatalogListingResourceVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAppCatalogListings method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListAppCatalogListings"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListAppCatalogListings"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListAppCatalogListings");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listAppCatalogListings(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListAppCatalogListingsRequest",
          data.request,
          "ListAppCatalogListingsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListAppCatalogListingsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAppCatalogSubscriptions method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListAppCatalogSubscriptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListAppCatalogSubscriptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListAppCatalogSubscriptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listAppCatalogSubscriptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListAppCatalogSubscriptionsRequest",
          data.request,
          "ListAppCatalogSubscriptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListAppCatalogSubscriptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBootVolumeAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListBootVolumeAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListBootVolumeAttachments"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListBootVolumeAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listBootVolumeAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListBootVolumeAttachmentsRequest",
          data.request,
          "ListBootVolumeAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListBootVolumeAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listConsoleHistories method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListConsoleHistories"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListConsoleHistories");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListConsoleHistories");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listConsoleHistories(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListConsoleHistoriesRequest",
          data.request,
          "ListConsoleHistoriesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListConsoleHistoriesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDedicatedVmHostInstanceShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDedicatedVmHostInstanceShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListDedicatedVmHostInstanceShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDedicatedVmHostInstanceShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDedicatedVmHostInstanceShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDedicatedVmHostInstanceShapesRequest",
          data.request,
          "ListDedicatedVmHostInstanceShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDedicatedVmHostInstanceShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDedicatedVmHostInstances method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDedicatedVmHostInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListDedicatedVmHostInstances"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDedicatedVmHostInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDedicatedVmHostInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDedicatedVmHostInstancesRequest",
          data.request,
          "ListDedicatedVmHostInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDedicatedVmHostInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDedicatedVmHostShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDedicatedVmHostShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListDedicatedVmHostShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDedicatedVmHostShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDedicatedVmHostShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDedicatedVmHostShapesRequest",
          data.request,
          "ListDedicatedVmHostShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDedicatedVmHostShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDedicatedVmHosts method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListDedicatedVmHosts"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListDedicatedVmHosts");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListDedicatedVmHosts");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listDedicatedVmHosts(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListDedicatedVmHostsRequest",
          data.request,
          "ListDedicatedVmHostsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListDedicatedVmHostsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listImageShapeCompatibilityEntries method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListImageShapeCompatibilityEntries"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListImageShapeCompatibilityEntries"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ListImageShapeCompatibilityEntries"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listImageShapeCompatibilityEntries(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListImageShapeCompatibilityEntriesRequest",
          data.request,
          "ListImageShapeCompatibilityEntriesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListImageShapeCompatibilityEntriesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listImages method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListImages"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListImages");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListImages");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listImages(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListImagesRequest",
          data.request,
          "ListImagesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListImagesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstanceConsoleConnections method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstanceConsoleConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "ListInstanceConsoleConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstanceConsoleConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstanceConsoleConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstanceConsoleConnectionsRequest",
          data.request,
          "ListInstanceConsoleConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstanceConsoleConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstanceDevices method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstanceDevices"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListInstanceDevices");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstanceDevices");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstanceDevices(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstanceDevicesRequest",
          data.request,
          "ListInstanceDevicesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstanceDevicesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstances method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListInstances");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstancesRequest",
          data.request,
          "ListInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listShapes method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListShapes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListShapesRequest",
          data.request,
          "ListShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVnicAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVnicAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListVnicAttachments");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVnicAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVnicAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVnicAttachmentsRequest",
          data.request,
          "ListVnicAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVnicAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listVolumeAttachments method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListVolumeAttachments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "ListVolumeAttachments");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListVolumeAttachments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listVolumeAttachments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListVolumeAttachmentsRequest",
          data.request,
          "ListVolumeAttachmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListVolumeAttachmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removeImageShapeCompatibilityEntry method", async function() {
    if (!(await tsclient.isApiEnabled("core", "RemoveImageShapeCompatibilityEntry"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "Compute",
      "RemoveImageShapeCompatibilityEntry"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "RemoveImageShapeCompatibilityEntry"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.removeImageShapeCompatibilityEntry(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "RemoveImageShapeCompatibilityEntryRequest",
          data.request,
          "RemoveImageShapeCompatibilityEntryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "RemoveImageShapeCompatibilityEntryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateInstance method", async function() {
    if (!(await tsclient.isApiEnabled("core", "TerminateInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "TerminateInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "TerminateInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.terminateInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "TerminateInstanceRequest",
          data.request,
          "TerminateInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "TerminateInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateConsoleHistory method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateConsoleHistory"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "UpdateConsoleHistory");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateConsoleHistory");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateConsoleHistory(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateConsoleHistoryRequest",
          data.request,
          "UpdateConsoleHistoryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateConsoleHistoryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDedicatedVmHost method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateDedicatedVmHost"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "UpdateDedicatedVmHost");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateDedicatedVmHost");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateDedicatedVmHost(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateDedicatedVmHostRequest",
          data.request,
          "UpdateDedicatedVmHostResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateDedicatedVmHostRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateImage method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateImage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "UpdateImage");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateImage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateImage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateImageRequest",
          data.request,
          "UpdateImageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateImageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateInstance method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateInstance"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("core", "Compute", "UpdateInstance");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateInstance");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateInstance(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateInstanceRequest",
          data.request,
          "UpdateInstanceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateInstanceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
