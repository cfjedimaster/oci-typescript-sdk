/**
 * Auto generated test cases for "Object Storage Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import objectstorage = require("../lib/objectstorage/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test ObjectStorage Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test abortMultipartUpload method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "AbortMultipartUpload"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "AbortMultipartUpload"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "AbortMultipartUpload");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.abortMultipartUpload(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "AbortMultipartUploadRequest",
          data.request,
          "AbortMultipartUploadResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "AbortMultipartUploadRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test cancelWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CancelWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CancelWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "CancelWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.cancelWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CancelWorkRequestRequest",
          data.request,
          "CancelWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CancelWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test commitMultipartUpload method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CommitMultipartUpload"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CommitMultipartUpload"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "CommitMultipartUpload");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.commitMultipartUpload(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CommitMultipartUploadRequest",
          data.request,
          "CommitMultipartUploadResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CommitMultipartUploadRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test copyObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CopyObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CopyObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "CopyObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.copyObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CopyObjectRequest",
          data.request,
          "CopyObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CopyObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CreateBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CreateBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "CreateBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.createBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CreateBucketRequest",
          data.request,
          "CreateBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CreateBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createMultipartUpload method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CreateMultipartUpload"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CreateMultipartUpload"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "CreateMultipartUpload");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.createMultipartUpload(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CreateMultipartUploadRequest",
          data.request,
          "CreateMultipartUploadResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CreateMultipartUploadRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPreauthenticatedRequest method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "CreatePreauthenticatedRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "CreatePreauthenticatedRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "objectstorage",
      "CreatePreauthenticatedRequest"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.createPreauthenticatedRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "CreatePreauthenticatedRequestRequest",
          data.request,
          "CreatePreauthenticatedRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "CreatePreauthenticatedRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "DeleteBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "DeleteBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "DeleteBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.deleteBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "DeleteBucketRequest",
          data.request,
          "DeleteBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "DeleteBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "DeleteObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "DeleteObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "DeleteObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.deleteObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "DeleteObjectRequest",
          data.request,
          "DeleteObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "DeleteObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteObjectLifecyclePolicy method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "DeleteObjectLifecyclePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "DeleteObjectLifecyclePolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "objectstorage",
      "DeleteObjectLifecyclePolicy"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.deleteObjectLifecyclePolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "DeleteObjectLifecyclePolicyRequest",
          data.request,
          "DeleteObjectLifecyclePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "DeleteObjectLifecyclePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePreauthenticatedRequest method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "DeletePreauthenticatedRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "DeletePreauthenticatedRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "objectstorage",
      "DeletePreauthenticatedRequest"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.deletePreauthenticatedRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "DeletePreauthenticatedRequestRequest",
          data.request,
          "DeletePreauthenticatedRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "DeletePreauthenticatedRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetBucketRequest",
          data.request,
          "GetBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNamespace method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetNamespace"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetNamespace"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetNamespace");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getNamespace(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetNamespaceRequest",
          data.request,
          "GetNamespaceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetNamespaceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNamespaceMetadata method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetNamespaceMetadata"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetNamespaceMetadata"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetNamespaceMetadata");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getNamespaceMetadata(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetNamespaceMetadataRequest",
          data.request,
          "GetNamespaceMetadataResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetNamespaceMetadataRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetObjectRequest",
          data.request,
          "GetObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getObjectLifecyclePolicy method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetObjectLifecyclePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetObjectLifecyclePolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetObjectLifecyclePolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getObjectLifecyclePolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetObjectLifecyclePolicyRequest",
          data.request,
          "GetObjectLifecyclePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetObjectLifecyclePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPreauthenticatedRequest method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetPreauthenticatedRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetPreauthenticatedRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "objectstorage",
      "GetPreauthenticatedRequest"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getPreauthenticatedRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetPreauthenticatedRequestRequest",
          data.request,
          "GetPreauthenticatedRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetPreauthenticatedRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test headBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "HeadBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "HeadBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "HeadBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.headBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "HeadBucketRequest",
          data.request,
          "HeadBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "HeadBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test headObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "HeadObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "HeadObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "HeadObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.headObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "HeadObjectRequest",
          data.request,
          "HeadObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "HeadObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBuckets method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListBuckets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListBuckets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListBuckets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listBuckets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListBucketsRequest",
          data.request,
          "ListBucketsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListBucketsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMultipartUploadParts method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListMultipartUploadParts"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListMultipartUploadParts"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListMultipartUploadParts");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listMultipartUploadParts(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListMultipartUploadPartsRequest",
          data.request,
          "ListMultipartUploadPartsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListMultipartUploadPartsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMultipartUploads method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListMultipartUploads"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListMultipartUploads"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListMultipartUploads");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listMultipartUploads(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListMultipartUploadsRequest",
          data.request,
          "ListMultipartUploadsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListMultipartUploadsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listObjectVersions method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListObjectVersions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListObjectVersions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListObjectVersions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listObjectVersions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListObjectVersionsRequest",
          data.request,
          "ListObjectVersionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListObjectVersionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listObjects method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListObjects"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListObjects"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListObjects");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listObjects(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListObjectsRequest",
          data.request,
          "ListObjectsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListObjectsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPreauthenticatedRequests method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListPreauthenticatedRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListPreauthenticatedRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "objectstorage",
      "ListPreauthenticatedRequests"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listPreauthenticatedRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListPreauthenticatedRequestsRequest",
          data.request,
          "ListPreauthenticatedRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListPreauthenticatedRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test putObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "PutObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "PutObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "PutObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.putObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "PutObjectRequest",
          data.request,
          "PutObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "PutObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test putObjectLifecyclePolicy method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "PutObjectLifecyclePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "PutObjectLifecyclePolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "PutObjectLifecyclePolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.putObjectLifecyclePolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "PutObjectLifecyclePolicyRequest",
          data.request,
          "PutObjectLifecyclePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "PutObjectLifecyclePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test reencryptBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "ReencryptBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "ReencryptBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "ReencryptBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.reencryptBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "ReencryptBucketRequest",
          data.request,
          "ReencryptBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "ReencryptBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test renameObject method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "RenameObject"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "RenameObject"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "RenameObject");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.renameObject(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "RenameObjectRequest",
          data.request,
          "RenameObjectResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "RenameObjectRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test restoreObjects method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "RestoreObjects"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "RestoreObjects"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "RestoreObjects");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.restoreObjects(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "RestoreObjectsRequest",
          data.request,
          "RestoreObjectsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "RestoreObjectsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBucket method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "UpdateBucket"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "UpdateBucket"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "UpdateBucket");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.updateBucket(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "UpdateBucketRequest",
          data.request,
          "UpdateBucketResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "UpdateBucketRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNamespaceMetadata method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "UpdateNamespaceMetadata"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "UpdateNamespaceMetadata"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "UpdateNamespaceMetadata");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.updateNamespaceMetadata(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "UpdateNamespaceMetadataRequest",
          data.request,
          "UpdateNamespaceMetadataResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "UpdateNamespaceMetadataRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test uploadPart method", async function() {
    if (!(await tsclient.isApiEnabled("objectstorage", "UploadPart"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "objectstorage",
      "ObjectStorage",
      "UploadPart"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const objectstorageClient = new objectstorage.ObjectStorageClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      objectstorageClient.endpoint = config.endpoint;
    } else {
      objectstorageClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("objectstorage", "UploadPart");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await objectstorageClient.uploadPart(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "objectstorage",
          "UploadPartRequest",
          data.request,
          "UploadPartResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "objectstorage",
            "UploadPartRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
