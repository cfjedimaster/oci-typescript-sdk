/**
 * Auto generated test cases for "Data Catalog API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import datacatalog = require("../lib/datacatalog/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test DataCatalog Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeCatalogCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ChangeCatalogCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ChangeCatalogCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ChangeCatalogCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.changeCatalogCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ChangeCatalogCompartmentRequest",
          data.request,
          "ChangeCatalogCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ChangeCatalogCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAttribute method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateAttribute"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateAttribute"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateAttribute");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createAttribute(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateAttributeRequest",
          data.request,
          "CreateAttributeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateAttributeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAttributeTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateAttributeTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateAttributeTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateAttributeTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createAttributeTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateAttributeTagRequest",
          data.request,
          "CreateAttributeTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateAttributeTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCatalog method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateCatalog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateCatalog"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateCatalog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createCatalog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateCatalogRequest",
          data.request,
          "CreateCatalogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateCatalogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateConnectionRequest",
          data.request,
          "CreateConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDataAsset method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateDataAsset"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateDataAsset"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateDataAsset");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createDataAsset(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateDataAssetRequest",
          data.request,
          "CreateDataAssetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateDataAssetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDataAssetTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateDataAssetTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateDataAssetTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateDataAssetTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createDataAssetTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateDataAssetTagRequest",
          data.request,
          "CreateDataAssetTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateDataAssetTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createEntity method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateEntity"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateEntity"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateEntity");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createEntity(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateEntityRequest",
          data.request,
          "CreateEntityResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateEntityRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createEntityTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateEntityTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateEntityTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateEntityTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createEntityTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateEntityTagRequest",
          data.request,
          "CreateEntityTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateEntityTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createFolder method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateFolder"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateFolder"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateFolder");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createFolder(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateFolderRequest",
          data.request,
          "CreateFolderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateFolderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createFolderTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateFolderTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateFolderTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateFolderTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createFolderTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateFolderTagRequest",
          data.request,
          "CreateFolderTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateFolderTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateGlossaryRequest",
          data.request,
          "CreateGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createJob method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "CreateJob");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateJobRequest",
          data.request,
          "CreateJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createJobDefinition method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateJobDefinition"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateJobDefinition"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateJobDefinition");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createJobDefinition(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateJobDefinitionRequest",
          data.request,
          "CreateJobDefinitionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateJobDefinitionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createJobExecution method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateJobExecution"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateJobExecution"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateJobExecution");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createJobExecution(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateJobExecutionRequest",
          data.request,
          "CreateJobExecutionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateJobExecutionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTerm method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateTerm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "CreateTerm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateTerm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createTerm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateTermRequest",
          data.request,
          "CreateTermResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateTermRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTermRelationship method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "CreateTermRelationship"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "CreateTermRelationship"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "CreateTermRelationship");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.createTermRelationship(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "CreateTermRelationshipRequest",
          data.request,
          "CreateTermRelationshipResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "CreateTermRelationshipRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAttribute method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteAttribute"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteAttribute"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteAttribute");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteAttribute(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteAttributeRequest",
          data.request,
          "DeleteAttributeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteAttributeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAttributeTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteAttributeTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteAttributeTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteAttributeTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteAttributeTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteAttributeTagRequest",
          data.request,
          "DeleteAttributeTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteAttributeTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCatalog method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteCatalog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteCatalog"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteCatalog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteCatalog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteCatalogRequest",
          data.request,
          "DeleteCatalogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteCatalogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteConnectionRequest",
          data.request,
          "DeleteConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDataAsset method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteDataAsset"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteDataAsset"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteDataAsset");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteDataAsset(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteDataAssetRequest",
          data.request,
          "DeleteDataAssetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteDataAssetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDataAssetTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteDataAssetTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteDataAssetTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteDataAssetTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteDataAssetTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteDataAssetTagRequest",
          data.request,
          "DeleteDataAssetTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteDataAssetTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteEntity method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteEntity"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteEntity"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteEntity");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteEntity(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteEntityRequest",
          data.request,
          "DeleteEntityResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteEntityRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteEntityTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteEntityTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteEntityTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteEntityTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteEntityTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteEntityTagRequest",
          data.request,
          "DeleteEntityTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteEntityTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteFolder method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteFolder"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteFolder"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteFolder");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteFolder(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteFolderRequest",
          data.request,
          "DeleteFolderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteFolderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteFolderTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteFolderTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteFolderTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteFolderTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteFolderTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteFolderTagRequest",
          data.request,
          "DeleteFolderTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteFolderTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteGlossaryRequest",
          data.request,
          "DeleteGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteJob method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "DeleteJob");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteJobRequest",
          data.request,
          "DeleteJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteJobDefinition method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteJobDefinition"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteJobDefinition"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteJobDefinition");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteJobDefinition(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteJobDefinitionRequest",
          data.request,
          "DeleteJobDefinitionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteJobDefinitionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTerm method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteTerm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "DeleteTerm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteTerm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteTerm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteTermRequest",
          data.request,
          "DeleteTermResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteTermRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTermRelationship method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "DeleteTermRelationship"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "DeleteTermRelationship"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "DeleteTermRelationship");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.deleteTermRelationship(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "DeleteTermRelationshipRequest",
          data.request,
          "DeleteTermRelationshipResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "DeleteTermRelationshipRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test expandTreeForGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ExpandTreeForGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ExpandTreeForGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ExpandTreeForGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.expandTreeForGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ExpandTreeForGlossaryRequest",
          data.request,
          "ExpandTreeForGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ExpandTreeForGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test exportGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ExportGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ExportGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ExportGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.exportGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ExportGlossaryRequest",
          data.request,
          "ExportGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ExportGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAttribute method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetAttribute"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetAttribute"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetAttribute");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getAttribute(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetAttributeRequest",
          data.request,
          "GetAttributeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetAttributeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAttributeTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetAttributeTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetAttributeTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetAttributeTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getAttributeTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetAttributeTagRequest",
          data.request,
          "GetAttributeTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetAttributeTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCatalog method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetCatalog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetCatalog");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetCatalog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getCatalog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetCatalogRequest",
          data.request,
          "GetCatalogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetCatalogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetConnectionRequest",
          data.request,
          "GetConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDataAsset method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetDataAsset"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetDataAsset"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetDataAsset");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getDataAsset(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetDataAssetRequest",
          data.request,
          "GetDataAssetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetDataAssetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDataAssetTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetDataAssetTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetDataAssetTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetDataAssetTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getDataAssetTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetDataAssetTagRequest",
          data.request,
          "GetDataAssetTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetDataAssetTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getEntity method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetEntity"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetEntity");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetEntity");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getEntity(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetEntityRequest",
          data.request,
          "GetEntityResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetEntityRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getEntityTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetEntityTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetEntityTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetEntityTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getEntityTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetEntityTagRequest",
          data.request,
          "GetEntityTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetEntityTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFolder method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetFolder"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetFolder");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetFolder");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getFolder(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetFolderRequest",
          data.request,
          "GetFolderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetFolderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getFolderTag method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetFolderTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetFolderTag"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetFolderTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getFolderTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetFolderTagRequest",
          data.request,
          "GetFolderTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetFolderTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetGlossaryRequest",
          data.request,
          "GetGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJob method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetJob");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetJobRequest",
          data.request,
          "GetJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobDefinition method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetJobDefinition"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetJobDefinition"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetJobDefinition");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getJobDefinition(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetJobDefinitionRequest",
          data.request,
          "GetJobDefinitionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetJobDefinitionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobExecution method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetJobExecution"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetJobExecution"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetJobExecution");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getJobExecution(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetJobExecutionRequest",
          data.request,
          "GetJobExecutionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetJobExecutionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobLog method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetJobLog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetJobLog");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetJobLog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getJobLog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetJobLogRequest",
          data.request,
          "GetJobLogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetJobLogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getJobMetrics method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetJobMetrics"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetJobMetrics"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetJobMetrics");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getJobMetrics(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetJobMetricsRequest",
          data.request,
          "GetJobMetricsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetJobMetricsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTerm method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetTerm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetTerm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetTerm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getTerm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetTermRequest",
          data.request,
          "GetTermResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetTermRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTermRelationship method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetTermRelationship"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetTermRelationship"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetTermRelationship");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getTermRelationship(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetTermRelationshipRequest",
          data.request,
          "GetTermRelationshipResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetTermRelationshipRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getType method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetType"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "GetType");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetType");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getType(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetTypeRequest",
          data.request,
          "GetTypeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetTypeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test importConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ImportConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ImportConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ImportConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.importConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ImportConnectionRequest",
          data.request,
          "ImportConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ImportConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test importGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ImportGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ImportGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ImportGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.importGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ImportGlossaryRequest",
          data.request,
          "ImportGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ImportGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAttributeTags method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListAttributeTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListAttributeTags"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListAttributeTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listAttributeTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListAttributeTagsRequest",
          data.request,
          "ListAttributeTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListAttributeTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAttributes method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListAttributes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListAttributes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListAttributes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listAttributes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListAttributesRequest",
          data.request,
          "ListAttributesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListAttributesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCatalogs method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListCatalogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListCatalogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListCatalogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listCatalogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListCatalogsRequest",
          data.request,
          "ListCatalogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListCatalogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listConnections method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListConnections"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListConnections"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListConnections");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listConnections(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListConnectionsRequest",
          data.request,
          "ListConnectionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListConnectionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDataAssetTags method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListDataAssetTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListDataAssetTags"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListDataAssetTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listDataAssetTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListDataAssetTagsRequest",
          data.request,
          "ListDataAssetTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListDataAssetTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDataAssets method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListDataAssets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListDataAssets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListDataAssets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listDataAssets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListDataAssetsRequest",
          data.request,
          "ListDataAssetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListDataAssetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listEntities method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListEntities"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListEntities"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListEntities");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listEntities(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListEntitiesRequest",
          data.request,
          "ListEntitiesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListEntitiesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listEntityTags method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListEntityTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListEntityTags"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListEntityTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listEntityTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListEntityTagsRequest",
          data.request,
          "ListEntityTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListEntityTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFolderTags method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListFolderTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListFolderTags"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListFolderTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listFolderTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListFolderTagsRequest",
          data.request,
          "ListFolderTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListFolderTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFolders method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListFolders"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListFolders"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListFolders");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listFolders(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListFoldersRequest",
          data.request,
          "ListFoldersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListFoldersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listGlossaries method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListGlossaries"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListGlossaries"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListGlossaries");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listGlossaries(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListGlossariesRequest",
          data.request,
          "ListGlossariesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListGlossariesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobDefinitions method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListJobDefinitions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListJobDefinitions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListJobDefinitions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listJobDefinitions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListJobDefinitionsRequest",
          data.request,
          "ListJobDefinitionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListJobDefinitionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobExecutions method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListJobExecutions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListJobExecutions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListJobExecutions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listJobExecutions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListJobExecutionsRequest",
          data.request,
          "ListJobExecutionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListJobExecutionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobLogs method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListJobLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListJobLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListJobLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listJobLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListJobLogsRequest",
          data.request,
          "ListJobLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListJobLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobMetrics method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListJobMetrics"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListJobMetrics"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListJobMetrics");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listJobMetrics(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListJobMetricsRequest",
          data.request,
          "ListJobMetricsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListJobMetricsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listJobs method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListJobs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "ListJobs");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListJobs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listJobs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListJobsRequest",
          data.request,
          "ListJobsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListJobsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTags method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "ListTags");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListTagsRequest",
          data.request,
          "ListTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTermRelationships method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListTermRelationships"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListTermRelationships"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListTermRelationships");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listTermRelationships(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListTermRelationshipsRequest",
          data.request,
          "ListTermRelationshipsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListTermRelationshipsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTerms method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListTerms"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "ListTerms");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListTerms");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listTerms(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListTermsRequest",
          data.request,
          "ListTermsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListTermsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTypes method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListTypes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "ListTypes");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListTypes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listTypes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListTypesRequest",
          data.request,
          "ListTypesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListTypesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListWorkRequestErrorsRequest",
          data.request,
          "ListWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListWorkRequestLogsRequest",
          data.request,
          "ListWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test objectStats method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ObjectStats"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ObjectStats"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ObjectStats");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.objectStats(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ObjectStatsRequest",
          data.request,
          "ObjectStatsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ObjectStatsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test parseConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ParseConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ParseConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ParseConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.parseConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ParseConnectionRequest",
          data.request,
          "ParseConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ParseConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test searchCriteria method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "SearchCriteria"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "SearchCriteria"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "SearchCriteria");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.searchCriteria(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "SearchCriteriaRequest",
          data.request,
          "SearchCriteriaResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "SearchCriteriaRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test testConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "TestConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "TestConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "TestConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.testConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "TestConnectionRequest",
          data.request,
          "TestConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "TestConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAttribute method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateAttribute"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateAttribute"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateAttribute");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateAttribute(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateAttributeRequest",
          data.request,
          "UpdateAttributeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateAttributeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCatalog method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateCatalog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateCatalog"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateCatalog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateCatalog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateCatalogRequest",
          data.request,
          "UpdateCatalogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateCatalogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateConnectionRequest",
          data.request,
          "UpdateConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDataAsset method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateDataAsset"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateDataAsset"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateDataAsset");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateDataAsset(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateDataAssetRequest",
          data.request,
          "UpdateDataAssetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateDataAssetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateEntity method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateEntity"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateEntity"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateEntity");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateEntity(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateEntityRequest",
          data.request,
          "UpdateEntityResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateEntityRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateFolder method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateFolder"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateFolder"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateFolder");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateFolder(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateFolderRequest",
          data.request,
          "UpdateFolderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateFolderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateGlossary method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateGlossary"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateGlossary"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateGlossary");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateGlossary(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateGlossaryRequest",
          data.request,
          "UpdateGlossaryResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateGlossaryRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateJob method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateJob"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "UpdateJob");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateJob");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateJob(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateJobRequest",
          data.request,
          "UpdateJobResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateJobRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateJobDefinition method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateJobDefinition"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateJobDefinition"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateJobDefinition");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateJobDefinition(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateJobDefinitionRequest",
          data.request,
          "UpdateJobDefinitionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateJobDefinitionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTerm method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateTerm"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "UpdateTerm");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateTerm");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateTerm(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateTermRequest",
          data.request,
          "UpdateTermResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateTermRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTermRelationship method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UpdateTermRelationship"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UpdateTermRelationship"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UpdateTermRelationship");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.updateTermRelationship(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UpdateTermRelationshipRequest",
          data.request,
          "UpdateTermRelationshipResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UpdateTermRelationshipRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test uploadCredentials method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "UploadCredentials"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "UploadCredentials"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "UploadCredentials");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.uploadCredentials(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UploadCredentialsRequest",
          data.request,
          "UploadCredentialsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UploadCredentialsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test users method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "Users"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("datacatalog", "DataCatalog", "Users");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "Users");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.users(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "UsersRequest",
          data.request,
          "UsersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "UsersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test validateConnection method", async function() {
    if (!(await tsclient.isApiEnabled("datacatalog", "ValidateConnection"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "datacatalog",
      "DataCatalog",
      "ValidateConnection"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const datacatalogClient = new datacatalog.DataCatalogClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      datacatalogClient.endpoint = config.endpoint;
    } else {
      datacatalogClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("datacatalog", "ValidateConnection");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await datacatalogClient.validateConnection(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "datacatalog",
          "ValidateConnectionRequest",
          data.request,
          "ValidateConnectionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "datacatalog",
            "ValidateConnectionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
