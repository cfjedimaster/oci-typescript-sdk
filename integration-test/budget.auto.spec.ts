/**
 * Auto generated test cases for "Budgets API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import budget = require("../lib/budget/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Budget Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test createAlertRule method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "CreateAlertRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "CreateAlertRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "CreateAlertRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.createAlertRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "CreateAlertRuleRequest",
          data.request,
          "CreateAlertRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "CreateAlertRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBudget method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "CreateBudget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "CreateBudget");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "CreateBudget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.createBudget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "CreateBudgetRequest",
          data.request,
          "CreateBudgetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "CreateBudgetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAlertRule method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "DeleteAlertRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "DeleteAlertRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "DeleteAlertRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.deleteAlertRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "DeleteAlertRuleRequest",
          data.request,
          "DeleteAlertRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "DeleteAlertRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBudget method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "DeleteBudget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "DeleteBudget");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "DeleteBudget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.deleteBudget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "DeleteBudgetRequest",
          data.request,
          "DeleteBudgetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "DeleteBudgetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAlertRule method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "GetAlertRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "GetAlertRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "GetAlertRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.getAlertRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "GetAlertRuleRequest",
          data.request,
          "GetAlertRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "GetAlertRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBudget method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "GetBudget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "GetBudget");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "GetBudget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.getBudget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "GetBudgetRequest",
          data.request,
          "GetBudgetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "GetBudgetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAlertRules method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "ListAlertRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "ListAlertRules");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "ListAlertRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.listAlertRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "ListAlertRulesRequest",
          data.request,
          "ListAlertRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "ListAlertRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBudgets method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "ListBudgets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "ListBudgets");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "ListBudgets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.listBudgets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "ListBudgetsRequest",
          data.request,
          "ListBudgetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "ListBudgetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAlertRule method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "UpdateAlertRule"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "UpdateAlertRule");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "UpdateAlertRule");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.updateAlertRule(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "UpdateAlertRuleRequest",
          data.request,
          "UpdateAlertRuleResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "UpdateAlertRuleRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBudget method", async function() {
    if (!(await tsclient.isApiEnabled("budget", "UpdateBudget"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("budget", "Budget", "UpdateBudget");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const budgetClient = new budget.BudgetClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      budgetClient.endpoint = config.endpoint;
    } else {
      budgetClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("budget", "UpdateBudget");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await budgetClient.updateBudget(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "budget",
          "UpdateBudgetRequest",
          data.request,
          "UpdateBudgetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "budget",
            "UpdateBudgetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
