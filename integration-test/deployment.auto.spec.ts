/**
 * Auto generated test cases for "API Gateway API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import apigateway = require("../lib/apigateway/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Deployment Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeDeploymentCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "ChangeDeploymentCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "ChangeDeploymentCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "ChangeDeploymentCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.changeDeploymentCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "ChangeDeploymentCompartmentRequest",
          data.request,
          "ChangeDeploymentCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "ChangeDeploymentCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDeployment method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "CreateDeployment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "CreateDeployment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "CreateDeployment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.createDeployment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "CreateDeploymentRequest",
          data.request,
          "CreateDeploymentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "CreateDeploymentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDeployment method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "DeleteDeployment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "DeleteDeployment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "DeleteDeployment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.deleteDeployment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "DeleteDeploymentRequest",
          data.request,
          "DeleteDeploymentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "DeleteDeploymentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDeployment method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "GetDeployment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "GetDeployment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "GetDeployment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.getDeployment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "GetDeploymentRequest",
          data.request,
          "GetDeploymentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "GetDeploymentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDeployments method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "ListDeployments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "ListDeployments"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "ListDeployments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.listDeployments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "ListDeploymentsRequest",
          data.request,
          "ListDeploymentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "ListDeploymentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDeployment method", async function() {
    if (!(await tsclient.isApiEnabled("apigateway", "UpdateDeployment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "apigateway",
      "Deployment",
      "UpdateDeployment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const apigatewayClient = new apigateway.DeploymentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      apigatewayClient.endpoint = config.endpoint;
    } else {
      apigatewayClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("apigateway", "UpdateDeployment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await apigatewayClient.updateDeployment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "apigateway",
          "UpdateDeploymentRequest",
          data.request,
          "UpdateDeploymentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "apigateway",
            "UpdateDeploymentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
