/**
 * Auto generated test cases for "Health Checks API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import healthchecks = require("../lib/healthchecks/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test HealthChecks Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeHttpMonitorCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ChangeHttpMonitorCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ChangeHttpMonitorCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "healthchecks",
      "ChangeHttpMonitorCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.changeHttpMonitorCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ChangeHttpMonitorCompartmentRequest",
          data.request,
          "ChangeHttpMonitorCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ChangeHttpMonitorCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changePingMonitorCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ChangePingMonitorCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ChangePingMonitorCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "healthchecks",
      "ChangePingMonitorCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.changePingMonitorCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ChangePingMonitorCompartmentRequest",
          data.request,
          "ChangePingMonitorCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ChangePingMonitorCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createHttpMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "CreateHttpMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "CreateHttpMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "CreateHttpMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.createHttpMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "CreateHttpMonitorRequest",
          data.request,
          "CreateHttpMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "CreateHttpMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createOnDemandHttpProbe method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "CreateOnDemandHttpProbe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "CreateOnDemandHttpProbe"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "CreateOnDemandHttpProbe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.createOnDemandHttpProbe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "CreateOnDemandHttpProbeRequest",
          data.request,
          "CreateOnDemandHttpProbeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "CreateOnDemandHttpProbeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createOnDemandPingProbe method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "CreateOnDemandPingProbe"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "CreateOnDemandPingProbe"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "CreateOnDemandPingProbe");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.createOnDemandPingProbe(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "CreateOnDemandPingProbeRequest",
          data.request,
          "CreateOnDemandPingProbeResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "CreateOnDemandPingProbeRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPingMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "CreatePingMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "CreatePingMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "CreatePingMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.createPingMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "CreatePingMonitorRequest",
          data.request,
          "CreatePingMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "CreatePingMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteHttpMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "DeleteHttpMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "DeleteHttpMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "DeleteHttpMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.deleteHttpMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "DeleteHttpMonitorRequest",
          data.request,
          "DeleteHttpMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "DeleteHttpMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePingMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "DeletePingMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "DeletePingMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "DeletePingMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.deletePingMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "DeletePingMonitorRequest",
          data.request,
          "DeletePingMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "DeletePingMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getHttpMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "GetHttpMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "GetHttpMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "GetHttpMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.getHttpMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "GetHttpMonitorRequest",
          data.request,
          "GetHttpMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "GetHttpMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPingMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "GetPingMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "GetPingMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "GetPingMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.getPingMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "GetPingMonitorRequest",
          data.request,
          "GetPingMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "GetPingMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listHealthChecksVantagePoints method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ListHealthChecksVantagePoints"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ListHealthChecksVantagePoints"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "healthchecks",
      "ListHealthChecksVantagePoints"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.listHealthChecksVantagePoints(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ListHealthChecksVantagePointsRequest",
          data.request,
          "ListHealthChecksVantagePointsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ListHealthChecksVantagePointsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listHttpMonitors method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ListHttpMonitors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ListHttpMonitors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "ListHttpMonitors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.listHttpMonitors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ListHttpMonitorsRequest",
          data.request,
          "ListHttpMonitorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ListHttpMonitorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listHttpProbeResults method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ListHttpProbeResults"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ListHttpProbeResults"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "ListHttpProbeResults");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.listHttpProbeResults(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ListHttpProbeResultsRequest",
          data.request,
          "ListHttpProbeResultsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ListHttpProbeResultsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPingMonitors method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ListPingMonitors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ListPingMonitors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "ListPingMonitors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.listPingMonitors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ListPingMonitorsRequest",
          data.request,
          "ListPingMonitorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ListPingMonitorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPingProbeResults method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "ListPingProbeResults"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "ListPingProbeResults"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "ListPingProbeResults");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.listPingProbeResults(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "ListPingProbeResultsRequest",
          data.request,
          "ListPingProbeResultsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "ListPingProbeResultsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateHttpMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "UpdateHttpMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "UpdateHttpMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "UpdateHttpMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.updateHttpMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "UpdateHttpMonitorRequest",
          data.request,
          "UpdateHttpMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "UpdateHttpMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePingMonitor method", async function() {
    if (!(await tsclient.isApiEnabled("healthchecks", "UpdatePingMonitor"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "healthchecks",
      "HealthChecks",
      "UpdatePingMonitor"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const healthchecksClient = new healthchecks.HealthChecksClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      healthchecksClient.endpoint = config.endpoint;
    } else {
      healthchecksClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("healthchecks", "UpdatePingMonitor");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await healthchecksClient.updatePingMonitor(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "healthchecks",
          "UpdatePingMonitorRequest",
          data.request,
          "UpdatePingMonitorResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "healthchecks",
            "UpdatePingMonitorRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
