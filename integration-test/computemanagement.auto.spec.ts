/**
 * Auto generated test cases for "Core Services API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import core = require("../lib/core/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test ComputeManagement Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test attachLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("core", "AttachLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "AttachLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "AttachLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.attachLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "AttachLoadBalancerRequest",
          data.request,
          "AttachLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "AttachLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeClusterNetworkCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeClusterNetworkCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ChangeClusterNetworkCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeClusterNetworkCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeClusterNetworkCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeClusterNetworkCompartmentRequest",
          data.request,
          "ChangeClusterNetworkCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeClusterNetworkCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeInstanceConfigurationCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeInstanceConfigurationCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ChangeInstanceConfigurationCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "ChangeInstanceConfigurationCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeInstanceConfigurationCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeInstanceConfigurationCompartmentRequest",
          data.request,
          "ChangeInstanceConfigurationCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeInstanceConfigurationCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeInstancePoolCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ChangeInstancePoolCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ChangeInstancePoolCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ChangeInstancePoolCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.changeInstancePoolCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ChangeInstancePoolCompartmentRequest",
          data.request,
          "ChangeInstancePoolCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ChangeInstancePoolCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "CreateClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateClusterNetworkRequest",
          data.request,
          "CreateClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createInstanceConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateInstanceConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "CreateInstanceConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateInstanceConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createInstanceConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateInstanceConfigurationRequest",
          data.request,
          "CreateInstanceConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateInstanceConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "CreateInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "CreateInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "CreateInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.createInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "CreateInstancePoolRequest",
          data.request,
          "CreateInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "CreateInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteInstanceConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DeleteInstanceConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "DeleteInstanceConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DeleteInstanceConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.deleteInstanceConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DeleteInstanceConfigurationRequest",
          data.request,
          "DeleteInstanceConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DeleteInstanceConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test detachLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("core", "DetachLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "DetachLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "DetachLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.detachLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "DetachLoadBalancerRequest",
          data.request,
          "DetachLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "DetachLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "GetClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetClusterNetworkRequest",
          data.request,
          "GetClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInstanceConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInstanceConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "GetInstanceConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetInstanceConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInstanceConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInstanceConfigurationRequest",
          data.request,
          "GetInstanceConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInstanceConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "GetInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "GetInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInstancePoolRequest",
          data.request,
          "GetInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getInstancePoolLoadBalancerAttachment method", async function() {
    if (!(await tsclient.isApiEnabled("core", "GetInstancePoolLoadBalancerAttachment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "GetInstancePoolLoadBalancerAttachment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "core",
      "GetInstancePoolLoadBalancerAttachment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.getInstancePoolLoadBalancerAttachment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "GetInstancePoolLoadBalancerAttachmentRequest",
          data.request,
          "GetInstancePoolLoadBalancerAttachmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "GetInstancePoolLoadBalancerAttachmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test launchInstanceConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("core", "LaunchInstanceConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "LaunchInstanceConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "LaunchInstanceConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.launchInstanceConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "LaunchInstanceConfigurationRequest",
          data.request,
          "LaunchInstanceConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "LaunchInstanceConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listClusterNetworkInstances method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListClusterNetworkInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ListClusterNetworkInstances"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListClusterNetworkInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listClusterNetworkInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListClusterNetworkInstancesRequest",
          data.request,
          "ListClusterNetworkInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListClusterNetworkInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listClusterNetworks method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListClusterNetworks"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ListClusterNetworks"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListClusterNetworks");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listClusterNetworks(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListClusterNetworksRequest",
          data.request,
          "ListClusterNetworksResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListClusterNetworksRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstanceConfigurations method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstanceConfigurations"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ListInstanceConfigurations"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstanceConfigurations");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstanceConfigurations(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstanceConfigurationsRequest",
          data.request,
          "ListInstanceConfigurationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstanceConfigurationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstancePoolInstances method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstancePoolInstances"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ListInstancePoolInstances"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstancePoolInstances");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstancePoolInstances(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstancePoolInstancesRequest",
          data.request,
          "ListInstancePoolInstancesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstancePoolInstancesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listInstancePools method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ListInstancePools"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ListInstancePools"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ListInstancePools");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.listInstancePools(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ListInstancePoolsRequest",
          data.request,
          "ListInstancePoolsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ListInstancePoolsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test resetInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "ResetInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "ResetInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "ResetInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.resetInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "ResetInstancePoolRequest",
          data.request,
          "ResetInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "ResetInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test softresetInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "SoftresetInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "SoftresetInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "SoftresetInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.softresetInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "SoftresetInstancePoolRequest",
          data.request,
          "SoftresetInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "SoftresetInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test startInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "StartInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "StartInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "StartInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.startInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "StartInstancePoolRequest",
          data.request,
          "StartInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "StartInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test stopInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "StopInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "StopInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "StopInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.stopInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "StopInstancePoolRequest",
          data.request,
          "StopInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "StopInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("core", "TerminateClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "TerminateClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "TerminateClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.terminateClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "TerminateClusterNetworkRequest",
          data.request,
          "TerminateClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "TerminateClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test terminateInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "TerminateInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "TerminateInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "TerminateInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.terminateInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "TerminateInstancePoolRequest",
          data.request,
          "TerminateInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "TerminateInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateClusterNetwork method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateClusterNetwork"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "UpdateClusterNetwork"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateClusterNetwork");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateClusterNetwork(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateClusterNetworkRequest",
          data.request,
          "UpdateClusterNetworkResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateClusterNetworkRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateInstanceConfiguration method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateInstanceConfiguration"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "UpdateInstanceConfiguration"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateInstanceConfiguration");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateInstanceConfiguration(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateInstanceConfigurationRequest",
          data.request,
          "UpdateInstanceConfigurationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateInstanceConfigurationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateInstancePool method", async function() {
    if (!(await tsclient.isApiEnabled("core", "UpdateInstancePool"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "core",
      "ComputeManagement",
      "UpdateInstancePool"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const coreClient = new core.ComputeManagementClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      coreClient.endpoint = config.endpoint;
    } else {
      coreClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("core", "UpdateInstancePool");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await coreClient.updateInstancePool(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "core",
          "UpdateInstancePoolRequest",
          data.request,
          "UpdateInstancePoolResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "core",
            "UpdateInstancePoolRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
