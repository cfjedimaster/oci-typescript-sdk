/**
 * Auto generated test cases for "Support Management API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import cims = require("../lib/cims/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Incident Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test createIncident method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "CreateIncident"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "CreateIncident");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "CreateIncident");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.createIncident(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "CreateIncidentRequest",
          data.request,
          "CreateIncidentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "CreateIncidentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIncident method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "GetIncident"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "GetIncident");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "GetIncident");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.getIncident(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "GetIncidentRequest",
          data.request,
          "GetIncidentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "GetIncidentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getStatus method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "GetStatus"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "GetStatus");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "GetStatus");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.getStatus(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "GetStatusRequest",
          data.request,
          "GetStatusResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "GetStatusRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIncidentResourceTypes method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "ListIncidentResourceTypes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "cims",
      "Incident",
      "ListIncidentResourceTypes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "ListIncidentResourceTypes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.listIncidentResourceTypes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "ListIncidentResourceTypesRequest",
          data.request,
          "ListIncidentResourceTypesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "ListIncidentResourceTypesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIncidents method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "ListIncidents"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "ListIncidents");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "ListIncidents");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.listIncidents(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "ListIncidentsRequest",
          data.request,
          "ListIncidentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "ListIncidentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIncident method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "UpdateIncident"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "UpdateIncident");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "UpdateIncident");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.updateIncident(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "UpdateIncidentRequest",
          data.request,
          "UpdateIncidentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "UpdateIncidentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test validateUser method", async function() {
    if (!(await tsclient.isApiEnabled("cims", "ValidateUser"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("cims", "Incident", "ValidateUser");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const cimsClient = new cims.IncidentClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      cimsClient.endpoint = config.endpoint;
    } else {
      cimsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("cims", "ValidateUser");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await cimsClient.validateUser(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "cims",
          "ValidateUserRequest",
          data.request,
          "ValidateUserResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "cims",
            "ValidateUserRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
