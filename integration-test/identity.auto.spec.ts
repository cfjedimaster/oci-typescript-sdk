/**
 * Auto generated test cases for "Identity and Access Management Service API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import identity = require("../lib/identity/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test Identity Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test activateMfaTotpDevice method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ActivateMfaTotpDevice"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ActivateMfaTotpDevice"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ActivateMfaTotpDevice");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.activateMfaTotpDevice(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ActivateMfaTotpDeviceRequest",
          data.request,
          "ActivateMfaTotpDeviceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ActivateMfaTotpDeviceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test addUserToGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "AddUserToGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "AddUserToGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "AddUserToGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.addUserToGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "AddUserToGroupRequest",
          data.request,
          "AddUserToGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "AddUserToGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test assembleEffectiveTagSet method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "AssembleEffectiveTagSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "AssembleEffectiveTagSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "AssembleEffectiveTagSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.assembleEffectiveTagSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "AssembleEffectiveTagSetRequest",
          data.request,
          "AssembleEffectiveTagSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "AssembleEffectiveTagSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test changeTagNamespaceCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ChangeTagNamespaceCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ChangeTagNamespaceCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ChangeTagNamespaceCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.changeTagNamespaceCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ChangeTagNamespaceCompartmentRequest",
          data.request,
          "ChangeTagNamespaceCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ChangeTagNamespaceCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createAuthToken method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateAuthToken"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreateAuthToken");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateAuthToken");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createAuthToken(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateAuthTokenRequest",
          data.request,
          "CreateAuthTokenResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateAuthTokenRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateCompartmentRequest",
          data.request,
          "CreateCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCustomerSecretKey method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateCustomerSecretKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateCustomerSecretKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateCustomerSecretKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createCustomerSecretKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateCustomerSecretKeyRequest",
          data.request,
          "CreateCustomerSecretKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateCustomerSecretKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createDynamicGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateDynamicGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateDynamicGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateDynamicGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createDynamicGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateDynamicGroupRequest",
          data.request,
          "CreateDynamicGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateDynamicGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreateGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateGroupRequest",
          data.request,
          "CreateGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createIdentityProvider method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateIdentityProvider"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateIdentityProvider"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateIdentityProvider");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createIdentityProvider(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateIdentityProviderRequest",
          data.request,
          "CreateIdentityProviderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateIdentityProviderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createIdpGroupMapping method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateIdpGroupMapping"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateIdpGroupMapping"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateIdpGroupMapping");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createIdpGroupMapping(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateIdpGroupMappingRequest",
          data.request,
          "CreateIdpGroupMappingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateIdpGroupMappingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createMfaTotpDevice method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateMfaTotpDevice"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateMfaTotpDevice"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateMfaTotpDevice");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createMfaTotpDevice(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateMfaTotpDeviceRequest",
          data.request,
          "CreateMfaTotpDeviceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateMfaTotpDeviceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createNetworkSource method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateNetworkSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateNetworkSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateNetworkSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createNetworkSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateNetworkSourceRequest",
          data.request,
          "CreateNetworkSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateNetworkSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createOAuthClientCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateOAuthClientCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateOAuthClientCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateOAuthClientCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createOAuthClientCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateOAuthClientCredentialRequest",
          data.request,
          "CreateOAuthClientCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateOAuthClientCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createOrResetUIPassword method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateOrResetUIPassword"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateOrResetUIPassword"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateOrResetUIPassword");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createOrResetUIPassword(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateOrResetUIPasswordRequest",
          data.request,
          "CreateOrResetUIPasswordResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateOrResetUIPasswordRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreatePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreatePolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreatePolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreatePolicyRequest",
          data.request,
          "CreatePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreatePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRegionSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateRegionSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateRegionSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateRegionSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createRegionSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateRegionSubscriptionRequest",
          data.request,
          "CreateRegionSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateRegionSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSmtpCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateSmtpCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateSmtpCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateSmtpCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createSmtpCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateSmtpCredentialRequest",
          data.request,
          "CreateSmtpCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateSmtpCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSwiftPassword method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateSwiftPassword"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateSwiftPassword"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateSwiftPassword");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createSwiftPassword(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateSwiftPasswordRequest",
          data.request,
          "CreateSwiftPasswordResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateSwiftPasswordRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTag method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreateTag");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateTagRequest",
          data.request,
          "CreateTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTagDefault method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateTagDefault"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreateTagDefault");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateTagDefault");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createTagDefault(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateTagDefaultRequest",
          data.request,
          "CreateTagDefaultResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateTagDefaultRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createTagNamespace method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateTagNamespace"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "CreateTagNamespace"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateTagNamespace");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createTagNamespace(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateTagNamespaceRequest",
          data.request,
          "CreateTagNamespaceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateTagNamespaceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createUser method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "CreateUser"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "CreateUser");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "CreateUser");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.createUser(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "CreateUserRequest",
          data.request,
          "CreateUserResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "CreateUserRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteApiKey method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteApiKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteApiKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteApiKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteApiKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteApiKeyRequest",
          data.request,
          "DeleteApiKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteApiKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteAuthToken method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteAuthToken"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteAuthToken");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteAuthToken");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteAuthToken(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteAuthTokenRequest",
          data.request,
          "DeleteAuthTokenResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteAuthTokenRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteCompartmentRequest",
          data.request,
          "DeleteCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCustomerSecretKey method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteCustomerSecretKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteCustomerSecretKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteCustomerSecretKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteCustomerSecretKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteCustomerSecretKeyRequest",
          data.request,
          "DeleteCustomerSecretKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteCustomerSecretKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteDynamicGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteDynamicGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteDynamicGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteDynamicGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteDynamicGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteDynamicGroupRequest",
          data.request,
          "DeleteDynamicGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteDynamicGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteGroupRequest",
          data.request,
          "DeleteGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteIdentityProvider method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteIdentityProvider"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteIdentityProvider"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteIdentityProvider");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteIdentityProvider(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteIdentityProviderRequest",
          data.request,
          "DeleteIdentityProviderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteIdentityProviderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteIdpGroupMapping method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteIdpGroupMapping"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteIdpGroupMapping"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteIdpGroupMapping");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteIdpGroupMapping(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteIdpGroupMappingRequest",
          data.request,
          "DeleteIdpGroupMappingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteIdpGroupMappingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteMfaTotpDevice method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteMfaTotpDevice"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteMfaTotpDevice"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteMfaTotpDevice");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteMfaTotpDevice(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteMfaTotpDeviceRequest",
          data.request,
          "DeleteMfaTotpDeviceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteMfaTotpDeviceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteNetworkSource method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteNetworkSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteNetworkSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteNetworkSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteNetworkSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteNetworkSourceRequest",
          data.request,
          "DeleteNetworkSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteNetworkSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteOAuthClientCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteOAuthClientCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteOAuthClientCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteOAuthClientCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteOAuthClientCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteOAuthClientCredentialRequest",
          data.request,
          "DeleteOAuthClientCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteOAuthClientCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeletePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeletePolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeletePolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deletePolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeletePolicyRequest",
          data.request,
          "DeletePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeletePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSmtpCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteSmtpCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteSmtpCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteSmtpCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteSmtpCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteSmtpCredentialRequest",
          data.request,
          "DeleteSmtpCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteSmtpCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSwiftPassword method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteSwiftPassword"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteSwiftPassword"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteSwiftPassword");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteSwiftPassword(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteSwiftPasswordRequest",
          data.request,
          "DeleteSwiftPasswordResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteSwiftPasswordRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTag method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteTag");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteTagRequest",
          data.request,
          "DeleteTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTagDefault method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteTagDefault"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteTagDefault");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteTagDefault");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteTagDefault(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteTagDefaultRequest",
          data.request,
          "DeleteTagDefaultResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteTagDefaultRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteTagNamespace method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteTagNamespace"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "DeleteTagNamespace"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteTagNamespace");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteTagNamespace(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteTagNamespaceRequest",
          data.request,
          "DeleteTagNamespaceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteTagNamespaceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteUser method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "DeleteUser"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "DeleteUser");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "DeleteUser");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.deleteUser(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "DeleteUserRequest",
          data.request,
          "DeleteUserResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "DeleteUserRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test generateTotpSeed method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GenerateTotpSeed"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GenerateTotpSeed");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GenerateTotpSeed");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.generateTotpSeed(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GenerateTotpSeedRequest",
          data.request,
          "GenerateTotpSeedResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GenerateTotpSeedRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getAuthenticationPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetAuthenticationPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetAuthenticationPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetAuthenticationPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getAuthenticationPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetAuthenticationPolicyRequest",
          data.request,
          "GetAuthenticationPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetAuthenticationPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetCompartment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetCompartmentRequest",
          data.request,
          "GetCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getDynamicGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetDynamicGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetDynamicGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetDynamicGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getDynamicGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetDynamicGroupRequest",
          data.request,
          "GetDynamicGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetDynamicGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetGroupRequest",
          data.request,
          "GetGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIdentityProvider method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetIdentityProvider"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetIdentityProvider"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetIdentityProvider");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getIdentityProvider(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetIdentityProviderRequest",
          data.request,
          "GetIdentityProviderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetIdentityProviderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getIdpGroupMapping method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetIdpGroupMapping"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetIdpGroupMapping"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetIdpGroupMapping");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getIdpGroupMapping(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetIdpGroupMappingRequest",
          data.request,
          "GetIdpGroupMappingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetIdpGroupMappingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getMfaTotpDevice method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetMfaTotpDevice"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetMfaTotpDevice");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetMfaTotpDevice");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getMfaTotpDevice(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetMfaTotpDeviceRequest",
          data.request,
          "GetMfaTotpDeviceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetMfaTotpDeviceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getNetworkSource method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetNetworkSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetNetworkSource");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetNetworkSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getNetworkSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetNetworkSourceRequest",
          data.request,
          "GetNetworkSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetNetworkSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetPolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetPolicyRequest",
          data.request,
          "GetPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTag method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetTag");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetTagRequest",
          data.request,
          "GetTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTagDefault method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetTagDefault"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetTagDefault");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetTagDefault");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getTagDefault(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetTagDefaultRequest",
          data.request,
          "GetTagDefaultResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetTagDefaultRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTagNamespace method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetTagNamespace"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetTagNamespace");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetTagNamespace");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getTagNamespace(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetTagNamespaceRequest",
          data.request,
          "GetTagNamespaceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetTagNamespaceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTaggingWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetTaggingWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetTaggingWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetTaggingWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getTaggingWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetTaggingWorkRequestRequest",
          data.request,
          "GetTaggingWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetTaggingWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getTenancy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetTenancy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetTenancy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetTenancy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getTenancy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetTenancyRequest",
          data.request,
          "GetTenancyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetTenancyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getUser method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetUser"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetUser");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetUser");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getUser(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetUserRequest",
          data.request,
          "GetUserResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetUserRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getUserGroupMembership method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetUserGroupMembership"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetUserGroupMembership"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetUserGroupMembership");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getUserGroupMembership(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetUserGroupMembershipRequest",
          data.request,
          "GetUserGroupMembershipResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetUserGroupMembershipRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getUserUIPasswordInformation method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetUserUIPasswordInformation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "GetUserUIPasswordInformation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetUserUIPasswordInformation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getUserUIPasswordInformation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetUserUIPasswordInformationRequest",
          data.request,
          "GetUserUIPasswordInformationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetUserUIPasswordInformationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "GetWorkRequest");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listApiKeys method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListApiKeys"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListApiKeys");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListApiKeys");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listApiKeys(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListApiKeysRequest",
          data.request,
          "ListApiKeysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListApiKeysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAuthTokens method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListAuthTokens"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListAuthTokens");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListAuthTokens");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listAuthTokens(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListAuthTokensRequest",
          data.request,
          "ListAuthTokensResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListAuthTokensRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listAvailabilityDomains method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListAvailabilityDomains"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListAvailabilityDomains"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListAvailabilityDomains");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listAvailabilityDomains(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListAvailabilityDomainsRequest",
          data.request,
          "ListAvailabilityDomainsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListAvailabilityDomainsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCompartments method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListCompartments"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListCompartments");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListCompartments");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listCompartments(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListCompartmentsRequest",
          data.request,
          "ListCompartmentsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListCompartmentsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCostTrackingTags method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListCostTrackingTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListCostTrackingTags"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListCostTrackingTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listCostTrackingTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListCostTrackingTagsRequest",
          data.request,
          "ListCostTrackingTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListCostTrackingTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCustomerSecretKeys method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListCustomerSecretKeys"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListCustomerSecretKeys"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListCustomerSecretKeys");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listCustomerSecretKeys(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListCustomerSecretKeysRequest",
          data.request,
          "ListCustomerSecretKeysResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListCustomerSecretKeysRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listDynamicGroups method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListDynamicGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListDynamicGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListDynamicGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listDynamicGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListDynamicGroupsRequest",
          data.request,
          "ListDynamicGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListDynamicGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listFaultDomains method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListFaultDomains"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListFaultDomains");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListFaultDomains");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listFaultDomains(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListFaultDomainsRequest",
          data.request,
          "ListFaultDomainsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListFaultDomainsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listGroups method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListGroups");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListGroupsRequest",
          data.request,
          "ListGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIdentityProviderGroups method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListIdentityProviderGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListIdentityProviderGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListIdentityProviderGroups");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listIdentityProviderGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListIdentityProviderGroupsRequest",
          data.request,
          "ListIdentityProviderGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListIdentityProviderGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIdentityProviders method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListIdentityProviders"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListIdentityProviders"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListIdentityProviders");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listIdentityProviders(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListIdentityProvidersRequest",
          data.request,
          "ListIdentityProvidersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListIdentityProvidersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listIdpGroupMappings method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListIdpGroupMappings"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListIdpGroupMappings"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListIdpGroupMappings");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listIdpGroupMappings(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListIdpGroupMappingsRequest",
          data.request,
          "ListIdpGroupMappingsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListIdpGroupMappingsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listMfaTotpDevices method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListMfaTotpDevices"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListMfaTotpDevices"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListMfaTotpDevices");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listMfaTotpDevices(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListMfaTotpDevicesRequest",
          data.request,
          "ListMfaTotpDevicesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListMfaTotpDevicesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listNetworkSources method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListNetworkSources"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListNetworkSources"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListNetworkSources");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listNetworkSources(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListNetworkSourcesRequest",
          data.request,
          "ListNetworkSourcesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListNetworkSourcesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listOAuthClientCredentials method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListOAuthClientCredentials"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListOAuthClientCredentials"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListOAuthClientCredentials");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listOAuthClientCredentials(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListOAuthClientCredentialsRequest",
          data.request,
          "ListOAuthClientCredentialsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListOAuthClientCredentialsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListPolicies");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListPoliciesRequest",
          data.request,
          "ListPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRegionSubscriptions method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListRegionSubscriptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListRegionSubscriptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListRegionSubscriptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listRegionSubscriptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListRegionSubscriptionsRequest",
          data.request,
          "ListRegionSubscriptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListRegionSubscriptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRegions method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListRegions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListRegions");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListRegions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listRegions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListRegionsRequest",
          data.request,
          "ListRegionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListRegionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSmtpCredentials method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListSmtpCredentials"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListSmtpCredentials"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListSmtpCredentials");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listSmtpCredentials(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListSmtpCredentialsRequest",
          data.request,
          "ListSmtpCredentialsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListSmtpCredentialsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSwiftPasswords method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListSwiftPasswords"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListSwiftPasswords"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListSwiftPasswords");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listSwiftPasswords(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListSwiftPasswordsRequest",
          data.request,
          "ListSwiftPasswordsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListSwiftPasswordsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTagDefaults method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTagDefaults"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListTagDefaults");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTagDefaults");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTagDefaults(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTagDefaultsRequest",
          data.request,
          "ListTagDefaultsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTagDefaultsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTagNamespaces method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTagNamespaces"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListTagNamespaces"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTagNamespaces");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTagNamespaces(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTagNamespacesRequest",
          data.request,
          "ListTagNamespacesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTagNamespacesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTaggingWorkRequestErrors method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTaggingWorkRequestErrors"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListTaggingWorkRequestErrors"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTaggingWorkRequestErrors");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTaggingWorkRequestErrors(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTaggingWorkRequestErrorsRequest",
          data.request,
          "ListTaggingWorkRequestErrorsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTaggingWorkRequestErrorsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTaggingWorkRequestLogs method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTaggingWorkRequestLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListTaggingWorkRequestLogs"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTaggingWorkRequestLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTaggingWorkRequestLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTaggingWorkRequestLogsRequest",
          data.request,
          "ListTaggingWorkRequestLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTaggingWorkRequestLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTaggingWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTaggingWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListTaggingWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTaggingWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTaggingWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTaggingWorkRequestsRequest",
          data.request,
          "ListTaggingWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTaggingWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listTags method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListTags"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListTags");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListTags");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listTags(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListTagsRequest",
          data.request,
          "ListTagsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListTagsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listUserGroupMemberships method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListUserGroupMemberships"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ListUserGroupMemberships"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListUserGroupMemberships");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listUserGroupMemberships(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListUserGroupMembershipsRequest",
          data.request,
          "ListUserGroupMembershipsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListUserGroupMembershipsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listUsers method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListUsers"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListUsers");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListUsers");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listUsers(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListUsersRequest",
          data.request,
          "ListUsersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListUsersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "ListWorkRequests");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test moveCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "MoveCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "MoveCompartment");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "MoveCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.moveCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "MoveCompartmentRequest",
          data.request,
          "MoveCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "MoveCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test recoverCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "RecoverCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "RecoverCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "RecoverCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.recoverCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "RecoverCompartmentRequest",
          data.request,
          "RecoverCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "RecoverCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test removeUserFromGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "RemoveUserFromGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "RemoveUserFromGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "RemoveUserFromGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.removeUserFromGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "RemoveUserFromGroupRequest",
          data.request,
          "RemoveUserFromGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "RemoveUserFromGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test resetIdpScimClient method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "ResetIdpScimClient"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "ResetIdpScimClient"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "ResetIdpScimClient");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.resetIdpScimClient(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "ResetIdpScimClientRequest",
          data.request,
          "ResetIdpScimClientResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "ResetIdpScimClientRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAuthToken method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateAuthToken"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateAuthToken");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateAuthToken");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateAuthToken(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateAuthTokenRequest",
          data.request,
          "UpdateAuthTokenResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateAuthTokenRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateAuthenticationPolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateAuthenticationPolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateAuthenticationPolicy"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateAuthenticationPolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateAuthenticationPolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateAuthenticationPolicyRequest",
          data.request,
          "UpdateAuthenticationPolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateAuthenticationPolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateCompartmentRequest",
          data.request,
          "UpdateCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateCustomerSecretKey method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateCustomerSecretKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateCustomerSecretKey"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateCustomerSecretKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateCustomerSecretKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateCustomerSecretKeyRequest",
          data.request,
          "UpdateCustomerSecretKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateCustomerSecretKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateDynamicGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateDynamicGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateDynamicGroup"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateDynamicGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateDynamicGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateDynamicGroupRequest",
          data.request,
          "UpdateDynamicGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateDynamicGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateGroup method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateGroup"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateGroup");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateGroup");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateGroup(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateGroupRequest",
          data.request,
          "UpdateGroupResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateGroupRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIdentityProvider method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateIdentityProvider"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateIdentityProvider"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateIdentityProvider");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateIdentityProvider(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateIdentityProviderRequest",
          data.request,
          "UpdateIdentityProviderResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateIdentityProviderRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateIdpGroupMapping method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateIdpGroupMapping"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateIdpGroupMapping"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateIdpGroupMapping");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateIdpGroupMapping(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateIdpGroupMappingRequest",
          data.request,
          "UpdateIdpGroupMappingResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateIdpGroupMappingRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNetworkSource method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateNetworkSource"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateNetworkSource"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateNetworkSource");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateNetworkSource(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateNetworkSourceRequest",
          data.request,
          "UpdateNetworkSourceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateNetworkSourceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateOAuthClientCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateOAuthClientCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateOAuthClientCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateOAuthClientCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateOAuthClientCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateOAuthClientCredentialRequest",
          data.request,
          "UpdateOAuthClientCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateOAuthClientCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePolicy method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdatePolicy"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdatePolicy");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdatePolicy");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updatePolicy(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdatePolicyRequest",
          data.request,
          "UpdatePolicyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdatePolicyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSmtpCredential method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateSmtpCredential"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateSmtpCredential"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateSmtpCredential");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateSmtpCredential(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateSmtpCredentialRequest",
          data.request,
          "UpdateSmtpCredentialResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateSmtpCredentialRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSwiftPassword method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateSwiftPassword"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateSwiftPassword"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateSwiftPassword");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateSwiftPassword(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateSwiftPasswordRequest",
          data.request,
          "UpdateSwiftPasswordResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateSwiftPasswordRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTag method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateTag"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateTag");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateTag");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateTag(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateTagRequest",
          data.request,
          "UpdateTagResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateTagRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTagDefault method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateTagDefault"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateTagDefault");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateTagDefault");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateTagDefault(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateTagDefaultRequest",
          data.request,
          "UpdateTagDefaultResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateTagDefaultRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateTagNamespace method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateTagNamespace"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateTagNamespace"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateTagNamespace");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateTagNamespace(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateTagNamespaceRequest",
          data.request,
          "UpdateTagNamespaceResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateTagNamespaceRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateUser method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateUser"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateUser");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateUser");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateUser(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateUserRequest",
          data.request,
          "UpdateUserResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateUserRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateUserCapabilities method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateUserCapabilities"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "identity",
      "Identity",
      "UpdateUserCapabilities"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateUserCapabilities");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateUserCapabilities(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateUserCapabilitiesRequest",
          data.request,
          "UpdateUserCapabilitiesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateUserCapabilitiesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateUserState method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UpdateUserState"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UpdateUserState");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UpdateUserState");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.updateUserState(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UpdateUserStateRequest",
          data.request,
          "UpdateUserStateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UpdateUserStateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test uploadApiKey method", async function() {
    if (!(await tsclient.isApiEnabled("identity", "UploadApiKey"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("identity", "Identity", "UploadApiKey");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const identityClient = new identity.IdentityClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      identityClient.endpoint = config.endpoint;
    } else {
      identityClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("identity", "UploadApiKey");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await identityClient.uploadApiKey(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "identity",
          "UploadApiKeyRequest",
          data.request,
          "UploadApiKeyResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "identity",
            "UploadApiKeyRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
