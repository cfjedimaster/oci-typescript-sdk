/**
 * Auto generated test cases for "Notifications API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import ons = require("../lib/ons/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test NotificationDataPlane Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeSubscriptionCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "ChangeSubscriptionCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "ChangeSubscriptionCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "ChangeSubscriptionCompartment");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.changeSubscriptionCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "ChangeSubscriptionCompartmentRequest",
          data.request,
          "ChangeSubscriptionCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "ChangeSubscriptionCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "CreateSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "CreateSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "CreateSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.createSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "CreateSubscriptionRequest",
          data.request,
          "CreateSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "CreateSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "DeleteSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "DeleteSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "DeleteSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.deleteSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "DeleteSubscriptionRequest",
          data.request,
          "DeleteSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "DeleteSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getConfirmSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "GetConfirmSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "GetConfirmSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "GetConfirmSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.getConfirmSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "GetConfirmSubscriptionRequest",
          data.request,
          "GetConfirmSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "GetConfirmSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "GetSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "GetSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "GetSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.getSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "GetSubscriptionRequest",
          data.request,
          "GetSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "GetSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getUnsubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "GetUnsubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "GetUnsubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "GetUnsubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.getUnsubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "GetUnsubscriptionRequest",
          data.request,
          "GetUnsubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "GetUnsubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listSubscriptions method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "ListSubscriptions"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "ListSubscriptions"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "ListSubscriptions");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.listSubscriptions(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "ListSubscriptionsRequest",
          data.request,
          "ListSubscriptionsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "ListSubscriptionsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test publishMessage method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "PublishMessage"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "PublishMessage"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "PublishMessage");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.publishMessage(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "PublishMessageRequest",
          data.request,
          "PublishMessageResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "PublishMessageRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test resendSubscriptionConfirmation method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "ResendSubscriptionConfirmation"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "ResendSubscriptionConfirmation"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "ResendSubscriptionConfirmation");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.resendSubscriptionConfirmation(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "ResendSubscriptionConfirmationRequest",
          data.request,
          "ResendSubscriptionConfirmationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "ResendSubscriptionConfirmationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateSubscription method", async function() {
    if (!(await tsclient.isApiEnabled("ons", "UpdateSubscription"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "ons",
      "NotificationDataPlane",
      "UpdateSubscription"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const onsClient = new ons.NotificationDataPlaneClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      onsClient.endpoint = config.endpoint;
    } else {
      onsClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("ons", "UpdateSubscription");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await onsClient.updateSubscription(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "ons",
          "UpdateSubscriptionRequest",
          data.request,
          "UpdateSubscriptionResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "ons",
            "UpdateSubscriptionRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
