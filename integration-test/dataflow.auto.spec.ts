/**
 * Auto generated test cases for "Data Flow API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import dataflow = require("../lib/dataflow/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test DataFlow Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test createApplication method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "CreateApplication"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dataflow",
      "DataFlow",
      "CreateApplication"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "CreateApplication");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.createApplication(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "CreateApplicationRequest",
          data.request,
          "CreateApplicationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "CreateApplicationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRun method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "CreateRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "CreateRun");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "CreateRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.createRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "CreateRunRequest",
          data.request,
          "CreateRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "CreateRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteApplication method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "DeleteApplication"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dataflow",
      "DataFlow",
      "DeleteApplication"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "DeleteApplication");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.deleteApplication(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "DeleteApplicationRequest",
          data.request,
          "DeleteApplicationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "DeleteApplicationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRun method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "DeleteRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "DeleteRun");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "DeleteRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.deleteRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "DeleteRunRequest",
          data.request,
          "DeleteRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "DeleteRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getApplication method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "GetApplication"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "GetApplication");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "GetApplication");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.getApplication(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "GetApplicationRequest",
          data.request,
          "GetApplicationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "GetApplicationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRun method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "GetRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "GetRun");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "GetRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.getRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "GetRunRequest",
          data.request,
          "GetRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "GetRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRunLog method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "GetRunLog"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "GetRunLog");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "GetRunLog");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.getRunLog(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "GetRunLogRequest",
          data.request,
          "GetRunLogResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "GetRunLogRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listApplications method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "ListApplications"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "ListApplications");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "ListApplications");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.listApplications(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "ListApplicationsRequest",
          data.request,
          "ListApplicationsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "ListApplicationsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRunLogs method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "ListRunLogs"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "ListRunLogs");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "ListRunLogs");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.listRunLogs(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "ListRunLogsRequest",
          data.request,
          "ListRunLogsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "ListRunLogsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRuns method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "ListRuns"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "ListRuns");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "ListRuns");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.listRuns(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "ListRunsRequest",
          data.request,
          "ListRunsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "ListRunsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateApplication method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "UpdateApplication"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "dataflow",
      "DataFlow",
      "UpdateApplication"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "UpdateApplication");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.updateApplication(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "UpdateApplicationRequest",
          data.request,
          "UpdateApplicationResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "UpdateApplicationRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRun method", async function() {
    if (!(await tsclient.isApiEnabled("dataflow", "UpdateRun"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig("dataflow", "DataFlow", "UpdateRun");

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const dataflowClient = new dataflow.DataFlowClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      dataflowClient.endpoint = config.endpoint;
    } else {
      dataflowClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("dataflow", "UpdateRun");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await dataflowClient.updateRun(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "dataflow",
          "UpdateRunRequest",
          data.request,
          "UpdateRunResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "dataflow",
            "UpdateRunRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
