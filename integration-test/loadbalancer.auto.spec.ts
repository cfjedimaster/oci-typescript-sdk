/**
 * Auto generated test cases for "Load Balancing API"
 *
 * NOTE: This class is auto generated by OracleSDKTestGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import loadbalancer = require("../lib/loadbalancer/");
import TestingServiceClient = require("./testing-service-client");

import { expect } from "chai";
import common = require("oci-common");

describe("Test LoadBalancer Api", () => {
  let tsclient: TestingServiceClient.TestingServiceClient;

  before(() => {
    tsclient = new TestingServiceClient.TestingServiceClient();
    return tsclient.startSession();
  });

  after(() => {
    return tsclient.endSession();
  });

  it("Test changeLoadBalancerCompartment method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ChangeLoadBalancerCompartment"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ChangeLoadBalancerCompartment"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "loadbalancer",
      "ChangeLoadBalancerCompartment"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.changeLoadBalancerCompartment(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ChangeLoadBalancerCompartmentRequest",
          data.request,
          "ChangeLoadBalancerCompartmentResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ChangeLoadBalancerCompartmentRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBackend method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateBackend"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateBackend"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateBackend");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createBackend(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateBackendRequest",
          data.request,
          "CreateBackendResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateBackendRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createBackendSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateBackendSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateBackendSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateBackendSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createBackendSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateBackendSetRequest",
          data.request,
          "CreateBackendSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateBackendSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateCertificate"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateCertificateRequest",
          data.request,
          "CreateCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createHostname method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateHostname"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateHostname"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateHostname");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createHostname(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateHostnameRequest",
          data.request,
          "CreateHostnameResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateHostnameRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createListener method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateListener"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateListener"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateListener");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createListener(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateListenerRequest",
          data.request,
          "CreateListenerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateListenerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateLoadBalancerRequest",
          data.request,
          "CreateLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createPathRouteSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreatePathRouteSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreatePathRouteSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreatePathRouteSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createPathRouteSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreatePathRouteSetRequest",
          data.request,
          "CreatePathRouteSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreatePathRouteSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test createRuleSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "CreateRuleSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "CreateRuleSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "CreateRuleSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.createRuleSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "CreateRuleSetRequest",
          data.request,
          "CreateRuleSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "CreateRuleSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBackend method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteBackend"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteBackend"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteBackend");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteBackend(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteBackendRequest",
          data.request,
          "DeleteBackendResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteBackendRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteBackendSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteBackendSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteBackendSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteBackendSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteBackendSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteBackendSetRequest",
          data.request,
          "DeleteBackendSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteBackendSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteCertificate method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteCertificate"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteCertificate"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteCertificate");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteCertificate(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteCertificateRequest",
          data.request,
          "DeleteCertificateResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteCertificateRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteHostname method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteHostname"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteHostname"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteHostname");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteHostname(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteHostnameRequest",
          data.request,
          "DeleteHostnameResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteHostnameRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteListener method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteListener"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteListener"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteListener");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteListener(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteListenerRequest",
          data.request,
          "DeleteListenerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteListenerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteLoadBalancerRequest",
          data.request,
          "DeleteLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deletePathRouteSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeletePathRouteSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeletePathRouteSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeletePathRouteSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deletePathRouteSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeletePathRouteSetRequest",
          data.request,
          "DeletePathRouteSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeletePathRouteSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test deleteRuleSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "DeleteRuleSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "DeleteRuleSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "DeleteRuleSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.deleteRuleSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "DeleteRuleSetRequest",
          data.request,
          "DeleteRuleSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "DeleteRuleSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackend method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetBackend"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetBackend"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetBackend");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getBackend(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetBackendRequest",
          data.request,
          "GetBackendResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetBackendRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackendHealth method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetBackendHealth"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetBackendHealth"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetBackendHealth");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getBackendHealth(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetBackendHealthRequest",
          data.request,
          "GetBackendHealthResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetBackendHealthRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackendSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetBackendSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetBackendSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetBackendSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getBackendSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetBackendSetRequest",
          data.request,
          "GetBackendSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetBackendSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getBackendSetHealth method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetBackendSetHealth"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetBackendSetHealth"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetBackendSetHealth");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getBackendSetHealth(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetBackendSetHealthRequest",
          data.request,
          "GetBackendSetHealthResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetBackendSetHealthRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getHealthChecker method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetHealthChecker"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetHealthChecker"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetHealthChecker");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getHealthChecker(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetHealthCheckerRequest",
          data.request,
          "GetHealthCheckerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetHealthCheckerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getHostname method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetHostname"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetHostname"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetHostname");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getHostname(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetHostnameRequest",
          data.request,
          "GetHostnameResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetHostnameRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetLoadBalancerRequest",
          data.request,
          "GetLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getLoadBalancerHealth method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetLoadBalancerHealth"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetLoadBalancerHealth"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetLoadBalancerHealth");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getLoadBalancerHealth(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetLoadBalancerHealthRequest",
          data.request,
          "GetLoadBalancerHealthResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetLoadBalancerHealthRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getPathRouteSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetPathRouteSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetPathRouteSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetPathRouteSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getPathRouteSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetPathRouteSetRequest",
          data.request,
          "GetPathRouteSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetPathRouteSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getRuleSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetRuleSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetRuleSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetRuleSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getRuleSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetRuleSetRequest",
          data.request,
          "GetRuleSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetRuleSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test getWorkRequest method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "GetWorkRequest"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "GetWorkRequest"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "GetWorkRequest");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.getWorkRequest(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "GetWorkRequestRequest",
          data.request,
          "GetWorkRequestResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "GetWorkRequestRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBackendSets method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListBackendSets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListBackendSets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListBackendSets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listBackendSets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListBackendSetsRequest",
          data.request,
          "ListBackendSetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListBackendSetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listBackends method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListBackends"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListBackends"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListBackends");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listBackends(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListBackendsRequest",
          data.request,
          "ListBackendsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListBackendsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listCertificates method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListCertificates"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListCertificates"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListCertificates");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listCertificates(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListCertificatesRequest",
          data.request,
          "ListCertificatesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListCertificatesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listHostnames method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListHostnames"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListHostnames"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListHostnames");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listHostnames(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListHostnamesRequest",
          data.request,
          "ListHostnamesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListHostnamesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listListenerRules method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListListenerRules"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListListenerRules"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListListenerRules");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listListenerRules(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListListenerRulesRequest",
          data.request,
          "ListListenerRulesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListListenerRulesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listLoadBalancerHealths method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListLoadBalancerHealths"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListLoadBalancerHealths"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListLoadBalancerHealths");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listLoadBalancerHealths(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListLoadBalancerHealthsRequest",
          data.request,
          "ListLoadBalancerHealthsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListLoadBalancerHealthsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listLoadBalancers method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListLoadBalancers"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListLoadBalancers"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListLoadBalancers");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listLoadBalancers(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListLoadBalancersRequest",
          data.request,
          "ListLoadBalancersResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListLoadBalancersRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPathRouteSets method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListPathRouteSets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListPathRouteSets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListPathRouteSets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listPathRouteSets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListPathRouteSetsRequest",
          data.request,
          "ListPathRouteSetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListPathRouteSetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listPolicies method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListPolicies"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListPolicies"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListPolicies");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listPolicies(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListPoliciesRequest",
          data.request,
          "ListPoliciesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListPoliciesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listProtocols method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListProtocols"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListProtocols"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListProtocols");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listProtocols(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListProtocolsRequest",
          data.request,
          "ListProtocolsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListProtocolsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listRuleSets method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListRuleSets"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListRuleSets"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListRuleSets");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listRuleSets(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListRuleSetsRequest",
          data.request,
          "ListRuleSetsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListRuleSetsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listShapes method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListShapes"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListShapes"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListShapes");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listShapes(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListShapesRequest",
          data.request,
          "ListShapesResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListShapesRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test listWorkRequests method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "ListWorkRequests"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "ListWorkRequests"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "ListWorkRequests");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.listWorkRequests(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "ListWorkRequestsRequest",
          data.request,
          "ListWorkRequestsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "ListWorkRequestsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBackend method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateBackend"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateBackend"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateBackend");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateBackend(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateBackendRequest",
          data.request,
          "UpdateBackendResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateBackendRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateBackendSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateBackendSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateBackendSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateBackendSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateBackendSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateBackendSetRequest",
          data.request,
          "UpdateBackendSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateBackendSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateHealthChecker method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateHealthChecker"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateHealthChecker"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateHealthChecker");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateHealthChecker(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateHealthCheckerRequest",
          data.request,
          "UpdateHealthCheckerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateHealthCheckerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateHostname method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateHostname"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateHostname"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateHostname");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateHostname(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateHostnameRequest",
          data.request,
          "UpdateHostnameResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateHostnameRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateListener method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateListener"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateListener"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateListener");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateListener(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateListenerRequest",
          data.request,
          "UpdateListenerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateListenerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateLoadBalancer method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateLoadBalancer"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateLoadBalancer"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateLoadBalancer");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateLoadBalancer(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateLoadBalancerRequest",
          data.request,
          "UpdateLoadBalancerResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateLoadBalancerRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateNetworkSecurityGroups method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateNetworkSecurityGroups"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateNetworkSecurityGroups"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests(
      "loadbalancer",
      "UpdateNetworkSecurityGroups"
    );

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateNetworkSecurityGroups(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateNetworkSecurityGroupsRequest",
          data.request,
          "UpdateNetworkSecurityGroupsResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateNetworkSecurityGroupsRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updatePathRouteSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdatePathRouteSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdatePathRouteSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdatePathRouteSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updatePathRouteSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdatePathRouteSetRequest",
          data.request,
          "UpdatePathRouteSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdatePathRouteSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });

  it("Test updateRuleSet method", async function() {
    if (!(await tsclient.isApiEnabled("loadbalancer", "UpdateRuleSet"))) {
      this.skip();
    }

    const config: any = await tsclient.getTestingConfig(
      "loadbalancer",
      "LoadBalancer",
      "UpdateRuleSet"
    );

    const authenticationDetailProvider: common.AuthenticationDetailsProvider = new common.SimpleAuthenticationDetailsProvider(
      config.tenantId,
      config.userId,
      config.fingerprint,
      config.keyFileContent,
      config.passPhrase
    );

    const loadbalancerClient = new loadbalancer.LoadBalancerClient({
      authenticationDetailsProvider: authenticationDetailProvider
    });
    if (config.endpoint) {
      loadbalancerClient.endpoint = config.endpoint;
    } else {
      loadbalancerClient.regionId = config.region;
    }
    const requests: any[] = await tsclient.getRequests("loadbalancer", "UpdateRuleSet");

    for (const data of requests) {
      try {
        console.debug("Request to OCI:", data.request);
        const response = await loadbalancerClient.updateRuleSet(data.request);
        console.debug("Response from OCI:", response);

        const message: string = await tsclient.validateResponse(
          data.containerId,
          "loadbalancer",
          "UpdateRuleSetRequest",
          data.request,
          "UpdateRuleSetResponse",
          response
        );
        expect(message).to.equal("");
      } catch (err) {
        if (err instanceof common.OciError) {
          const message: string = await tsclient.validateError(
            data.containerId,
            "loadbalancer",
            "UpdateRuleSetRequest",
            data.request,
            err
          );
          expect(message).to.equal("");
        } else {
          console.debug(err);
          throw err;
        }
      }
    }
  });
});
