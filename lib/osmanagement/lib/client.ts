/**
 * OSMS
 * OS Management as a Service API definition
 * OpenAPI spec version: 20190801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { OsManagementWaiter } from "./osmanagement-waiter";
import { composeResponse, composeRequest } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OsManagementApiKeys {}

export class OsManagementClient {
  protected static serviceEndpointTemplate = "https://osms.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OsManagementWaiter;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190801";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OsManagementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OsManagementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new OsManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OsManagementWaiter {
    this._waiters = new OsManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OsManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds a given list of Software Packages to a specific Software Source.
   *
   * @param AddPackagesToSoftwareSourceRequest
   * @return AddPackagesToSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async addPackagesToSoftwareSource(
    addPackagesToSoftwareSourceRequest: requests.AddPackagesToSoftwareSourceRequest
  ): Promise<responses.AddPackagesToSoftwareSourceResponse> {
    const pathParams = {
      "{softwareSourceId}": addPackagesToSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": addPackagesToSoftwareSourceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/actions/addPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addPackagesToSoftwareSourceRequest.addPackagesToSoftwareSourceDetails,
        "AddPackagesToSoftwareSourceDetails",
        models.AddPackagesToSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.AddPackagesToSoftwareSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Adds a child software source to a managed instance. After the software
   * source has been added, then packages from that software source can be
   * installed on the managed instance.
   *
   * @param AttachChildSoftwareSourceToManagedInstanceRequest
   * @return AttachChildSoftwareSourceToManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async attachChildSoftwareSourceToManagedInstance(
    attachChildSoftwareSourceToManagedInstanceRequest: requests.AttachChildSoftwareSourceToManagedInstanceRequest
  ): Promise<responses.AttachChildSoftwareSourceToManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": attachChildSoftwareSourceToManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": attachChildSoftwareSourceToManagedInstanceRequest.opcRequestId,
      "opc-retry-token": attachChildSoftwareSourceToManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/attachChildSoftwareSource",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachChildSoftwareSourceToManagedInstanceRequest.attachChildSoftwareSourceToManagedInstanceDetails,
        "AttachChildSoftwareSourceToManagedInstanceDetails",
        models.AttachChildSoftwareSourceToManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachChildSoftwareSourceToManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Adds a Managed Instance to a Managed Instance Group. After the Managed
   * Instance has been added, then operations can be performed on the Managed
   * Instance Group which will then apply to all Managed Instances in the
   * group.
   *
   * @param AttachManagedInstanceToManagedInstanceGroupRequest
   * @return AttachManagedInstanceToManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async attachManagedInstanceToManagedInstanceGroup(
    attachManagedInstanceToManagedInstanceGroupRequest: requests.AttachManagedInstanceToManagedInstanceGroupRequest
  ): Promise<responses.AttachManagedInstanceToManagedInstanceGroupResponse> {
    const pathParams = {
      "{managedInstanceGroupId}":
        attachManagedInstanceToManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {
      "managedInstanceId": attachManagedInstanceToManagedInstanceGroupRequest.managedInstanceId
    };

    let headerParams = {
      "opc-request-id": attachManagedInstanceToManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": attachManagedInstanceToManagedInstanceGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachManagedInstance",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachManagedInstanceToManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Adds a parent software source to a managed instance. After the software
   * source has been added, then packages from that software source can be
   * installed on the managed instance. Software sources that have this
   * software source as a parent will be able to be added to this managed instance.
   *
   * @param AttachParentSoftwareSourceToManagedInstanceRequest
   * @return AttachParentSoftwareSourceToManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async attachParentSoftwareSourceToManagedInstance(
    attachParentSoftwareSourceToManagedInstanceRequest: requests.AttachParentSoftwareSourceToManagedInstanceRequest
  ): Promise<responses.AttachParentSoftwareSourceToManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": attachParentSoftwareSourceToManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": attachParentSoftwareSourceToManagedInstanceRequest.opcRequestId,
      "opc-retry-token": attachParentSoftwareSourceToManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/attachParentSoftwareSource",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachParentSoftwareSourceToManagedInstanceRequest.attachParentSoftwareSourceToManagedInstanceDetails,
        "AttachParentSoftwareSourceToManagedInstanceDetails",
        models.AttachParentSoftwareSourceToManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachParentSoftwareSourceToManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a resource into a different compartment. When provided, If-Match
   * is checked against ETag values of the resource.
   *
   * @param ChangeManagedInstanceGroupCompartmentRequest
   * @return ChangeManagedInstanceGroupCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeManagedInstanceGroupCompartment(
    changeManagedInstanceGroupCompartmentRequest: requests.ChangeManagedInstanceGroupCompartmentRequest
  ): Promise<responses.ChangeManagedInstanceGroupCompartmentResponse> {
    const pathParams = {
      "{managedInstanceGroupId}":
        changeManagedInstanceGroupCompartmentRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": changeManagedInstanceGroupCompartmentRequest.opcRequestId,
      "if-match": changeManagedInstanceGroupCompartmentRequest.ifMatch,
      "opc-retry-token": changeManagedInstanceGroupCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagedInstanceGroupCompartmentRequest.changeManagedInstanceGroupCompartmentDetails,
        "ChangeManagedInstanceGroupCompartmentDetails",
        models.ChangeManagedInstanceGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagedInstanceGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a resource into a different compartment. When provided, If-Match
   * is checked against ETag values of the resource.
   *
   * @param ChangeScheduledJobCompartmentRequest
   * @return ChangeScheduledJobCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeScheduledJobCompartment(
    changeScheduledJobCompartmentRequest: requests.ChangeScheduledJobCompartmentRequest
  ): Promise<responses.ChangeScheduledJobCompartmentResponse> {
    const pathParams = {
      "{scheduledJobId}": changeScheduledJobCompartmentRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": changeScheduledJobCompartmentRequest.opcRequestId,
      "if-match": changeScheduledJobCompartmentRequest.ifMatch,
      "opc-retry-token": changeScheduledJobCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeScheduledJobCompartmentRequest.changeScheduledJobCompartmentDetails,
        "ChangeScheduledJobCompartmentDetails",
        models.ChangeScheduledJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeScheduledJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a resource into a different compartment. When provided, If-Match
   * is checked against ETag values of the resource.
   *
   * @param ChangeSoftwareSourceCompartmentRequest
   * @return ChangeSoftwareSourceCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeSoftwareSourceCompartment(
    changeSoftwareSourceCompartmentRequest: requests.ChangeSoftwareSourceCompartmentRequest
  ): Promise<responses.ChangeSoftwareSourceCompartmentResponse> {
    const pathParams = {
      "{softwareSourceId}": changeSoftwareSourceCompartmentRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": changeSoftwareSourceCompartmentRequest.opcRequestId,
      "if-match": changeSoftwareSourceCompartmentRequest.ifMatch,
      "opc-retry-token": changeSoftwareSourceCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSoftwareSourceCompartmentRequest.changeSoftwareSourceCompartmentDetails,
        "ChangeSoftwareSourceCompartmentDetails",
        models.ChangeSoftwareSourceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSoftwareSourceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new Managed Instance Group on the management system.
   * This will not contain any managed instances after it is first created,
   * and they must be added later.
   *
   * @param CreateManagedInstanceGroupRequest
   * @return CreateManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async createManagedInstanceGroup(
    createManagedInstanceGroupRequest: requests.CreateManagedInstanceGroupRequest
  ): Promise<responses.CreateManagedInstanceGroupResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": createManagedInstanceGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagedInstanceGroupRequest.createManagedInstanceGroupDetails,
        "CreateManagedInstanceGroupDetails",
        models.CreateManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new Scheduled Job to perform a specific package operation on
   * a set of managed instances or managed instance groups.  Can be created
   * as a one-time execution in the future, or as a recurring execution
   * that repeats on a defined interval.
   *
   * @param CreateScheduledJobRequest
   * @return CreateScheduledJobResponse
   * @throws OciError when an error occurs
   */
  public async createScheduledJob(
    createScheduledJobRequest: requests.CreateScheduledJobRequest
  ): Promise<responses.CreateScheduledJobResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createScheduledJobRequest.opcRequestId,
      "opc-retry-token": createScheduledJobRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduledJobRequest.createScheduledJobDetails,
        "CreateScheduledJobDetails",
        models.CreateScheduledJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new custom Software Source on the management system.
   * This will not contain any packages after it is first created,
   * and they must be added later.
   *
   * @param CreateSoftwareSourceRequest
   * @return CreateSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async createSoftwareSource(
    createSoftwareSourceRequest: requests.CreateSoftwareSourceRequest
  ): Promise<responses.CreateSoftwareSourceResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createSoftwareSourceRequest.opcRequestId,
      "opc-retry-token": createSoftwareSourceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSoftwareSourceRequest.createSoftwareSourceDetails,
        "CreateSoftwareSourceDetails",
        models.CreateSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes a Managed Instance Group from the management system
   *
   * @param DeleteManagedInstanceGroupRequest
   * @return DeleteManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async deleteManagedInstanceGroup(
    deleteManagedInstanceGroupRequest: requests.DeleteManagedInstanceGroupRequest
  ): Promise<responses.DeleteManagedInstanceGroupResponse> {
    const pathParams = {
      "{managedInstanceGroupId}": deleteManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteManagedInstanceGroupRequest.opcRequestId,
      "if-match": deleteManagedInstanceGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Cancels an existing Scheduled Job on the management system
   *
   * @param DeleteScheduledJobRequest
   * @return DeleteScheduledJobResponse
   * @throws OciError when an error occurs
   */
  public async deleteScheduledJob(
    deleteScheduledJobRequest: requests.DeleteScheduledJobRequest
  ): Promise<responses.DeleteScheduledJobResponse> {
    const pathParams = {
      "{scheduledJobId}": deleteScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteScheduledJobRequest.opcRequestId,
      "if-match": deleteScheduledJobRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduledJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes a custom Software Source on the management system
   *
   * @param DeleteSoftwareSourceRequest
   * @return DeleteSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async deleteSoftwareSource(
    deleteSoftwareSourceRequest: requests.DeleteSoftwareSourceRequest
  ): Promise<responses.DeleteSoftwareSourceResponse> {
    const pathParams = {
      "{softwareSourceId}": deleteSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteSoftwareSourceRequest.opcRequestId,
      "if-match": deleteSoftwareSourceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSoftwareSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Removes a child software source from a managed instance. Packages will no longer be able to be
   * installed from these software sources.
   *
   * @param DetachChildSoftwareSourceFromManagedInstanceRequest
   * @return DetachChildSoftwareSourceFromManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async detachChildSoftwareSourceFromManagedInstance(
    detachChildSoftwareSourceFromManagedInstanceRequest: requests.DetachChildSoftwareSourceFromManagedInstanceRequest
  ): Promise<responses.DetachChildSoftwareSourceFromManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": detachChildSoftwareSourceFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": detachChildSoftwareSourceFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": detachChildSoftwareSourceFromManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/detachChildSoftwareSource",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachChildSoftwareSourceFromManagedInstanceRequest.detachChildSoftwareSourceFromManagedInstanceDetails,
        "DetachChildSoftwareSourceFromManagedInstanceDetails",
        models.DetachChildSoftwareSourceFromManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachChildSoftwareSourceFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Removes a Managed Instance from a Managed Instance Group.
   *
   * @param DetachManagedInstanceFromManagedInstanceGroupRequest
   * @return DetachManagedInstanceFromManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async detachManagedInstanceFromManagedInstanceGroup(
    detachManagedInstanceFromManagedInstanceGroupRequest: requests.DetachManagedInstanceFromManagedInstanceGroupRequest
  ): Promise<responses.DetachManagedInstanceFromManagedInstanceGroupResponse> {
    const pathParams = {
      "{managedInstanceGroupId}":
        detachManagedInstanceFromManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {
      "managedInstanceId": detachManagedInstanceFromManagedInstanceGroupRequest.managedInstanceId
    };

    let headerParams = {
      "opc-request-id": detachManagedInstanceFromManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": detachManagedInstanceFromManagedInstanceGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachManagedInstance",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachManagedInstanceFromManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Removes a software source from a managed instance. All child software sources will also be removed
   * from the managed instance. Packages will no longer be able to be installed from these software sources.
   *
   * @param DetachParentSoftwareSourceFromManagedInstanceRequest
   * @return DetachParentSoftwareSourceFromManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async detachParentSoftwareSourceFromManagedInstance(
    detachParentSoftwareSourceFromManagedInstanceRequest: requests.DetachParentSoftwareSourceFromManagedInstanceRequest
  ): Promise<responses.DetachParentSoftwareSourceFromManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": detachParentSoftwareSourceFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": detachParentSoftwareSourceFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": detachParentSoftwareSourceFromManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/detachParentSoftwareSource",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachParentSoftwareSourceFromManagedInstanceRequest.detachParentSoftwareSourceFromManagedInstanceDetails,
        "DetachParentSoftwareSourceFromManagedInstanceDetails",
        models.DetachParentSoftwareSourceFromManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachParentSoftwareSourceFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a specific erratum.
   *
   * @param GetErratumRequest
   * @return GetErratumResponse
   * @throws OciError when an error occurs
   */
  public async getErratum(
    getErratumRequest: requests.GetErratumRequest
  ): Promise<responses.GetErratumResponse> {
    const pathParams = {
      "{erratumId}": getErratumRequest.erratumId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getErratumRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/errata/{erratumId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetErratumResponse>{},
        body: await response.json(),
        bodyKey: "erratum",
        bodyModel: "model.Erratum",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a specific Managed Instance.
   *
   * @param GetManagedInstanceRequest
   * @return GetManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async getManagedInstance(
    getManagedInstanceRequest: requests.GetManagedInstanceRequest
  ): Promise<responses.GetManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": getManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getManagedInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "managedInstance",
        bodyModel: "model.ManagedInstance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a specific Managed Instance Group.
   *
   * @param GetManagedInstanceGroupRequest
   * @return GetManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async getManagedInstanceGroup(
    getManagedInstanceGroupRequest: requests.GetManagedInstanceGroupRequest
  ): Promise<responses.GetManagedInstanceGroupResponse> {
    const pathParams = {
      "{managedInstanceGroupId}": getManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getManagedInstanceGroupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the detailed information for the Scheduled Job with the given ID.
   *
   * @param GetScheduledJobRequest
   * @return GetScheduledJobResponse
   * @throws OciError when an error occurs
   */
  public async getScheduledJob(
    getScheduledJobRequest: requests.GetScheduledJobRequest
  ): Promise<responses.GetScheduledJobResponse> {
    const pathParams = {
      "{scheduledJobId}": getScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getScheduledJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a specific Software Package.
   *
   * @param GetSoftwarePackageRequest
   * @return GetSoftwarePackageResponse
   * @throws OciError when an error occurs
   */
  public async getSoftwarePackage(
    getSoftwarePackageRequest: requests.GetSoftwarePackageRequest
  ): Promise<responses.GetSoftwarePackageResponse> {
    const pathParams = {
      "{softwareSourceId}": getSoftwarePackageRequest.softwareSourceId,
      "{softwarePackageName}": getSoftwarePackageRequest.softwarePackageName
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getSoftwarePackageRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/softwarePackages/{softwarePackageName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSoftwarePackageResponse>{},
        body: await response.json(),
        bodyKey: "softwarePackage",
        bodyModel: "model.SoftwarePackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a specific Software Source.
   *
   * @param GetSoftwareSourceRequest
   * @return GetSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async getSoftwareSource(
    getSoftwareSourceRequest: requests.GetSoftwareSourceRequest
  ): Promise<responses.GetSoftwareSourceResponse> {
    const pathParams = {
      "{softwareSourceId}": getSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getSoftwareSourceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the detailed information for the work request with the given ID.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Install all of the available package updates for the managed instance.
   *
   * @param InstallAllPackageUpdatesOnManagedInstanceRequest
   * @return InstallAllPackageUpdatesOnManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async installAllPackageUpdatesOnManagedInstance(
    installAllPackageUpdatesOnManagedInstanceRequest: requests.InstallAllPackageUpdatesOnManagedInstanceRequest
  ): Promise<responses.InstallAllPackageUpdatesOnManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": installAllPackageUpdatesOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": installAllPackageUpdatesOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installAllPackageUpdatesOnManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/packages/updateAll",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallAllPackageUpdatesOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Installs a package on a managed instance.
   *
   * @param InstallPackageOnManagedInstanceRequest
   * @return InstallPackageOnManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async installPackageOnManagedInstance(
    installPackageOnManagedInstanceRequest: requests.InstallPackageOnManagedInstanceRequest
  ): Promise<responses.InstallPackageOnManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": installPackageOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "softwarePackageName": installPackageOnManagedInstanceRequest.softwarePackageName
    };

    let headerParams = {
      "opc-request-id": installPackageOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installPackageOnManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/packages/install",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallPackageOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates a package on a managed instance.
   *
   * @param InstallPackageUpdateOnManagedInstanceRequest
   * @return InstallPackageUpdateOnManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async installPackageUpdateOnManagedInstance(
    installPackageUpdateOnManagedInstanceRequest: requests.InstallPackageUpdateOnManagedInstanceRequest
  ): Promise<responses.InstallPackageUpdateOnManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": installPackageUpdateOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "softwarePackageName": installPackageUpdateOnManagedInstanceRequest.softwarePackageName
    };

    let headerParams = {
      "opc-request-id": installPackageUpdateOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installPackageUpdateOnManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/packages/update",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallPackageUpdateOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a list of packages available for install on the Managed Instance.
   *
   * @param ListAvailablePackagesForManagedInstanceRequest
   * @return ListAvailablePackagesForManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async listAvailablePackagesForManagedInstance(
    listAvailablePackagesForManagedInstanceRequest: requests.ListAvailablePackagesForManagedInstanceRequest
  ): Promise<responses.ListAvailablePackagesForManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": listAvailablePackagesForManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listAvailablePackagesForManagedInstanceRequest.displayName,
      "compartmentId": listAvailablePackagesForManagedInstanceRequest.compartmentId,
      "limit": listAvailablePackagesForManagedInstanceRequest.limit,
      "page": listAvailablePackagesForManagedInstanceRequest.page,
      "sortOrder": listAvailablePackagesForManagedInstanceRequest.sortOrder,
      "sortBy": listAvailablePackagesForManagedInstanceRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listAvailablePackagesForManagedInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/packages/available",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAvailablePackagesForManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstallablePackageSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstallablePackageSummary objects
   * contained in responses from the listAvailablePackagesForManagedInstance operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailablePackagesForManagedInstance(
    request: requests.ListAvailablePackagesForManagedInstanceRequest
  ): AsyncIterableIterator<models.InstallablePackageSummary> {
    return paginateRecords(request, req => this.listAvailablePackagesForManagedInstance(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAvailablePackagesForManagedInstance operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailablePackagesForManagedInstanceResponses(
    request: requests.ListAvailablePackagesForManagedInstanceRequest
  ): AsyncIterableIterator<responses.ListAvailablePackagesForManagedInstanceResponse> {
    return paginateResponses(request, req => this.listAvailablePackagesForManagedInstance(req));
  }

  /**
   * Returns a list of available software sources for a Managed Instance.
   *
   * @param ListAvailableSoftwareSourcesForManagedInstanceRequest
   * @return ListAvailableSoftwareSourcesForManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async listAvailableSoftwareSourcesForManagedInstance(
    listAvailableSoftwareSourcesForManagedInstanceRequest: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest
  ): Promise<responses.ListAvailableSoftwareSourcesForManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": listAvailableSoftwareSourcesForManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listAvailableSoftwareSourcesForManagedInstanceRequest.displayName,
      "compartmentId": listAvailableSoftwareSourcesForManagedInstanceRequest.compartmentId,
      "limit": listAvailableSoftwareSourcesForManagedInstanceRequest.limit,
      "page": listAvailableSoftwareSourcesForManagedInstanceRequest.page,
      "sortOrder": listAvailableSoftwareSourcesForManagedInstanceRequest.sortOrder,
      "sortBy": listAvailableSoftwareSourcesForManagedInstanceRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listAvailableSoftwareSourcesForManagedInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/availableSoftwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAvailableSoftwareSourcesForManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AvailableSoftwareSourceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AvailableSoftwareSourceSummary objects
   * contained in responses from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailableSoftwareSourcesForManagedInstance(
    request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest
  ): AsyncIterableIterator<models.AvailableSoftwareSourceSummary> {
    return paginateRecords(request, req =>
      this.listAvailableSoftwareSourcesForManagedInstance(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailableSoftwareSourcesForManagedInstanceResponses(
    request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest
  ): AsyncIterableIterator<responses.ListAvailableSoftwareSourcesForManagedInstanceResponse> {
    return paginateResponses(request, req =>
      this.listAvailableSoftwareSourcesForManagedInstance(req)
    );
  }

  /**
   * Returns a list of available updates for a Managed Instance.
   *
   * @param ListAvailableUpdatesForManagedInstanceRequest
   * @return ListAvailableUpdatesForManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async listAvailableUpdatesForManagedInstance(
    listAvailableUpdatesForManagedInstanceRequest: requests.ListAvailableUpdatesForManagedInstanceRequest
  ): Promise<responses.ListAvailableUpdatesForManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": listAvailableUpdatesForManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listAvailableUpdatesForManagedInstanceRequest.displayName,
      "compartmentId": listAvailableUpdatesForManagedInstanceRequest.compartmentId,
      "limit": listAvailableUpdatesForManagedInstanceRequest.limit,
      "page": listAvailableUpdatesForManagedInstanceRequest.page,
      "sortOrder": listAvailableUpdatesForManagedInstanceRequest.sortOrder,
      "sortBy": listAvailableUpdatesForManagedInstanceRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listAvailableUpdatesForManagedInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/packages/updates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAvailableUpdatesForManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AvailableUpdateSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AvailableUpdateSummary objects
   * contained in responses from the listAvailableUpdatesForManagedInstance operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailableUpdatesForManagedInstance(
    request: requests.ListAvailableUpdatesForManagedInstanceRequest
  ): AsyncIterableIterator<models.AvailableUpdateSummary> {
    return paginateRecords(request, req => this.listAvailableUpdatesForManagedInstance(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAvailableUpdatesForManagedInstance operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAvailableUpdatesForManagedInstanceResponses(
    request: requests.ListAvailableUpdatesForManagedInstanceRequest
  ): AsyncIterableIterator<responses.ListAvailableUpdatesForManagedInstanceResponse> {
    return paginateResponses(request, req => this.listAvailableUpdatesForManagedInstance(req));
  }

  /**
   * Returns a list of all Managed Instance Groups.
   *
   * @param ListManagedInstanceGroupsRequest
   * @return ListManagedInstanceGroupsResponse
   * @throws OciError when an error occurs
   */
  public async listManagedInstanceGroups(
    listManagedInstanceGroupsRequest: requests.ListManagedInstanceGroupsRequest
  ): Promise<responses.ListManagedInstanceGroupsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedInstanceGroupsRequest.compartmentId,
      "displayName": listManagedInstanceGroupsRequest.displayName,
      "limit": listManagedInstanceGroupsRequest.limit,
      "page": listManagedInstanceGroupsRequest.page,
      "sortOrder": listManagedInstanceGroupsRequest.sortOrder,
      "sortBy": listManagedInstanceGroupsRequest.sortBy,
      "lifecycleState": listManagedInstanceGroupsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listManagedInstanceGroupsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ManagedInstanceGroupSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ManagedInstanceGroupSummary objects
   * contained in responses from the listManagedInstanceGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllManagedInstanceGroups(
    request: requests.ListManagedInstanceGroupsRequest
  ): AsyncIterableIterator<models.ManagedInstanceGroupSummary> {
    return paginateRecords(request, req => this.listManagedInstanceGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllManagedInstanceGroupsResponses(
    request: requests.ListManagedInstanceGroupsRequest
  ): AsyncIterableIterator<responses.ListManagedInstanceGroupsResponse> {
    return paginateResponses(request, req => this.listManagedInstanceGroups(req));
  }

  /**
   * Returns a list of all Managed Instances.
   *
   * @param ListManagedInstancesRequest
   * @return ListManagedInstancesResponse
   * @throws OciError when an error occurs
   */
  public async listManagedInstances(
    listManagedInstancesRequest: requests.ListManagedInstancesRequest
  ): Promise<responses.ListManagedInstancesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedInstancesRequest.compartmentId,
      "displayName": listManagedInstancesRequest.displayName,
      "limit": listManagedInstancesRequest.limit,
      "page": listManagedInstancesRequest.page,
      "sortOrder": listManagedInstancesRequest.sortOrder,
      "sortBy": listManagedInstancesRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listManagedInstancesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ManagedInstanceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ManagedInstanceSummary objects
   * contained in responses from the listManagedInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllManagedInstances(
    request: requests.ListManagedInstancesRequest
  ): AsyncIterableIterator<models.ManagedInstanceSummary> {
    return paginateRecords(request, req => this.listManagedInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listManagedInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllManagedInstancesResponses(
    request: requests.ListManagedInstancesRequest
  ): AsyncIterableIterator<responses.ListManagedInstancesResponse> {
    return paginateResponses(request, req => this.listManagedInstances(req));
  }

  /**
   * Returns a list of installed packages on the Managed Instance.
   *
   * @param ListPackagesInstalledOnManagedInstanceRequest
   * @return ListPackagesInstalledOnManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async listPackagesInstalledOnManagedInstance(
    listPackagesInstalledOnManagedInstanceRequest: requests.ListPackagesInstalledOnManagedInstanceRequest
  ): Promise<responses.ListPackagesInstalledOnManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": listPackagesInstalledOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listPackagesInstalledOnManagedInstanceRequest.displayName,
      "compartmentId": listPackagesInstalledOnManagedInstanceRequest.compartmentId,
      "limit": listPackagesInstalledOnManagedInstanceRequest.limit,
      "page": listPackagesInstalledOnManagedInstanceRequest.page,
      "sortOrder": listPackagesInstalledOnManagedInstanceRequest.sortOrder,
      "sortBy": listPackagesInstalledOnManagedInstanceRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listPackagesInstalledOnManagedInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/packages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPackagesInstalledOnManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstalledPackageSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstalledPackageSummary objects
   * contained in responses from the listPackagesInstalledOnManagedInstance operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackagesInstalledOnManagedInstance(
    request: requests.ListPackagesInstalledOnManagedInstanceRequest
  ): AsyncIterableIterator<models.InstalledPackageSummary> {
    return paginateRecords(request, req => this.listPackagesInstalledOnManagedInstance(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPackagesInstalledOnManagedInstance operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackagesInstalledOnManagedInstanceResponses(
    request: requests.ListPackagesInstalledOnManagedInstanceRequest
  ): AsyncIterableIterator<responses.ListPackagesInstalledOnManagedInstanceResponse> {
    return paginateResponses(request, req => this.listPackagesInstalledOnManagedInstance(req));
  }

  /**
   * Returns a list of all of the currently active Scheduled Jobs in the system
   *
   * @param ListScheduledJobsRequest
   * @return ListScheduledJobsResponse
   * @throws OciError when an error occurs
   */
  public async listScheduledJobs(
    listScheduledJobsRequest: requests.ListScheduledJobsRequest
  ): Promise<responses.ListScheduledJobsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listScheduledJobsRequest.compartmentId,
      "displayName": listScheduledJobsRequest.displayName,
      "managedInstanceId": listScheduledJobsRequest.managedInstanceId,
      "managedInstanceGroupId": listScheduledJobsRequest.managedInstanceGroupId,
      "operationType": listScheduledJobsRequest.operationType,
      "limit": listScheduledJobsRequest.limit,
      "page": listScheduledJobsRequest.page,
      "sortOrder": listScheduledJobsRequest.sortOrder,
      "sortBy": listScheduledJobsRequest.sortBy,
      "lifecycleState": listScheduledJobsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listScheduledJobsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ScheduledJobSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
   * contained in responses from the listScheduledJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllScheduledJobs(
    request: requests.ListScheduledJobsRequest
  ): AsyncIterableIterator<models.ScheduledJobSummary> {
    return paginateRecords(request, req => this.listScheduledJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listScheduledJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllScheduledJobsResponses(
    request: requests.ListScheduledJobsRequest
  ): AsyncIterableIterator<responses.ListScheduledJobsResponse> {
    return paginateResponses(request, req => this.listScheduledJobs(req));
  }

  /**
   * Lists Software Packages in a Software Source
   *
   * @param ListSoftwareSourcePackagesRequest
   * @return ListSoftwareSourcePackagesResponse
   * @throws OciError when an error occurs
   */
  public async listSoftwareSourcePackages(
    listSoftwareSourcePackagesRequest: requests.ListSoftwareSourcePackagesRequest
  ): Promise<responses.ListSoftwareSourcePackagesResponse> {
    const pathParams = {
      "{softwareSourceId}": listSoftwareSourcePackagesRequest.softwareSourceId
    };

    const queryParams = {
      "compartmentId": listSoftwareSourcePackagesRequest.compartmentId,
      "displayName": listSoftwareSourcePackagesRequest.displayName,
      "limit": listSoftwareSourcePackagesRequest.limit,
      "page": listSoftwareSourcePackagesRequest.page,
      "sortOrder": listSoftwareSourcePackagesRequest.sortOrder,
      "sortBy": listSoftwareSourcePackagesRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listSoftwareSourcePackagesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/softwarePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwareSourcePackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SoftwarePackageSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SoftwarePackageSummary objects
   * contained in responses from the listSoftwareSourcePackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSoftwareSourcePackages(
    request: requests.ListSoftwareSourcePackagesRequest
  ): AsyncIterableIterator<models.SoftwarePackageSummary> {
    return paginateRecords(request, req => this.listSoftwareSourcePackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSoftwareSourcePackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSoftwareSourcePackagesResponses(
    request: requests.ListSoftwareSourcePackagesRequest
  ): AsyncIterableIterator<responses.ListSoftwareSourcePackagesResponse> {
    return paginateResponses(request, req => this.listSoftwareSourcePackages(req));
  }

  /**
   * Returns a list of all Software Sources.
   *
   * @param ListSoftwareSourcesRequest
   * @return ListSoftwareSourcesResponse
   * @throws OciError when an error occurs
   */
  public async listSoftwareSources(
    listSoftwareSourcesRequest: requests.ListSoftwareSourcesRequest
  ): Promise<responses.ListSoftwareSourcesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSoftwareSourcesRequest.compartmentId,
      "displayName": listSoftwareSourcesRequest.displayName,
      "limit": listSoftwareSourcesRequest.limit,
      "page": listSoftwareSourcesRequest.page,
      "sortOrder": listSoftwareSourcesRequest.sortOrder,
      "sortBy": listSoftwareSourcesRequest.sortBy,
      "lifecycleState": listSoftwareSourcesRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listSoftwareSourcesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwareSourcesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SoftwareSourceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SoftwareSourceSummary objects
   * contained in responses from the listSoftwareSources operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSoftwareSources(
    request: requests.ListSoftwareSourcesRequest
  ): AsyncIterableIterator<models.SoftwareSourceSummary> {
    return paginateRecords(request, req => this.listSoftwareSources(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSoftwareSources operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSoftwareSourcesResponses(
    request: requests.ListSoftwareSourcesRequest
  ): AsyncIterableIterator<responses.ListSoftwareSourcesResponse> {
    return paginateResponses(request, req => this.listSoftwareSources(req));
  }

  /**
   * Returns a list of all of the Scheduled Jobs whose next execution time is at or before the specified time.
   *
   * @param ListUpcomingScheduledJobsRequest
   * @return ListUpcomingScheduledJobsResponse
   * @throws OciError when an error occurs
   */
  public async listUpcomingScheduledJobs(
    listUpcomingScheduledJobsRequest: requests.ListUpcomingScheduledJobsRequest
  ): Promise<responses.ListUpcomingScheduledJobsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listUpcomingScheduledJobsRequest.compartmentId,
      "displayName": listUpcomingScheduledJobsRequest.displayName,
      "timeEnd": listUpcomingScheduledJobsRequest.timeEnd,
      "limit": listUpcomingScheduledJobsRequest.limit,
      "page": listUpcomingScheduledJobsRequest.page,
      "sortOrder": listUpcomingScheduledJobsRequest.sortOrder,
      "sortBy": listUpcomingScheduledJobsRequest.sortBy,
      "tagName": listUpcomingScheduledJobsRequest.tagName,
      "tagValue": listUpcomingScheduledJobsRequest.tagValue,
      "lifecycleState": listUpcomingScheduledJobsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listUpcomingScheduledJobsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/upcomingSchedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUpcomingScheduledJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ScheduledJobSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
   * contained in responses from the listUpcomingScheduledJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUpcomingScheduledJobs(
    request: requests.ListUpcomingScheduledJobsRequest
  ): AsyncIterableIterator<models.ScheduledJobSummary> {
    return paginateRecords(request, req => this.listUpcomingScheduledJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUpcomingScheduledJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUpcomingScheduledJobsResponses(
    request: requests.ListUpcomingScheduledJobsRequest
  ): AsyncIterableIterator<responses.ListUpcomingScheduledJobsResponse> {
    return paginateResponses(request, req => this.listUpcomingScheduledJobs(req));
  }

  /**
   * Gets the errors for the work request with the given ID.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestErrorsRequest.limit,
      "page": listWorkRequestErrorsRequest.page,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestError[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<models.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Lists the log entries for the work request with the given ID.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestLogsRequest.limit,
      "page": listWorkRequestLogsRequest.page,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestLogEntry[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<models.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "displayName": listWorkRequestsRequest.displayName,
      "managedInstanceId": listWorkRequestsRequest.managedInstanceId,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<models.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Removes an installed package from a managed instance.
   *
   * @param RemovePackageFromManagedInstanceRequest
   * @return RemovePackageFromManagedInstanceResponse
   * @throws OciError when an error occurs
   */
  public async removePackageFromManagedInstance(
    removePackageFromManagedInstanceRequest: requests.RemovePackageFromManagedInstanceRequest
  ): Promise<responses.RemovePackageFromManagedInstanceResponse> {
    const pathParams = {
      "{managedInstanceId}": removePackageFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {
      "softwarePackageName": removePackageFromManagedInstanceRequest.softwarePackageName
    };

    let headerParams = {
      "opc-request-id": removePackageFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": removePackageFromManagedInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/packages/remove",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePackageFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Removes a given list of Software Packages from a specific Software Source.
   *
   * @param RemovePackagesFromSoftwareSourceRequest
   * @return RemovePackagesFromSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async removePackagesFromSoftwareSource(
    removePackagesFromSoftwareSourceRequest: requests.RemovePackagesFromSoftwareSourceRequest
  ): Promise<responses.RemovePackagesFromSoftwareSourceResponse> {
    const pathParams = {
      "{softwareSourceId}": removePackagesFromSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": removePackagesFromSoftwareSourceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/actions/removePackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePackagesFromSoftwareSourceRequest.removePackagesFromSoftwareSourceDetails,
        "RemovePackagesFromSoftwareSourceDetails",
        models.RemovePackagesFromSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePackagesFromSoftwareSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * This will trigger an already created Scheduled Job to being executing
   * immediately instead of waiting for its next regularly scheduled time.
   *
   * @param RunScheduledJobNowRequest
   * @return RunScheduledJobNowResponse
   * @throws OciError when an error occurs
   */
  public async runScheduledJobNow(
    runScheduledJobNowRequest: requests.RunScheduledJobNowRequest
  ): Promise<responses.RunScheduledJobNowResponse> {
    const pathParams = {
      "{scheduledJobId}": runScheduledJobNowRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": runScheduledJobNowRequest.opcRequestId,
      "if-match": runScheduledJobNowRequest.ifMatch,
      "opc-retry-token": runScheduledJobNowRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}/actions/runNow",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.RunScheduledJobNowResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Searches all of the available Software Sources and returns any/all Software Packages matching
   * the search criteria.
   *
   * @param SearchSoftwarePackagesRequest
   * @return SearchSoftwarePackagesResponse
   * @throws OciError when an error occurs
   */
  public async searchSoftwarePackages(
    searchSoftwarePackagesRequest: requests.SearchSoftwarePackagesRequest
  ): Promise<responses.SearchSoftwarePackagesResponse> {
    const pathParams = {};

    const queryParams = {
      "softwarePackageName": searchSoftwarePackagesRequest.softwarePackageName,
      "displayName": searchSoftwarePackagesRequest.displayName,
      "cveName": searchSoftwarePackagesRequest.cveName,
      "limit": searchSoftwarePackagesRequest.limit,
      "page": searchSoftwarePackagesRequest.page,
      "sortOrder": searchSoftwarePackagesRequest.sortOrder,
      "sortBy": searchSoftwarePackagesRequest.sortBy
    };

    let headerParams = {
      "opc-request-id": searchSoftwarePackagesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/softwarePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSoftwarePackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SoftwarePackageSearchSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SoftwarePackageSearchSummary objects
   * contained in responses from the searchSoftwarePackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchAllSoftwarePackages(
    request: requests.SearchSoftwarePackagesRequest
  ): AsyncIterableIterator<models.SoftwarePackageSearchSummary> {
    return paginateRecords(request, req => this.searchSoftwarePackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the searchSoftwarePackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchAllSoftwarePackagesResponses(
    request: requests.SearchSoftwarePackagesRequest
  ): AsyncIterableIterator<responses.SearchSoftwarePackagesResponse> {
    return paginateResponses(request, req => this.searchSoftwarePackages(req));
  }

  /**
   * This will force an already created Scheduled Job to skip its
   * next regularly scheduled execution
   *
   * @param SkipNextScheduledJobExecutionRequest
   * @return SkipNextScheduledJobExecutionResponse
   * @throws OciError when an error occurs
   */
  public async skipNextScheduledJobExecution(
    skipNextScheduledJobExecutionRequest: requests.SkipNextScheduledJobExecutionRequest
  ): Promise<responses.SkipNextScheduledJobExecutionResponse> {
    const pathParams = {
      "{scheduledJobId}": skipNextScheduledJobExecutionRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": skipNextScheduledJobExecutionRequest.opcRequestId,
      "if-match": skipNextScheduledJobExecutionRequest.ifMatch,
      "opc-retry-token": skipNextScheduledJobExecutionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}/actions/skipNextExecution",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.SkipNextScheduledJobExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates a specific Managed Instance Group.
   *
   * @param UpdateManagedInstanceGroupRequest
   * @return UpdateManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   */
  public async updateManagedInstanceGroup(
    updateManagedInstanceGroupRequest: requests.UpdateManagedInstanceGroupRequest
  ): Promise<responses.UpdateManagedInstanceGroupResponse> {
    const pathParams = {
      "{managedInstanceGroupId}": updateManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateManagedInstanceGroupRequest.opcRequestId,
      "if-match": updateManagedInstanceGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedInstanceGroupRequest.updateManagedInstanceGroupDetails,
        "UpdateManagedInstanceGroupDetails",
        models.UpdateManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates an existing Scheduled Job on the management system.
   *
   * @param UpdateScheduledJobRequest
   * @return UpdateScheduledJobResponse
   * @throws OciError when an error occurs
   */
  public async updateScheduledJob(
    updateScheduledJobRequest: requests.UpdateScheduledJobRequest
  ): Promise<responses.UpdateScheduledJobResponse> {
    const pathParams = {
      "{scheduledJobId}": updateScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateScheduledJobRequest.opcRequestId,
      "if-match": updateScheduledJobRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduledJobRequest.updateScheduledJobDetails,
        "UpdateScheduledJobDetails",
        models.UpdateScheduledJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates an existing custom Software Source on the management system.
   *
   * @param UpdateSoftwareSourceRequest
   * @return UpdateSoftwareSourceResponse
   * @throws OciError when an error occurs
   */
  public async updateSoftwareSource(
    updateSoftwareSourceRequest: requests.UpdateSoftwareSourceRequest
  ): Promise<responses.UpdateSoftwareSourceResponse> {
    const pathParams = {
      "{softwareSourceId}": updateSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateSoftwareSourceRequest.opcRequestId,
      "if-match": updateSoftwareSourceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSoftwareSourceRequest.updateSoftwareSourceDetails,
        "UpdateSoftwareSourceDetails",
        models.UpdateSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
