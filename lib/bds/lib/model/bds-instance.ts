/**
 * Big Data Service API
 * API for the Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service
build on Hadoop, Spark and Data Science distribution, which can be fully integrated with existing enterprise
data in Oracle Database and Oracle Applications..

 * OpenAPI spec version: 20190531
 * Contact: rahul.ra.arora@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as model from "../model";

/**
 * Description of the BDS instance
 */
export interface BdsInstance {
  /**
   * The OCID of the BDS resource
   */
  "id": string;
  /**
   * The OCID of the compartment
   */
  "compartmentId": string;
  /**
   * Name of the BDS instance
   */
  "displayName": string;
  /**
   * The state of the BDS instance
   */
  "lifecycleState": BdsInstance.LifecycleState;
  /**
   * Version of the Hadoop distribution
   */
  "clusterVersion"?: BdsInstance.ClusterVersion;
  /**
   * Boolean flag specifying whether or not the cluster is HA
   */
  "isHighAvailability": boolean;
  /**
   * Boolean flag specifying whether or not the cluster should be setup as secure.
   */
  "isSecure": boolean;
  /**
   * Boolean flag specifying whether we configure Cloud SQL or not
   */
  "isCloudSqlConfigured": boolean;
  /**
   * Additional configuration of customer's network.
   */
  "networkConfig"?: model.NetworkConfig;
  /**
   * Specific info about a Hadoop cluster
   */
  "clusterDetails"?: model.ClusterDetails;
  /**
   * The list of nodes in the BDS instance
   */
  "nodes": Array<model.Node>;
  /**
   * The information about added Cloud SQL capability
   */
  "cloudSqlDetails"?: model.CloudSqlDetails;
  /**
   * The user who created the BDS instance.
   */
  "createdBy"?: string;
  /**
   * The time the BDS instance was created. An RFC3339 formatted datetime string
   */
  "timeCreated"?: Date;
  /**
   * Number of nodes that forming the cluster
   */
  "numberOfNodes": number;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: `{\"bar-key\": \"value\"}`
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace BdsInstance {
  export enum LifecycleState {
    CREATING = "CREATING",
    ACTIVE = "ACTIVE",
    UPDATING = "UPDATING",
    SUSPENDING = "SUSPENDING",
    SUSPENDED = "SUSPENDED",
    RESUMING = "RESUMING",
    DELETING = "DELETING",
    DELETED = "DELETED",
    FAILED = "FAILED",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export enum ClusterVersion {
    CDH5 = "CDH5",
    CDH6 = "CDH6",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: BdsInstance): object {
    const jsonObj = {
      ...obj,
      ...{
        "networkConfig": obj.networkConfig
          ? model.NetworkConfig.getJsonObj(obj.networkConfig)
          : undefined,
        "clusterDetails": obj.clusterDetails
          ? model.ClusterDetails.getJsonObj(obj.clusterDetails)
          : undefined,
        "nodes": obj.nodes
          ? obj.nodes.map(item => {
              return model.Node.getJsonObj(item);
            })
          : undefined,
        "cloudSqlDetails": obj.cloudSqlDetails
          ? model.CloudSqlDetails.getJsonObj(obj.cloudSqlDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
