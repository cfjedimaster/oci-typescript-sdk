/**
 * Big Data Service API
 * API for the Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service
build on Hadoop, Spark and Data Science distribution, which can be fully integrated with existing enterprise
data in Oracle Database and Oracle Applications..

 * OpenAPI spec version: 20190531
 * Contact: rahul.ra.arora@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Specific info about a node
 */
export interface Node {
  /**
   * The OCID of the underlying compute instance
   */
  "instanceId": string;
  /**
   * The name of the node
   */
  "displayName": string;
  /**
   * The state of the node
   */
  "lifecycleState": Node.LifecycleState;
  /**
   * BDS instance node type
   */
  "nodeType": Node.NodeType;
  /**
   * Shape of the node
   */
  "shape": string;
  /**
   * The list of block volumes attached to a given node.
   */
  "attachedBlockVolumes"?: Array<model.VolumeAttachmentDetail>;
  /**
   * The OCID of the subnet in which the node should be created
   */
  "subnetId": string;
  /**
   * IP address of the node
   */
  "ipAddress": string;
  /**
   * The fully-qualified hostname (FQDN) of the node
   */
  "hostname"?: string;
  /**
   * The OCID of the image from which the node was created
   */
  "imageId"?: string;
  /**
   * The fingerprint of the SSH key used for node access
   */
  "sshFingerprint": string;
  /**
   * The name of the availability domain the node is running in
   */
  "availabilityDomain": string;
  /**
   * The name of the fault domain the node is running in
   */
  "faultDomain": string;
  /**
   * The time the node was created. An RFC3339 formatted datetime string
   */
  "timeCreated": Date;
  /**
   * The time the BDS instance was updated. An RFC3339 formatted datetime string
   */
  "timeUpdated"?: Date;
}

export namespace Node {
  export enum LifecycleState {
    CREATING = "CREATING",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    UPDATING = "UPDATING",
    DELETING = "DELETING",
    DELETED = "DELETED",
    FAILED = "FAILED",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export enum NodeType {
    MASTER = "MASTER",
    EDGE = "EDGE",
    UTILITY = "UTILITY",
    WORKER = "WORKER",
    BURSTING = "BURSTING",
    CLOUDSQL = "CLOUD_SQL",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Node): object {
    const jsonObj = {
      ...obj,
      ...{
        "attachedBlockVolumes": obj.attachedBlockVolumes
          ? obj.attachedBlockVolumes.map(item => {
              return model.VolumeAttachmentDetail.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
