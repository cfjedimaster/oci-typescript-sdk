/**
 * Web Application Acceleration and Security Services API
 * OCI Web Application Acceleration and Security Services
 * OpenAPI spec version: 20181116
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { RedirectWaiter } from "./redirect-waiter";
import { WaasWaiter } from "./waas-waiter";
import { composeResponse, composeRequest } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum RedirectApiKeys {
  ApiKey
}

export class RedirectClient {
  protected static serviceEndpointTemplate = "https://waas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": RedirectWaiter;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181116";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      RedirectClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      RedirectClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new RedirectWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): RedirectWaiter {
    this._waiters = new RedirectWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): RedirectWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves HTTP Redirect into a different compartment. When provided, If-Match is checked against ETag values of the WAAS policy.
   * @param ChangeHttpRedirectCompartmentRequest
   * @return ChangeHttpRedirectCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeHttpRedirectCompartment(
    changeHttpRedirectCompartmentRequest: requests.ChangeHttpRedirectCompartmentRequest
  ): Promise<responses.ChangeHttpRedirectCompartmentResponse> {
    const pathParams = {
      "{httpRedirectId}": changeHttpRedirectCompartmentRequest.httpRedirectId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeHttpRedirectCompartmentRequest.ifMatch,
      "opc-request-id": changeHttpRedirectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeHttpRedirectCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects/{httpRedirectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeHttpRedirectCompartmentRequest.changeHttpRedirectCompartmentDetails,
        "ChangeHttpRedirectCompartmentDetails",
        models.ChangeHttpRedirectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeHttpRedirectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new HTTP Redirect on the WAF edge.
   * @param CreateHttpRedirectRequest
   * @return CreateHttpRedirectResponse
   * @throws OciError when an error occurs
   */
  public async createHttpRedirect(
    createHttpRedirectRequest: requests.CreateHttpRedirectRequest
  ): Promise<responses.CreateHttpRedirectResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createHttpRedirectRequest.opcRequestId,
      "opc-retry-token": createHttpRedirectRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createHttpRedirectRequest.createHttpRedirectDetails,
        "CreateHttpRedirectDetails",
        models.CreateHttpRedirectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateHttpRedirectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes a redirect.
   * @param DeleteHttpRedirectRequest
   * @return DeleteHttpRedirectResponse
   * @throws OciError when an error occurs
   */
  public async deleteHttpRedirect(
    deleteHttpRedirectRequest: requests.DeleteHttpRedirectRequest
  ): Promise<responses.DeleteHttpRedirectResponse> {
    const pathParams = {
      "{httpRedirectId}": deleteHttpRedirectRequest.httpRedirectId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteHttpRedirectRequest.opcRequestId,
      "opc-retry-token": deleteHttpRedirectRequest.opcRetryToken,
      "if-match": deleteHttpRedirectRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects/{httpRedirectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteHttpRedirectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a HTTP Redirect.
   * @param GetHttpRedirectRequest
   * @return GetHttpRedirectResponse
   * @throws OciError when an error occurs
   */
  public async getHttpRedirect(
    getHttpRedirectRequest: requests.GetHttpRedirectRequest
  ): Promise<responses.GetHttpRedirectResponse> {
    const pathParams = {
      "{httpRedirectId}": getHttpRedirectRequest.httpRedirectId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getHttpRedirectRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects/{httpRedirectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHttpRedirectResponse>{},
        body: await response.json(),
        bodyKey: "httpRedirect",
        bodyModel: "model.HttpRedirect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets a list of HTTP Redirects.
   * @param ListHttpRedirectsRequest
   * @return ListHttpRedirectsResponse
   * @throws OciError when an error occurs
   */
  public async listHttpRedirects(
    listHttpRedirectsRequest: requests.ListHttpRedirectsRequest
  ): Promise<responses.ListHttpRedirectsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listHttpRedirectsRequest.compartmentId,
      "limit": listHttpRedirectsRequest.limit,
      "page": listHttpRedirectsRequest.page,
      "sortOrder": listHttpRedirectsRequest.sortOrder,
      "sortBy": listHttpRedirectsRequest.sortBy,
      "id": listHttpRedirectsRequest.id,
      "displayName": listHttpRedirectsRequest.displayName,
      "lifecycleState": listHttpRedirectsRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo": listHttpRedirectsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listHttpRedirectsRequest.timeCreatedLessThan
    };

    let headerParams = {
      "opc-request-id": listHttpRedirectsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHttpRedirectsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "HttpRedirectSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.HttpRedirectSummary objects
   * contained in responses from the listHttpRedirects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpRedirects(
    request: requests.ListHttpRedirectsRequest
  ): AsyncIterableIterator<models.HttpRedirectSummary> {
    return paginateRecords(request, req => this.listHttpRedirects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listHttpRedirects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpRedirectsResponses(
    request: requests.ListHttpRedirectsRequest
  ): AsyncIterableIterator<responses.ListHttpRedirectsResponse> {
    return paginateResponses(request, req => this.listHttpRedirects(req));
  }

  /**
   * Updates the details of a HTTP Redirect, including target and tags. Only the fields specified in the request body will be updated; all other properties will remain unchanged.
   * @param UpdateHttpRedirectRequest
   * @return UpdateHttpRedirectResponse
   * @throws OciError when an error occurs
   */
  public async updateHttpRedirect(
    updateHttpRedirectRequest: requests.UpdateHttpRedirectRequest
  ): Promise<responses.UpdateHttpRedirectResponse> {
    const pathParams = {
      "{httpRedirectId}": updateHttpRedirectRequest.httpRedirectId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateHttpRedirectRequest.opcRequestId,
      "opc-retry-token": updateHttpRedirectRequest.opcRetryToken,
      "if-match": updateHttpRedirectRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpRedirects/{httpRedirectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHttpRedirectRequest.updateHttpRedirectDetails,
        "UpdateHttpRedirectDetails",
        models.UpdateHttpRedirectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHttpRedirectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
export enum WaasApiKeys {
  ApiKey
}

export class WaasClient {
  protected static serviceEndpointTemplate = "https://waas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WaasWaiter;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181116";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WaasClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WaasClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new WaasWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WaasWaiter {
    this._waiters = new WaasWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WaasWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
     * Accepts a list of recommended Web Application Firewall protection rules. Web Application Firewall protection rule recommendations are sets of rules generated by observed traffic patterns through the Web Application Firewall and are meant to optimize the Web Application Firewall's security profile. Only the rules specified in the request body will be updated; all other rules will remain unchanged.
* <p>
Use the `GET /waasPolicies/{waasPolicyId}/wafConfig/recommendations` method to view a list of recommended Web Application Firewall protection rules. For more information, see [WAF Protection Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafprotectionrules.htm).
     * @param AcceptRecommendationsRequest
     * @return AcceptRecommendationsResponse
     * @throws OciError when an error occurs
     */
  public async acceptRecommendations(
    acceptRecommendationsRequest: requests.AcceptRecommendationsRequest
  ): Promise<responses.AcceptRecommendationsResponse> {
    const pathParams = {
      "{waasPolicyId}": acceptRecommendationsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": acceptRecommendationsRequest.opcRequestId,
      "if-match": acceptRecommendationsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/actions/acceptWafConfigRecommendations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        acceptRecommendationsRequest.protectionRuleKeys,
        "Array<string>"
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.AcceptRecommendationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Cancels a specified work request.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": cancelWorkRequestRequest.opcRequestId,
      "opc-retry-token": cancelWorkRequestRequest.opcRetryToken,
      "if-match": cancelWorkRequestRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves address list into a different compartment. When provided, If-Match
   * is checked against ETag values of the address list. For information about moving
   * resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeAddressListCompartmentRequest
   * @return ChangeAddressListCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeAddressListCompartment(
    changeAddressListCompartmentRequest: requests.ChangeAddressListCompartmentRequest
  ): Promise<responses.ChangeAddressListCompartmentResponse> {
    const pathParams = {
      "{addressListId}": changeAddressListCompartmentRequest.addressListId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeAddressListCompartmentRequest.ifMatch,
      "opc-request-id": changeAddressListCompartmentRequest.opcRequestId,
      "opc-retry-token": changeAddressListCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists/{addressListId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAddressListCompartmentRequest.changeAddressListCompartmentDetails,
        "ChangeAddressListCompartmentDetails",
        models.ChangeAddressListCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAddressListCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves certificate into a different compartment. When provided, If-Match is checked against ETag values of the certificate.
   * For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeCertificateCompartmentRequest
   * @return ChangeCertificateCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeCertificateCompartment(
    changeCertificateCompartmentRequest: requests.ChangeCertificateCompartmentRequest
  ): Promise<responses.ChangeCertificateCompartmentResponse> {
    const pathParams = {
      "{certificateId}": changeCertificateCompartmentRequest.certificateId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeCertificateCompartmentRequest.ifMatch,
      "opc-request-id": changeCertificateCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCertificateCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates/{certificateId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCertificateCompartmentRequest.changeCertificateCompartmentDetails,
        "ChangeCertificateCompartmentDetails",
        models.ChangeCertificateCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCertificateCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a custom protection rule into a different compartment within the same tenancy. When provided, If-Match is checked against ETag values of the custom protection rule. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * @param ChangeCustomProtectionRuleCompartmentRequest
   * @return ChangeCustomProtectionRuleCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeCustomProtectionRuleCompartment(
    changeCustomProtectionRuleCompartmentRequest: requests.ChangeCustomProtectionRuleCompartmentRequest
  ): Promise<responses.ChangeCustomProtectionRuleCompartmentResponse> {
    const pathParams = {
      "{customProtectionRuleId}":
        changeCustomProtectionRuleCompartmentRequest.customProtectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeCustomProtectionRuleCompartmentRequest.ifMatch,
      "opc-request-id": changeCustomProtectionRuleCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCustomProtectionRuleCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules/{customProtectionRuleId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCustomProtectionRuleCompartmentRequest.changeCustomProtectionRuleCompartmentDetails,
        "ChangeCustomProtectionRuleCompartmentDetails",
        models.ChangeCustomProtectionRuleCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCustomProtectionRuleCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves WAAS policy into a different compartment. When provided, If-Match is checked against ETag values of the WAAS policy.
   * For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeWaasPolicyCompartmentRequest
   * @return ChangeWaasPolicyCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeWaasPolicyCompartment(
    changeWaasPolicyCompartmentRequest: requests.ChangeWaasPolicyCompartmentRequest
  ): Promise<responses.ChangeWaasPolicyCompartmentResponse> {
    const pathParams = {
      "{waasPolicyId}": changeWaasPolicyCompartmentRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeWaasPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeWaasPolicyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeWaasPolicyCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeWaasPolicyCompartmentRequest.changeWaasPolicyCompartmentDetails,
        "ChangeWaasPolicyCompartmentDetails",
        models.ChangeWaasPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeWaasPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates an address list in a set compartment and allows it to be used in a WAAS policy and referenced by access rules. Addresses can be IP addresses and CIDR notations.
   * @param CreateAddressListRequest
   * @return CreateAddressListResponse
   * @throws OciError when an error occurs
   */
  public async createAddressList(
    createAddressListRequest: requests.CreateAddressListRequest
  ): Promise<responses.CreateAddressListResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createAddressListRequest.opcRequestId,
      "opc-retry-token": createAddressListRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAddressListRequest.createAddressListDetails,
        "CreateAddressListDetails",
        models.CreateAddressListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Allows an SSL certificate to be added to a WAAS policy. The Web Application Firewall terminates SSL connections to inspect requests in runtime, and then re-encrypts requests before sending them to the origin for fulfillment.
* <p>
For more information, see [WAF Settings](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafsettings.htm).
     * @param CreateCertificateRequest
     * @return CreateCertificateResponse
     * @throws OciError when an error occurs
     */
  public async createCertificate(
    createCertificateRequest: requests.CreateCertificateRequest
  ): Promise<responses.CreateCertificateResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createCertificateRequest.opcRequestId,
      "opc-retry-token": createCertificateRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCertificateRequest.createCertificateDetails,
        "CreateCertificateDetails",
        models.CreateCertificateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCertificateResponse>{},
        body: await response.json(),
        bodyKey: "certificate",
        bodyModel: "model.Certificate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Creates a new custom protection rule in the specified compartment.
* <p>
Custom protection rules allow you to create rules in addition to the rulesets provided by the Web Application Firewall service, including rules from [ModSecurity](https://modsecurity.org/). The syntax for custom rules is based on the ModSecurity syntax. For more information about custom protection rules, see [Custom Protection Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/customprotectionrules.htm).
     * @param CreateCustomProtectionRuleRequest
     * @return CreateCustomProtectionRuleResponse
     * @throws OciError when an error occurs
     */
  public async createCustomProtectionRule(
    createCustomProtectionRuleRequest: requests.CreateCustomProtectionRuleRequest
  ): Promise<responses.CreateCustomProtectionRuleResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createCustomProtectionRuleRequest.opcRequestId,
      "opc-retry-token": createCustomProtectionRuleRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCustomProtectionRuleRequest.createCustomProtectionRuleDetails,
        "CreateCustomProtectionRuleDetails",
        models.CreateCustomProtectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCustomProtectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "customProtectionRule",
        bodyModel: "model.CustomProtectionRule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Creates a new Web Application Acceleration and Security (WAAS) policy in the specified compartment. A WAAS policy must be established before creating Web Application Firewall (WAF) rules. To use WAF rules, your web application's origin servers must defined in the `WaasPolicy` schema.
* <p>
A domain name must be specified when creating a WAAS policy. The domain name should be different from the origins specified in your `WaasPolicy`. Once domain name is entered and stored, it is unchangeable.
* <p>
Use the record data returned in the `cname` field of the `WaasPolicy` object to create a CNAME record in your DNS configuration that will direct your domain's traffic through the WAF.
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the service to reside. For information about access control and compartments, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* <p>
You must specify a display name and domain for the WAAS policy. The display name does not have to be unique and can be changed. The domain name should be different from every origin specified in `WaasPolicy`.
* <p>
All Oracle Cloud Infrastructure resources, including WAAS policies, receive a unique, Oracle-assigned ID called an Oracle Cloud Identifier (OCID). When a resource is created, you can find its OCID in the response. You can also retrieve a resource's OCID by using a list API operation for that resource type, or by viewing the resource in the Console. Fore more information, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
**Note:** After sending the POST request, the new object's state will temporarily be `CREATING`. Ensure that the resource's state has changed to `ACTIVE` before use.
     * @param CreateWaasPolicyRequest
     * @return CreateWaasPolicyResponse
     * @throws OciError when an error occurs
     */
  public async createWaasPolicy(
    createWaasPolicyRequest: requests.CreateWaasPolicyRequest
  ): Promise<responses.CreateWaasPolicyResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createWaasPolicyRequest.opcRequestId,
      "opc-retry-token": createWaasPolicyRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createWaasPolicyRequest.createWaasPolicyDetails,
        "CreateWaasPolicyDetails",
        models.CreateWaasPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateWaasPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes the address list from the compartment if it is not used.
   * @param DeleteAddressListRequest
   * @return DeleteAddressListResponse
   * @throws OciError when an error occurs
   */
  public async deleteAddressList(
    deleteAddressListRequest: requests.DeleteAddressListRequest
  ): Promise<responses.DeleteAddressListResponse> {
    const pathParams = {
      "{addressListId}": deleteAddressListRequest.addressListId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteAddressListRequest.opcRequestId,
      "opc-retry-token": deleteAddressListRequest.opcRetryToken,
      "if-match": deleteAddressListRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists/{addressListId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAddressListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes an SSL certificate from the WAAS service.
   * @param DeleteCertificateRequest
   * @return DeleteCertificateResponse
   * @throws OciError when an error occurs
   */
  public async deleteCertificate(
    deleteCertificateRequest: requests.DeleteCertificateRequest
  ): Promise<responses.DeleteCertificateResponse> {
    const pathParams = {
      "{certificateId}": deleteCertificateRequest.certificateId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteCertificateRequest.opcRequestId,
      "opc-retry-token": deleteCertificateRequest.opcRetryToken,
      "if-match": deleteCertificateRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates/{certificateId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCertificateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes a Custom Protection rule.
   * @param DeleteCustomProtectionRuleRequest
   * @return DeleteCustomProtectionRuleResponse
   * @throws OciError when an error occurs
   */
  public async deleteCustomProtectionRule(
    deleteCustomProtectionRuleRequest: requests.DeleteCustomProtectionRuleRequest
  ): Promise<responses.DeleteCustomProtectionRuleResponse> {
    const pathParams = {
      "{customProtectionRuleId}": deleteCustomProtectionRuleRequest.customProtectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteCustomProtectionRuleRequest.opcRequestId,
      "opc-retry-token": deleteCustomProtectionRuleRequest.opcRetryToken,
      "if-match": deleteCustomProtectionRuleRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules/{customProtectionRuleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCustomProtectionRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes a policy.
   * @param DeleteWaasPolicyRequest
   * @return DeleteWaasPolicyResponse
   * @throws OciError when an error occurs
   */
  public async deleteWaasPolicy(
    deleteWaasPolicyRequest: requests.DeleteWaasPolicyRequest
  ): Promise<responses.DeleteWaasPolicyResponse> {
    const pathParams = {
      "{waasPolicyId}": deleteWaasPolicyRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteWaasPolicyRequest.opcRequestId,
      "opc-retry-token": deleteWaasPolicyRequest.opcRetryToken,
      "if-match": deleteWaasPolicyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWaasPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of an address list.
   * @param GetAddressListRequest
   * @return GetAddressListResponse
   * @throws OciError when an error occurs
   */
  public async getAddressList(
    getAddressListRequest: requests.GetAddressListRequest
  ): Promise<responses.GetAddressListResponse> {
    const pathParams = {
      "{addressListId}": getAddressListRequest.addressListId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getAddressListRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists/{addressListId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of an SSL certificate.
   * @param GetCertificateRequest
   * @return GetCertificateResponse
   * @throws OciError when an error occurs
   */
  public async getCertificate(
    getCertificateRequest: requests.GetCertificateRequest
  ): Promise<responses.GetCertificateResponse> {
    const pathParams = {
      "{certificateId}": getCertificateRequest.certificateId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getCertificateRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates/{certificateId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCertificateResponse>{},
        body: await response.json(),
        bodyKey: "certificate",
        bodyModel: "model.Certificate",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a custom protection rule.
   * @param GetCustomProtectionRuleRequest
   * @return GetCustomProtectionRuleResponse
   * @throws OciError when an error occurs
   */
  public async getCustomProtectionRule(
    getCustomProtectionRuleRequest: requests.GetCustomProtectionRuleRequest
  ): Promise<responses.GetCustomProtectionRuleResponse> {
    const pathParams = {
      "{customProtectionRuleId}": getCustomProtectionRuleRequest.customProtectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getCustomProtectionRuleRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules/{customProtectionRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCustomProtectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "customProtectionRule",
        bodyModel: "model.CustomProtectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the device fingerprint challenge settings in the Web Application Firewall configuration for a WAAS policy.
   * @param GetDeviceFingerprintChallengeRequest
   * @return GetDeviceFingerprintChallengeResponse
   * @throws OciError when an error occurs
   */
  public async getDeviceFingerprintChallenge(
    getDeviceFingerprintChallengeRequest: requests.GetDeviceFingerprintChallengeRequest
  ): Promise<responses.GetDeviceFingerprintChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": getDeviceFingerprintChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getDeviceFingerprintChallengeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/deviceFingerprintChallenge",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeviceFingerprintChallengeResponse>{},
        body: await response.json(),
        bodyKey: "deviceFingerprintChallenge",
        bodyModel: "model.DeviceFingerprintChallenge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the human interaction challenge settings in the Web Application Firewall configuration for a WAAS policy.
   * @param GetHumanInteractionChallengeRequest
   * @return GetHumanInteractionChallengeResponse
   * @throws OciError when an error occurs
   */
  public async getHumanInteractionChallenge(
    getHumanInteractionChallengeRequest: requests.GetHumanInteractionChallengeRequest
  ): Promise<responses.GetHumanInteractionChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": getHumanInteractionChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getHumanInteractionChallengeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/humanInteractionChallenge",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHumanInteractionChallengeResponse>{},
        body: await response.json(),
        bodyKey: "humanInteractionChallenge",
        bodyModel: "model.HumanInteractionChallenge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the JavaScript challenge settings in the Web Application Firewall configuration for a WAAS policy.
   * @param GetJsChallengeRequest
   * @return GetJsChallengeResponse
   * @throws OciError when an error occurs
   */
  public async getJsChallenge(
    getJsChallengeRequest: requests.GetJsChallengeRequest
  ): Promise<responses.GetJsChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": getJsChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getJsChallengeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/jsChallenge",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJsChallengeResponse>{},
        body: await response.json(),
        bodyKey: "jsChallenge",
        bodyModel: "model.JsChallenge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the configuration of a WAAS policy.
   * @param GetPolicyConfigRequest
   * @return GetPolicyConfigResponse
   * @throws OciError when an error occurs
   */
  public async getPolicyConfig(
    getPolicyConfigRequest: requests.GetPolicyConfigRequest
  ): Promise<responses.GetPolicyConfigResponse> {
    const pathParams = {
      "{waasPolicyId}": getPolicyConfigRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getPolicyConfigRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/policyConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPolicyConfigResponse>{},
        body: await response.json(),
        bodyKey: "policyConfig",
        bodyModel: "model.PolicyConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a protection rule in the Web Application Firewall configuration for a WAAS policy.
   * @param GetProtectionRuleRequest
   * @return GetProtectionRuleResponse
   * @throws OciError when an error occurs
   */
  public async getProtectionRule(
    getProtectionRuleRequest: requests.GetProtectionRuleRequest
  ): Promise<responses.GetProtectionRuleResponse> {
    const pathParams = {
      "{waasPolicyId}": getProtectionRuleRequest.waasPolicyId,
      "{protectionRuleKey}": getProtectionRuleRequest.protectionRuleKey
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getProtectionRuleRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/protectionRules/{protectionRuleKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProtectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "protectionRule",
        bodyModel: "model.ProtectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the protection settings in the Web Application Firewall configuration for a WAAS policy.
   * @param GetProtectionSettingsRequest
   * @return GetProtectionSettingsResponse
   * @throws OciError when an error occurs
   */
  public async getProtectionSettings(
    getProtectionSettingsRequest: requests.GetProtectionSettingsRequest
  ): Promise<responses.GetProtectionSettingsResponse> {
    const pathParams = {
      "{waasPolicyId}": getProtectionSettingsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getProtectionSettingsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/protectionSettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProtectionSettingsResponse>{},
        body: await response.json(),
        bodyKey: "protectionSettings",
        bodyModel: "model.ProtectionSettings",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a WAAS policy.
   * @param GetWaasPolicyRequest
   * @return GetWaasPolicyResponse
   * @throws OciError when an error occurs
   */
  public async getWaasPolicy(
    getWaasPolicyRequest: requests.GetWaasPolicyRequest
  ): Promise<responses.GetWaasPolicyResponse> {
    const pathParams = {
      "{waasPolicyId}": getWaasPolicyRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWaasPolicyRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWaasPolicyResponse>{},
        body: await response.json(),
        bodyKey: "waasPolicy",
        bodyModel: "model.WaasPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the address rate limiting settings of the Web Application Firewall configuration for a WAAS policy.
   * @param GetWafAddressRateLimitingRequest
   * @return GetWafAddressRateLimitingResponse
   * @throws OciError when an error occurs
   */
  public async getWafAddressRateLimiting(
    getWafAddressRateLimitingRequest: requests.GetWafAddressRateLimitingRequest
  ): Promise<responses.GetWafAddressRateLimitingResponse> {
    const pathParams = {
      "{waasPolicyId}": getWafAddressRateLimitingRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWafAddressRateLimitingRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/addressRateLimiting",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWafAddressRateLimitingResponse>{},
        body: await response.json(),
        bodyKey: "addressRateLimiting",
        bodyModel: "model.AddressRateLimiting",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the Web Application Firewall configuration details for a WAAS policy.
   * @param GetWafConfigRequest
   * @return GetWafConfigResponse
   * @throws OciError when an error occurs
   */
  public async getWafConfig(
    getWafConfigRequest: requests.GetWafConfigRequest
  ): Promise<responses.GetWafConfigResponse> {
    const pathParams = {
      "{waasPolicyId}": getWafConfigRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWafConfigRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWafConfigResponse>{},
        body: await response.json(),
        bodyKey: "wafConfig",
        bodyModel: "model.WafConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a specified work request.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Retry-After"),
            key: "retryAfter",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the currently configured access rules for the Web Application Firewall configuration of a specified WAAS policy.
   * The order of the access rules is important. The rules will be checked in the order they are specified and the first matching rule will be used.
   * @param ListAccessRulesRequest
   * @return ListAccessRulesResponse
   * @throws OciError when an error occurs
   */
  public async listAccessRules(
    listAccessRulesRequest: requests.ListAccessRulesRequest
  ): Promise<responses.ListAccessRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": listAccessRulesRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listAccessRulesRequest.limit,
      "page": listAccessRulesRequest.page
    };

    let headerParams = {
      "opc-request-id": listAccessRulesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/accessRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAccessRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AccessRule[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AccessRule objects
   * contained in responses from the listAccessRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAccessRules(
    request: requests.ListAccessRulesRequest
  ): AsyncIterableIterator<models.AccessRule> {
    return paginateRecords(request, req => this.listAccessRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAccessRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAccessRulesResponses(
    request: requests.ListAccessRulesRequest
  ): AsyncIterableIterator<responses.ListAccessRulesResponse> {
    return paginateResponses(request, req => this.listAccessRules(req));
  }

  /**
   * Gets a list of address lists that can be used in a WAAS policy.
   * @param ListAddressListsRequest
   * @return ListAddressListsResponse
   * @throws OciError when an error occurs
   */
  public async listAddressLists(
    listAddressListsRequest: requests.ListAddressListsRequest
  ): Promise<responses.ListAddressListsResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listAddressListsRequest.limit,
      "page": listAddressListsRequest.page,
      "sortBy": listAddressListsRequest.sortBy,
      "sortOrder": listAddressListsRequest.sortOrder,
      "compartmentId": listAddressListsRequest.compartmentId,
      "id": listAddressListsRequest.id,
      "name": listAddressListsRequest.name,
      "lifecycleState": listAddressListsRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo": listAddressListsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listAddressListsRequest.timeCreatedLessThan
    };

    let headerParams = {
      "opc-request-id": listAddressListsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAddressListsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AddressListSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AddressListSummary objects
   * contained in responses from the listAddressLists operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddressLists(
    request: requests.ListAddressListsRequest
  ): AsyncIterableIterator<models.AddressListSummary> {
    return paginateRecords(request, req => this.listAddressLists(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAddressLists operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddressListsResponses(
    request: requests.ListAddressListsRequest
  ): AsyncIterableIterator<responses.ListAddressListsResponse> {
    return paginateResponses(request, req => this.listAddressLists(req));
  }

  /**
   * Gets the currently configured caching rules for the Web Application Firewall configuration of a specified WAAS policy.
   * The rules are processed in the order they are specified in and the first matching rule will be used when processing a request.
   * @param ListCachingRulesRequest
   * @return ListCachingRulesResponse
   * @throws OciError when an error occurs
   */
  public async listCachingRules(
    listCachingRulesRequest: requests.ListCachingRulesRequest
  ): Promise<responses.ListCachingRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": listCachingRulesRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listCachingRulesRequest.limit,
      "page": listCachingRulesRequest.page
    };

    let headerParams = {
      "opc-request-id": listCachingRulesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/cachingRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCachingRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CachingRuleSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CachingRuleSummary objects
   * contained in responses from the listCachingRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCachingRules(
    request: requests.ListCachingRulesRequest
  ): AsyncIterableIterator<models.CachingRuleSummary> {
    return paginateRecords(request, req => this.listCachingRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCachingRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCachingRulesResponses(
    request: requests.ListCachingRulesRequest
  ): AsyncIterableIterator<responses.ListCachingRulesResponse> {
    return paginateResponses(request, req => this.listCachingRules(req));
  }

  /**
     * Gets the list of currently configured CAPTCHA challenges in the Web
* Application Firewall configuration of a WAAS policy.
* <p>
The order of the CAPTCHA challenges is important. The URL for each
* CAPTCHA will be checked in the order they are created.
* 
     * @param ListCaptchasRequest
     * @return ListCaptchasResponse
     * @throws OciError when an error occurs
     */
  public async listCaptchas(
    listCaptchasRequest: requests.ListCaptchasRequest
  ): Promise<responses.ListCaptchasResponse> {
    const pathParams = {
      "{waasPolicyId}": listCaptchasRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listCaptchasRequest.limit,
      "page": listCaptchasRequest.page
    };

    let headerParams = {
      "opc-request-id": listCaptchasRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/captchas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCaptchasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Captcha[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Captcha objects
   * contained in responses from the listCaptchas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCaptchas(
    request: requests.ListCaptchasRequest
  ): AsyncIterableIterator<models.Captcha> {
    return paginateRecords(request, req => this.listCaptchas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCaptchas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCaptchasResponses(
    request: requests.ListCaptchasRequest
  ): AsyncIterableIterator<responses.ListCaptchasResponse> {
    return paginateResponses(request, req => this.listCaptchas(req));
  }

  /**
   * Gets a list of SSL certificates that can be used in a WAAS policy.
   * @param ListCertificatesRequest
   * @return ListCertificatesResponse
   * @throws OciError when an error occurs
   */
  public async listCertificates(
    listCertificatesRequest: requests.ListCertificatesRequest
  ): Promise<responses.ListCertificatesResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listCertificatesRequest.limit,
      "page": listCertificatesRequest.page,
      "sortBy": listCertificatesRequest.sortBy,
      "sortOrder": listCertificatesRequest.sortOrder,
      "compartmentId": listCertificatesRequest.compartmentId,
      "id": listCertificatesRequest.id,
      "displayName": listCertificatesRequest.displayName,
      "lifecycleState": listCertificatesRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo": listCertificatesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listCertificatesRequest.timeCreatedLessThan
    };

    let headerParams = {
      "opc-request-id": listCertificatesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCertificatesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CertificateSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CertificateSummary objects
   * contained in responses from the listCertificates operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCertificates(
    request: requests.ListCertificatesRequest
  ): AsyncIterableIterator<models.CertificateSummary> {
    return paginateRecords(request, req => this.listCertificates(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCertificates operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCertificatesResponses(
    request: requests.ListCertificatesRequest
  ): AsyncIterableIterator<responses.ListCertificatesResponse> {
    return paginateResponses(request, req => this.listCertificates(req));
  }

  /**
   * Gets a list of custom protection rules for the specified Web Application Firewall.
   * @param ListCustomProtectionRulesRequest
   * @return ListCustomProtectionRulesResponse
   * @throws OciError when an error occurs
   */
  public async listCustomProtectionRules(
    listCustomProtectionRulesRequest: requests.ListCustomProtectionRulesRequest
  ): Promise<responses.ListCustomProtectionRulesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCustomProtectionRulesRequest.compartmentId,
      "limit": listCustomProtectionRulesRequest.limit,
      "page": listCustomProtectionRulesRequest.page,
      "sortBy": listCustomProtectionRulesRequest.sortBy,
      "sortOrder": listCustomProtectionRulesRequest.sortOrder,
      "id": listCustomProtectionRulesRequest.id,
      "displayName": listCustomProtectionRulesRequest.displayName,
      "lifecycleState": listCustomProtectionRulesRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo":
        listCustomProtectionRulesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listCustomProtectionRulesRequest.timeCreatedLessThan
    };

    let headerParams = {
      "opc-request-id": listCustomProtectionRulesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCustomProtectionRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CustomProtectionRuleSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CustomProtectionRuleSummary objects
   * contained in responses from the listCustomProtectionRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCustomProtectionRules(
    request: requests.ListCustomProtectionRulesRequest
  ): AsyncIterableIterator<models.CustomProtectionRuleSummary> {
    return paginateRecords(request, req => this.listCustomProtectionRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCustomProtectionRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCustomProtectionRulesResponses(
    request: requests.ListCustomProtectionRulesRequest
  ): AsyncIterableIterator<responses.ListCustomProtectionRulesResponse> {
    return paginateResponses(request, req => this.listCustomProtectionRules(req));
  }

  /**
   * Return the list of the tenant's edge node subnets. Use these CIDR blocks to restrict incoming traffic to your origin. These subnets are owned by OCI and forward traffic to customer origins. They are not associated with specific regions or compartments.
   * @param ListEdgeSubnetsRequest
   * @return ListEdgeSubnetsResponse
   * @throws OciError when an error occurs
   */
  public async listEdgeSubnets(
    listEdgeSubnetsRequest: requests.ListEdgeSubnetsRequest
  ): Promise<responses.ListEdgeSubnetsResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listEdgeSubnetsRequest.limit,
      "page": listEdgeSubnetsRequest.page,
      "sortBy": listEdgeSubnetsRequest.sortBy,
      "sortOrder": listEdgeSubnetsRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listEdgeSubnetsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/edgeSubnets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEdgeSubnetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "EdgeSubnet[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.EdgeSubnet objects
   * contained in responses from the listEdgeSubnets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllEdgeSubnets(
    request: requests.ListEdgeSubnetsRequest
  ): AsyncIterableIterator<models.EdgeSubnet> {
    return paginateRecords(request, req => this.listEdgeSubnets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listEdgeSubnets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllEdgeSubnetsResponses(
    request: requests.ListEdgeSubnetsRequest
  ): AsyncIterableIterator<responses.ListEdgeSubnetsResponse> {
    return paginateResponses(request, req => this.listEdgeSubnets(req));
  }

  /**
     * Gets the list of good bots defined in the Web Application Firewall configuration for a WAAS policy.
* <p>
The list is sorted by `key`, in ascending order.
* 
     * @param ListGoodBotsRequest
     * @return ListGoodBotsResponse
     * @throws OciError when an error occurs
     */
  public async listGoodBots(
    listGoodBotsRequest: requests.ListGoodBotsRequest
  ): Promise<responses.ListGoodBotsResponse> {
    const pathParams = {
      "{waasPolicyId}": listGoodBotsRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listGoodBotsRequest.limit,
      "page": listGoodBotsRequest.page
    };

    let headerParams = {
      "opc-request-id": listGoodBotsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/goodBots",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGoodBotsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "GoodBot[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.GoodBot objects
   * contained in responses from the listGoodBots operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGoodBots(
    request: requests.ListGoodBotsRequest
  ): AsyncIterableIterator<models.GoodBot> {
    return paginateRecords(request, req => this.listGoodBots(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listGoodBots operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGoodBotsResponses(
    request: requests.ListGoodBotsRequest
  ): AsyncIterableIterator<responses.ListGoodBotsResponse> {
    return paginateResponses(request, req => this.listGoodBots(req));
  }

  /**
   * Gets the list of available protection rules for a WAAS policy. Use the `GetWafConfig` operation to view a list of currently configured protection rules for the Web Application Firewall, or use the `ListRecommendations` operation to get a list of recommended protection rules for the Web Application Firewall.
   * The list is sorted by `key`, in ascending order.
   * @param ListProtectionRulesRequest
   * @return ListProtectionRulesResponse
   * @throws OciError when an error occurs
   */
  public async listProtectionRules(
    listProtectionRulesRequest: requests.ListProtectionRulesRequest
  ): Promise<responses.ListProtectionRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": listProtectionRulesRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listProtectionRulesRequest.limit,
      "page": listProtectionRulesRequest.page,
      "modSecurityRuleId": listProtectionRulesRequest.modSecurityRuleId,
      "action": listProtectionRulesRequest.action
    };

    let headerParams = {
      "opc-request-id": listProtectionRulesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/protectionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProtectionRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ProtectionRule[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ProtectionRule objects
   * contained in responses from the listProtectionRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProtectionRules(
    request: requests.ListProtectionRulesRequest
  ): AsyncIterableIterator<models.ProtectionRule> {
    return paginateRecords(request, req => this.listProtectionRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProtectionRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProtectionRulesResponses(
    request: requests.ListProtectionRulesRequest
  ): AsyncIterableIterator<responses.ListProtectionRulesResponse> {
    return paginateResponses(request, req => this.listProtectionRules(req));
  }

  /**
     * Gets the list of recommended Web Application Firewall protection rules.
* <p>
Use the `POST /waasPolicies/{waasPolicyId}/actions/acceptWafConfigRecommendations` method to accept recommended Web Application Firewall protection rules. For more information, see [WAF Protection Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafprotectionrules.htm).
* The list is sorted by `key`, in ascending order.
     * @param ListRecommendationsRequest
     * @return ListRecommendationsResponse
     * @throws OciError when an error occurs
     */
  public async listRecommendations(
    listRecommendationsRequest: requests.ListRecommendationsRequest
  ): Promise<responses.ListRecommendationsResponse> {
    const pathParams = {
      "{waasPolicyId}": listRecommendationsRequest.waasPolicyId
    };

    const queryParams = {
      "recommendedAction": listRecommendationsRequest.recommendedAction,
      "limit": listRecommendationsRequest.limit,
      "page": listRecommendationsRequest.page
    };

    let headerParams = {
      "opc-request-id": listRecommendationsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/recommendations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecommendationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Recommendation[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Recommendation objects
   * contained in responses from the listRecommendations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRecommendations(
    request: requests.ListRecommendationsRequest
  ): AsyncIterableIterator<models.Recommendation> {
    return paginateRecords(request, req => this.listRecommendations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRecommendations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRecommendationsResponses(
    request: requests.ListRecommendationsRequest
  ): AsyncIterableIterator<responses.ListRecommendationsResponse> {
    return paginateResponses(request, req => this.listRecommendations(req));
  }

  /**
   * Gets the list of available web application threat intelligence feeds
   * and the actions set for each feed. The list is sorted by `key`,
   * in ascending order.
   *
   * @param ListThreatFeedsRequest
   * @return ListThreatFeedsResponse
   * @throws OciError when an error occurs
   */
  public async listThreatFeeds(
    listThreatFeedsRequest: requests.ListThreatFeedsRequest
  ): Promise<responses.ListThreatFeedsResponse> {
    const pathParams = {
      "{waasPolicyId}": listThreatFeedsRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listThreatFeedsRequest.limit,
      "page": listThreatFeedsRequest.page
    };

    let headerParams = {
      "opc-request-id": listThreatFeedsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/threatFeeds",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListThreatFeedsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ThreatFeed[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ThreatFeed objects
   * contained in responses from the listThreatFeeds operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllThreatFeeds(
    request: requests.ListThreatFeedsRequest
  ): AsyncIterableIterator<models.ThreatFeed> {
    return paginateRecords(request, req => this.listThreatFeeds(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listThreatFeeds operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllThreatFeedsResponses(
    request: requests.ListThreatFeedsRequest
  ): AsyncIterableIterator<responses.ListThreatFeedsResponse> {
    return paginateResponses(request, req => this.listThreatFeeds(req));
  }

  /**
   * Gets a list of WAAS policies.
   * @param ListWaasPoliciesRequest
   * @return ListWaasPoliciesResponse
   * @throws OciError when an error occurs
   */
  public async listWaasPolicies(
    listWaasPoliciesRequest: requests.ListWaasPoliciesRequest
  ): Promise<responses.ListWaasPoliciesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWaasPoliciesRequest.compartmentId,
      "limit": listWaasPoliciesRequest.limit,
      "page": listWaasPoliciesRequest.page,
      "sortBy": listWaasPoliciesRequest.sortBy,
      "sortOrder": listWaasPoliciesRequest.sortOrder,
      "id": listWaasPoliciesRequest.id,
      "displayName": listWaasPoliciesRequest.displayName,
      "lifecycleState": listWaasPoliciesRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo": listWaasPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listWaasPoliciesRequest.timeCreatedLessThan
    };

    let headerParams = {
      "opc-request-id": listWaasPoliciesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWaasPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WaasPolicySummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WaasPolicySummary objects
   * contained in responses from the listWaasPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWaasPolicies(
    request: requests.ListWaasPoliciesRequest
  ): AsyncIterableIterator<models.WaasPolicySummary> {
    return paginateRecords(request, req => this.listWaasPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWaasPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWaasPoliciesResponses(
    request: requests.ListWaasPoliciesRequest
  ): AsyncIterableIterator<responses.ListWaasPoliciesResponse> {
    return paginateResponses(request, req => this.listWaasPolicies(req));
  }

  /**
   * Gets the list of currently configured custom protection rules for a WAAS policy.
   * @param ListWaasPolicyCustomProtectionRulesRequest
   * @return ListWaasPolicyCustomProtectionRulesResponse
   * @throws OciError when an error occurs
   */
  public async listWaasPolicyCustomProtectionRules(
    listWaasPolicyCustomProtectionRulesRequest: requests.ListWaasPolicyCustomProtectionRulesRequest
  ): Promise<responses.ListWaasPolicyCustomProtectionRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": listWaasPolicyCustomProtectionRulesRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listWaasPolicyCustomProtectionRulesRequest.limit,
      "page": listWaasPolicyCustomProtectionRulesRequest.page,
      "modSecurityRuleId": listWaasPolicyCustomProtectionRulesRequest.modSecurityRuleId,
      "action": listWaasPolicyCustomProtectionRulesRequest.action
    };

    let headerParams = {
      "opc-request-id": listWaasPolicyCustomProtectionRulesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/customProtectionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWaasPolicyCustomProtectionRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WaasPolicyCustomProtectionRuleSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WaasPolicyCustomProtectionRuleSummary objects
   * contained in responses from the listWaasPolicyCustomProtectionRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWaasPolicyCustomProtectionRules(
    request: requests.ListWaasPolicyCustomProtectionRulesRequest
  ): AsyncIterableIterator<models.WaasPolicyCustomProtectionRuleSummary> {
    return paginateRecords(request, req => this.listWaasPolicyCustomProtectionRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWaasPolicyCustomProtectionRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWaasPolicyCustomProtectionRulesResponses(
    request: requests.ListWaasPolicyCustomProtectionRulesRequest
  ): AsyncIterableIterator<responses.ListWaasPolicyCustomProtectionRulesResponse> {
    return paginateResponses(request, req => this.listWaasPolicyCustomProtectionRules(req));
  }

  /**
   * Gets the number of blocked requests by a Web Application Firewall feature in five minute blocks, sorted by `timeObserved` in ascending order (starting from oldest data).
   * @param ListWafBlockedRequestsRequest
   * @return ListWafBlockedRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWafBlockedRequests(
    listWafBlockedRequestsRequest: requests.ListWafBlockedRequestsRequest
  ): Promise<responses.ListWafBlockedRequestsResponse> {
    const pathParams = {
      "{waasPolicyId}": listWafBlockedRequestsRequest.waasPolicyId
    };

    const queryParams = {
      "timeObservedGreaterThanOrEqualTo":
        listWafBlockedRequestsRequest.timeObservedGreaterThanOrEqualTo,
      "timeObservedLessThan": listWafBlockedRequestsRequest.timeObservedLessThan,
      "limit": listWafBlockedRequestsRequest.limit,
      "page": listWafBlockedRequestsRequest.page,
      "wafFeature": listWafBlockedRequestsRequest.wafFeature
    };

    let headerParams = {
      "opc-request-id": listWafBlockedRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/reports/waf/blocked",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWafBlockedRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WafBlockedRequest[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WafBlockedRequest objects
   * contained in responses from the listWafBlockedRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafBlockedRequests(
    request: requests.ListWafBlockedRequestsRequest
  ): AsyncIterableIterator<models.WafBlockedRequest> {
    return paginateRecords(request, req => this.listWafBlockedRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWafBlockedRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafBlockedRequestsResponses(
    request: requests.ListWafBlockedRequestsRequest
  ): AsyncIterableIterator<responses.ListWafBlockedRequestsResponse> {
    return paginateResponses(request, req => this.listWafBlockedRequests(req));
  }

  /**
   * Gets structured Web Application Firewall event logs for a WAAS
   * policy. Sorted by the `timeObserved` in ascending order (starting from the
   * oldest recorded event).
   *
   * @param ListWafLogsRequest
   * @return ListWafLogsResponse
   * @throws OciError when an error occurs
   */
  public async listWafLogs(
    listWafLogsRequest: requests.ListWafLogsRequest
  ): Promise<responses.ListWafLogsResponse> {
    const pathParams = {
      "{waasPolicyId}": listWafLogsRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listWafLogsRequest.limit,
      "page": listWafLogsRequest.page,
      "timeObservedGreaterThanOrEqualTo": listWafLogsRequest.timeObservedGreaterThanOrEqualTo,
      "timeObservedLessThan": listWafLogsRequest.timeObservedLessThan,
      "textContains": listWafLogsRequest.textContains,
      "accessRuleKey": listWafLogsRequest.accessRuleKey,
      "action": listWafLogsRequest.action,
      "clientAddress": listWafLogsRequest.clientAddress,
      "countryCode": listWafLogsRequest.countryCode,
      "countryName": listWafLogsRequest.countryName,
      "fingerprint": listWafLogsRequest.fingerprint,
      "httpMethod": listWafLogsRequest.httpMethod,
      "incidentKey": listWafLogsRequest.incidentKey,
      "logType": listWafLogsRequest.logType,
      "originAddress": listWafLogsRequest.originAddress,
      "referrer": listWafLogsRequest.referrer,
      "requestUrl": listWafLogsRequest.requestUrl,
      "responseCode": listWafLogsRequest.responseCode,
      "threatFeedKey": listWafLogsRequest.threatFeedKey,
      "userAgent": listWafLogsRequest.userAgent,
      "protectionRuleKey": listWafLogsRequest.protectionRuleKey
    };

    let headerParams = {
      "opc-request-id": listWafLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafLogs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWafLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WafLog[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WafLog objects
   * contained in responses from the listWafLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafLogs(
    request: requests.ListWafLogsRequest
  ): AsyncIterableIterator<models.WafLog> {
    return paginateRecords(request, req => this.listWafLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWafLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafLogsResponses(
    request: requests.ListWafLogsRequest
  ): AsyncIterableIterator<responses.ListWafLogsResponse> {
    return paginateResponses(request, req => this.listWafLogs(req));
  }

  /**
   * Gets the number of requests managed by a Web Application Firewall
   * over a specified period of time, including blocked requests. Sorted
   * by `timeObserved` in ascending order (starting from oldest requests).
   *
   * @param ListWafRequestsRequest
   * @return ListWafRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWafRequests(
    listWafRequestsRequest: requests.ListWafRequestsRequest
  ): Promise<responses.ListWafRequestsResponse> {
    const pathParams = {
      "{waasPolicyId}": listWafRequestsRequest.waasPolicyId
    };

    const queryParams = {
      "timeObservedGreaterThanOrEqualTo": listWafRequestsRequest.timeObservedGreaterThanOrEqualTo,
      "timeObservedLessThan": listWafRequestsRequest.timeObservedLessThan,
      "limit": listWafRequestsRequest.limit,
      "page": listWafRequestsRequest.page
    };

    let headerParams = {
      "opc-request-id": listWafRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/reports/waf/requests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWafRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WafRequest[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WafRequest objects
   * contained in responses from the listWafRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafRequests(
    request: requests.ListWafRequestsRequest
  ): AsyncIterableIterator<models.WafRequest> {
    return paginateRecords(request, req => this.listWafRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWafRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafRequestsResponses(
    request: requests.ListWafRequestsRequest
  ): AsyncIterableIterator<responses.ListWafRequestsResponse> {
    return paginateResponses(request, req => this.listWafRequests(req));
  }

  /**
   * Gets the Web Application Firewall traffic data for a WAAS policy.
   * Sorted by `timeObserved` in ascending order (starting from oldest data).
   *
   * @param ListWafTrafficRequest
   * @return ListWafTrafficResponse
   * @throws OciError when an error occurs
   */
  public async listWafTraffic(
    listWafTrafficRequest: requests.ListWafTrafficRequest
  ): Promise<responses.ListWafTrafficResponse> {
    const pathParams = {
      "{waasPolicyId}": listWafTrafficRequest.waasPolicyId
    };

    const queryParams = {
      "timeObservedGreaterThanOrEqualTo": listWafTrafficRequest.timeObservedGreaterThanOrEqualTo,
      "timeObservedLessThan": listWafTrafficRequest.timeObservedLessThan,
      "limit": listWafTrafficRequest.limit,
      "page": listWafTrafficRequest.page
    };

    let headerParams = {
      "opc-request-id": listWafTrafficRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/reports/waf/traffic",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWafTrafficResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WafTrafficDatum[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WafTrafficDatum objects
   * contained in responses from the listWafTraffic operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafTraffic(
    request: requests.ListWafTrafficRequest
  ): AsyncIterableIterator<models.WafTrafficDatum> {
    return paginateRecords(request, req => this.listWafTraffic(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWafTraffic operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWafTrafficResponses(
    request: requests.ListWafTrafficRequest
  ): AsyncIterableIterator<responses.ListWafTrafficResponse> {
    return paginateResponses(request, req => this.listWafTraffic(req));
  }

  /**
   * Gets the list of whitelists defined in the Web Application Firewall configuration for a WAAS policy.
   * @param ListWhitelistsRequest
   * @return ListWhitelistsResponse
   * @throws OciError when an error occurs
   */
  public async listWhitelists(
    listWhitelistsRequest: requests.ListWhitelistsRequest
  ): Promise<responses.ListWhitelistsResponse> {
    const pathParams = {
      "{waasPolicyId}": listWhitelistsRequest.waasPolicyId
    };

    const queryParams = {
      "limit": listWhitelistsRequest.limit,
      "page": listWhitelistsRequest.page
    };

    let headerParams = {
      "opc-request-id": listWhitelistsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/whitelists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWhitelistsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Whitelist[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Whitelist objects
   * contained in responses from the listWhitelists operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWhitelists(
    request: requests.ListWhitelistsRequest
  ): AsyncIterableIterator<models.Whitelist> {
    return paginateRecords(request, req => this.listWhitelists(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWhitelists operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWhitelistsResponses(
    request: requests.ListWhitelistsRequest
  ): AsyncIterableIterator<responses.ListWhitelistsResponse> {
    return paginateResponses(request, req => this.listWhitelists(req));
  }

  /**
   * Gets a list of subnets (CIDR notation) from which the WAAS EDGE may make requests. The subnets are owned by OCI and forward traffic to your origins. Allow traffic from these subnets to your origins. They are not associated with specific regions or compartments.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    const pathParams = {};

    const queryParams = {
      "waasPolicyId": listWorkRequestsRequest.waasPolicyId,
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<models.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Performs a purge of the cache for each specified resource. If no resources are passed, the cache for the entire Web Application Firewall will be purged.
   * For more information, see [Caching Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/cachingrules.htm#purge).
   * @param PurgeCacheRequest
   * @return PurgeCacheResponse
   * @throws OciError when an error occurs
   */
  public async purgeCache(
    purgeCacheRequest: requests.PurgeCacheRequest
  ): Promise<responses.PurgeCacheResponse> {
    const pathParams = {
      "{waasPolicyId}": purgeCacheRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": purgeCacheRequest.opcRequestId,
      "if-match": purgeCacheRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/actions/purgeCache",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        purgeCacheRequest.purgeCache,
        "PurgeCache",
        models.PurgeCache.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.PurgeCacheResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the list of access rules in the Web Application Firewall configuration for a specified WAAS policy. Access rules allow explicit actions to be defined and executed for requests that meet various conditions. A rule action can be set to allow, detect, or block requests. The detect setting allows the request to pass through the Web Application Firewall and is tagged with a `DETECT` flag in the Web Application Firewall's log.
* <p>
This operation can create, delete, update, and/or reorder access rules depending on the structure of the request body.
* <p>
Access rules can be updated by changing the properties of the access rule object with the rule's key specified in the key field. Access rules can be reordered by changing the order of the access rules in the list when updating.
* <p>
Access rules can be created by adding a new access rule object to the list without a `key` property specified. A `key` will be generated for the new access rule upon update.
* <p>
Any existing access rules that are not specified with a `key` in the list of access rules will be deleted upon update.
     * @param UpdateAccessRulesRequest
     * @return UpdateAccessRulesResponse
     * @throws OciError when an error occurs
     */
  public async updateAccessRules(
    updateAccessRulesRequest: requests.UpdateAccessRulesRequest
  ): Promise<responses.UpdateAccessRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": updateAccessRulesRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateAccessRulesRequest.opcRequestId,
      "opc-retry-token": updateAccessRulesRequest.opcRetryToken,
      "if-match": updateAccessRulesRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/accessRules",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAccessRulesRequest.accessRules,
        "Array<model.AccessRule>",
        models.AccessRule.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAccessRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the details of an address list. Only the fields specified in the request body will be updated; all other properties will remain unchanged.
   * @param UpdateAddressListRequest
   * @return UpdateAddressListResponse
   * @throws OciError when an error occurs
   */
  public async updateAddressList(
    updateAddressListRequest: requests.UpdateAddressListRequest
  ): Promise<responses.UpdateAddressListResponse> {
    const pathParams = {
      "{addressListId}": updateAddressListRequest.addressListId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateAddressListRequest.opcRequestId,
      "if-match": updateAddressListRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addressLists/{addressListId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAddressListRequest.updateAddressListDetails,
        "UpdateAddressListDetails",
        models.UpdateAddressListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the configuration for each specified caching rule.
* <p>
Caching rules WAF policies allow you to selectively cache content on Oracle Cloud Infrastructure's edge servers, such as webpages or certain file types. For more information about caching rules, see [Caching Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/cachingrules.htm).
* <p>
This operation can create, delete, update, and/or reorder caching rules depending on the structure of the request body. Caching rules can be updated by changing the properties of the caching rule object with the rule's key specified in the key field. Any existing caching rules that are not specified with a key in the list of access rules will be deleted upon update.
* <p>
The order the caching rules are specified in is important. The rules are processed in the order they are specified and the first matching rule will be used when processing a request. Use `ListCachingRules` to view a list of all available caching rules in a compartment.
     * @param UpdateCachingRulesRequest
     * @return UpdateCachingRulesResponse
     * @throws OciError when an error occurs
     */
  public async updateCachingRules(
    updateCachingRulesRequest: requests.UpdateCachingRulesRequest
  ): Promise<responses.UpdateCachingRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": updateCachingRulesRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateCachingRulesRequest.opcRequestId,
      "opc-retry-token": updateCachingRulesRequest.opcRetryToken,
      "if-match": updateCachingRulesRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/cachingRules",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCachingRulesRequest.cachingRulesDetails,
        "Array<model.CachingRule>",
        models.CachingRule.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCachingRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the list of CAPTCHA challenges in the Web Application Firewall configuration for a WAAS policy.
* This operation can create, update, or delete CAPTCHAs depending on the structure of the request body.
* CAPTCHA challenges can be updated by changing the properties of the CAPTCHA object with the rule's key specified in the key field. CAPTCHA challenges can be reordered by changing the order of the CAPTCHA challenges in the list when updating.
* <p>
CAPTCHA challenges can be created by adding a new access rule object to the list without a `key` property specified. A `key` will be generated for the new CAPTCHA challenges upon update.
* <p>
Any existing CAPTCHA challenges that are not specified with a `key` in the list of CAPTCHA challenges will be deleted upon update.
     * @param UpdateCaptchasRequest
     * @return UpdateCaptchasResponse
     * @throws OciError when an error occurs
     */
  public async updateCaptchas(
    updateCaptchasRequest: requests.UpdateCaptchasRequest
  ): Promise<responses.UpdateCaptchasResponse> {
    const pathParams = {
      "{waasPolicyId}": updateCaptchasRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateCaptchasRequest.opcRequestId,
      "opc-retry-token": updateCaptchasRequest.opcRetryToken,
      "if-match": updateCaptchasRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/captchas",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCaptchasRequest.captchas,
        "Array<model.Captcha>",
        models.Captcha.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCaptchasResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * It is not possible to update a certificate, only create and delete. Therefore, this operation can only update the display name, freeform tags, and defined tags of a certificate.
   * @param UpdateCertificateRequest
   * @return UpdateCertificateResponse
   * @throws OciError when an error occurs
   */
  public async updateCertificate(
    updateCertificateRequest: requests.UpdateCertificateRequest
  ): Promise<responses.UpdateCertificateResponse> {
    const pathParams = {
      "{certificateId}": updateCertificateRequest.certificateId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateCertificateRequest.opcRequestId,
      "if-match": updateCertificateRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/certificates/{certificateId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCertificateRequest.updateCertificateDetails,
        "UpdateCertificateDetails",
        models.UpdateCertificateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCertificateResponse>{},
        body: await response.json(),
        bodyKey: "certificate",
        bodyModel: "model.Certificate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the configuration of a custom protection rule. Only the fields specified in the request body will be updated; all other properties will remain unchanged.
   * @param UpdateCustomProtectionRuleRequest
   * @return UpdateCustomProtectionRuleResponse
   * @throws OciError when an error occurs
   */
  public async updateCustomProtectionRule(
    updateCustomProtectionRuleRequest: requests.UpdateCustomProtectionRuleRequest
  ): Promise<responses.UpdateCustomProtectionRuleResponse> {
    const pathParams = {
      "{customProtectionRuleId}": updateCustomProtectionRuleRequest.customProtectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateCustomProtectionRuleRequest.opcRequestId,
      "opc-retry-token": updateCustomProtectionRuleRequest.opcRetryToken,
      "if-match": updateCustomProtectionRuleRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customProtectionRules/{customProtectionRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCustomProtectionRuleRequest.updateCustomProtectionRuleDetails,
        "UpdateCustomProtectionRuleDetails",
        models.UpdateCustomProtectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCustomProtectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "customProtectionRule",
        bodyModel: "model.CustomProtectionRule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the Device Fingerprint Challenge (DFC) settings in the Web Application Firewall configuration for a policy. The DFC generates a hashed signature of both virtual and real browsers based on 50+ attributes. These proprietary signatures are then leveraged for real-time correlation to identify and block malicious bots.
* <p>
The signature is based on a library of attributes detected via JavaScript listeners; the attributes include OS, screen resolution, fonts, UserAgent, IP address, etc. We are constantly making improvements and considering new libraries to include in our DFC build. We can also exclude attributes from the signature as needed.
* <p>
DFC collects attributes to generate a hashed signature about a client \u2013 if a fingerprint is not possible, then it will result in a block or alert action. Actions can be enforced across multiple devices if they share they have the same fingerprint.
     * @param UpdateDeviceFingerprintChallengeRequest
     * @return UpdateDeviceFingerprintChallengeResponse
     * @throws OciError when an error occurs
     */
  public async updateDeviceFingerprintChallenge(
    updateDeviceFingerprintChallengeRequest: requests.UpdateDeviceFingerprintChallengeRequest
  ): Promise<responses.UpdateDeviceFingerprintChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": updateDeviceFingerprintChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateDeviceFingerprintChallengeRequest.opcRequestId,
      "opc-retry-token": updateDeviceFingerprintChallengeRequest.opcRetryToken,
      "if-match": updateDeviceFingerprintChallengeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/deviceFingerprintChallenge",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeviceFingerprintChallengeRequest.updateDeviceFingerprintChallengeDetails,
        "DeviceFingerprintChallenge",
        models.DeviceFingerprintChallenge.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeviceFingerprintChallengeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the list of good bots in the Web Application Firewall configuration for a policy. Only the fields specified in the request body will be updated, all other configuration properties will remain unchanged.
* <p>
Good bots allows you to manage access for bots from known providers, such as Google or Baidu. For more information about good bots, see [Bot Management](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/botmanagement.htm).
     * @param UpdateGoodBotsRequest
     * @return UpdateGoodBotsResponse
     * @throws OciError when an error occurs
     */
  public async updateGoodBots(
    updateGoodBotsRequest: requests.UpdateGoodBotsRequest
  ): Promise<responses.UpdateGoodBotsResponse> {
    const pathParams = {
      "{waasPolicyId}": updateGoodBotsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateGoodBotsRequest.opcRequestId,
      "opc-retry-token": updateGoodBotsRequest.opcRetryToken,
      "if-match": updateGoodBotsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/goodBots",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateGoodBotsRequest.goodBots,
        "Array<model.GoodBot>",
        models.GoodBot.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateGoodBotsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the Human Interaction Challenge (HIC) settings in the Web Application Firewall configuration for a WAAS policy. HIC is a countermeasure that allows the proxy to check the user's browser for various behaviors that distinguish a human presence from a bot.
   * @param UpdateHumanInteractionChallengeRequest
   * @return UpdateHumanInteractionChallengeResponse
   * @throws OciError when an error occurs
   */
  public async updateHumanInteractionChallenge(
    updateHumanInteractionChallengeRequest: requests.UpdateHumanInteractionChallengeRequest
  ): Promise<responses.UpdateHumanInteractionChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": updateHumanInteractionChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateHumanInteractionChallengeRequest.opcRequestId,
      "opc-retry-token": updateHumanInteractionChallengeRequest.opcRetryToken,
      "if-match": updateHumanInteractionChallengeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/humanInteractionChallenge",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHumanInteractionChallengeRequest.updateHumanInteractionChallengeDetails,
        "HumanInteractionChallenge",
        models.HumanInteractionChallenge.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHumanInteractionChallengeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the JavaScript challenge settings in the Web Application Firewall configuration for a WAAS policy. JavaScript Challenge validates that the client can accept JavaScript with a binary decision. For more information, see [Bot Management](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/botmanagement.htm).
   * @param UpdateJsChallengeRequest
   * @return UpdateJsChallengeResponse
   * @throws OciError when an error occurs
   */
  public async updateJsChallenge(
    updateJsChallengeRequest: requests.UpdateJsChallengeRequest
  ): Promise<responses.UpdateJsChallengeResponse> {
    const pathParams = {
      "{waasPolicyId}": updateJsChallengeRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateJsChallengeRequest.opcRequestId,
      "opc-retry-token": updateJsChallengeRequest.opcRetryToken,
      "if-match": updateJsChallengeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/jsChallenge",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJsChallengeRequest.updateJsChallengeDetails,
        "JsChallenge",
        models.JsChallenge.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJsChallengeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the configuration for a WAAS policy. Only the fields specified in the request body will be updated; all other properties will remain unchanged.
   * @param UpdatePolicyConfigRequest
   * @return UpdatePolicyConfigResponse
   * @throws OciError when an error occurs
   */
  public async updatePolicyConfig(
    updatePolicyConfigRequest: requests.UpdatePolicyConfigRequest
  ): Promise<responses.UpdatePolicyConfigResponse> {
    const pathParams = {
      "{waasPolicyId}": updatePolicyConfigRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updatePolicyConfigRequest.opcRequestId,
      "opc-retry-token": updatePolicyConfigRequest.opcRetryToken,
      "if-match": updatePolicyConfigRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/policyConfig",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePolicyConfigRequest.updatePolicyConfigDetails,
        "PolicyConfig",
        models.PolicyConfig.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePolicyConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the action for each specified protection rule. Requests can either be allowed, blocked, or trigger an alert if they meet the parameters of an applied rule. For more information on protection rules, see [WAF Protection Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafprotectionrules.htm).
   * This operation can update or disable protection rules depending on the structure of the request body.
   * Protection rules can be updated by changing the properties of the protection rule object with the rule's key specified in the key field.
   * @param UpdateProtectionRulesRequest
   * @return UpdateProtectionRulesResponse
   * @throws OciError when an error occurs
   */
  public async updateProtectionRules(
    updateProtectionRulesRequest: requests.UpdateProtectionRulesRequest
  ): Promise<responses.UpdateProtectionRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": updateProtectionRulesRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateProtectionRulesRequest.opcRequestId,
      "if-match": updateProtectionRulesRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/protectionRules",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProtectionRulesRequest.protectionRules,
        "Array<model.ProtectionRuleAction>",
        models.ProtectionRuleAction.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProtectionRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the protection settings in the Web Application Firewall configuration for a WAAS policy. Protection settings allow you define what action is taken when a request is blocked by the Web Application Firewall, such as returning a response code or block page. Only the fields specified in the request body will be updated; all other fields will remain unchanged.
   * @param UpdateProtectionSettingsRequest
   * @return UpdateProtectionSettingsResponse
   * @throws OciError when an error occurs
   */
  public async updateProtectionSettings(
    updateProtectionSettingsRequest: requests.UpdateProtectionSettingsRequest
  ): Promise<responses.UpdateProtectionSettingsResponse> {
    const pathParams = {
      "{waasPolicyId}": updateProtectionSettingsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateProtectionSettingsRequest.opcRequestId,
      "opc-retry-token": updateProtectionSettingsRequest.opcRetryToken,
      "if-match": updateProtectionSettingsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/protectionSettings",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProtectionSettingsRequest.updateProtectionSettingsDetails,
        "ProtectionSettings",
        models.ProtectionSettings.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProtectionSettingsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the action to take when a request's IP address matches an address in the specified threat intelligence feed. Threat intelligence feeds are compiled lists of IP addresses with malicious reputations based on internet intelligence. Only the threat feeds specified in the request body will be updated; all other threat feeds will remain unchanged.
   * @param UpdateThreatFeedsRequest
   * @return UpdateThreatFeedsResponse
   * @throws OciError when an error occurs
   */
  public async updateThreatFeeds(
    updateThreatFeedsRequest: requests.UpdateThreatFeedsRequest
  ): Promise<responses.UpdateThreatFeedsResponse> {
    const pathParams = {
      "{waasPolicyId}": updateThreatFeedsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateThreatFeedsRequest.opcRequestId,
      "if-match": updateThreatFeedsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/threatFeeds",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateThreatFeedsRequest.threatFeeds,
        "Array<model.ThreatFeedAction>",
        models.ThreatFeedAction.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateThreatFeedsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the details of a WAAS policy, including origins and tags. Only the fields specified in the request body will be updated; all other properties will remain unchanged.
   * To update platform provided resources such as `GoodBots`, `ProtectionRules`, and `ThreatFeeds`, first retrieve the list of available resources with the related list operation such as `GetThreatFeeds` or `GetProtectionRules`.
   * The returned list will contain objects with `key` properties that can be used to update the resource during the `UpdateWaasPolicy` request.
   * @param UpdateWaasPolicyRequest
   * @return UpdateWaasPolicyResponse
   * @throws OciError when an error occurs
   */
  public async updateWaasPolicy(
    updateWaasPolicyRequest: requests.UpdateWaasPolicyRequest
  ): Promise<responses.UpdateWaasPolicyResponse> {
    const pathParams = {
      "{waasPolicyId}": updateWaasPolicyRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateWaasPolicyRequest.opcRequestId,
      "opc-retry-token": updateWaasPolicyRequest.opcRetryToken,
      "if-match": updateWaasPolicyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWaasPolicyRequest.updateWaasPolicyDetails,
        "UpdateWaasPolicyDetails",
        models.UpdateWaasPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWaasPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the action for each specified custom protection rule. Only the `DETECT` and `BLOCK` actions can be set. Disabled rules should not be included in the list. For more information on protection rules, see [WAF Protection Rules](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafprotectionrules.htm).
   * @param UpdateWaasPolicyCustomProtectionRulesRequest
   * @return UpdateWaasPolicyCustomProtectionRulesResponse
   * @throws OciError when an error occurs
   */
  public async updateWaasPolicyCustomProtectionRules(
    updateWaasPolicyCustomProtectionRulesRequest: requests.UpdateWaasPolicyCustomProtectionRulesRequest
  ): Promise<responses.UpdateWaasPolicyCustomProtectionRulesResponse> {
    const pathParams = {
      "{waasPolicyId}": updateWaasPolicyCustomProtectionRulesRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateWaasPolicyCustomProtectionRulesRequest.opcRequestId,
      "opc-retry-token": updateWaasPolicyCustomProtectionRulesRequest.opcRetryToken,
      "if-match": updateWaasPolicyCustomProtectionRulesRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/customProtectionRules",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWaasPolicyCustomProtectionRulesRequest.updateCustomProtectionRulesDetails,
        "Array<model.CustomProtectionRuleSetting>",
        models.CustomProtectionRuleSetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWaasPolicyCustomProtectionRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the address rate limiting settings in the Web Application Firewall configuration for a policy. Rate limiting allows you to configure a threshold for the number of requests from a unique IP address for the given period. You can also define the response code for the requests from the same address that exceed the threshold.
   * @param UpdateWafAddressRateLimitingRequest
   * @return UpdateWafAddressRateLimitingResponse
   * @throws OciError when an error occurs
   */
  public async updateWafAddressRateLimiting(
    updateWafAddressRateLimitingRequest: requests.UpdateWafAddressRateLimitingRequest
  ): Promise<responses.UpdateWafAddressRateLimitingResponse> {
    const pathParams = {
      "{waasPolicyId}": updateWafAddressRateLimitingRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateWafAddressRateLimitingRequest.opcRequestId,
      "opc-retry-token": updateWafAddressRateLimitingRequest.opcRetryToken,
      "if-match": updateWafAddressRateLimitingRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/addressRateLimiting",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWafAddressRateLimitingRequest.updateWafAddressRateLimitingDetails,
        "AddressRateLimiting",
        models.AddressRateLimiting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWafAddressRateLimitingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the Web Application Firewall configuration for a specified WAAS policy.
* <p>
To update platform provided resources such as `GoodBots`, `ProtectionRules`, and `ThreatFeeds`,
* first retrieve the list of available resources with the related list operation, such as
* `GetThreatFeeds` or `GetProtectionRules`.
* <p>
The returned list will contain objects with `key` properties that can be used to update the
* resource during the `UpdateWafConfig` request.
* 
     * @param UpdateWafConfigRequest
     * @return UpdateWafConfigResponse
     * @throws OciError when an error occurs
     */
  public async updateWafConfig(
    updateWafConfigRequest: requests.UpdateWafConfigRequest
  ): Promise<responses.UpdateWafConfigResponse> {
    const pathParams = {
      "{waasPolicyId}": updateWafConfigRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateWafConfigRequest.opcRequestId,
      "opc-retry-token": updateWafConfigRequest.opcRetryToken,
      "if-match": updateWafConfigRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWafConfigRequest.updateWafConfigDetails,
        "WafConfig",
        models.WafConfig.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWafConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
     * Updates the list of IP addresses that bypass the Web Application Firewall for a WAAS policy. Supports both single IP addresses or subnet masks (CIDR notation).
* <p>
This operation can create, delete, update, and/or reorder whitelists depending on the structure of the request body.
* <p>
Whitelists can be updated by changing the properties of the whitelist object with the rule's key specified in the `key` field. Whitelists can be reordered by changing the order of the whitelists in the list of objects when updating.
* <p>
Whitelists can be created by adding a new whitelist object to the list without a `key` property specified. A `key` will be generated for the new whitelist upon update.
* <p>
Whitelists can be deleted by removing the existing whitelist object from the list. Any existing whitelists that are not specified with a `key` in the list of access rules will be deleted upon update.
     * @param UpdateWhitelistsRequest
     * @return UpdateWhitelistsResponse
     * @throws OciError when an error occurs
     */
  public async updateWhitelists(
    updateWhitelistsRequest: requests.UpdateWhitelistsRequest
  ): Promise<responses.UpdateWhitelistsResponse> {
    const pathParams = {
      "{waasPolicyId}": updateWhitelistsRequest.waasPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateWhitelistsRequest.opcRequestId,
      "opc-retry-token": updateWhitelistsRequest.opcRetryToken,
      "if-match": updateWhitelistsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/waasPolicies/{waasPolicyId}/wafConfig/whitelists",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWhitelistsRequest.whitelists,
        "Array<model.Whitelist>",
        models.Whitelist.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWhitelistsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
