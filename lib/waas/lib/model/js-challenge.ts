/**
 * Web Application Acceleration and Security Services API
 * OCI Web Application Acceleration and Security Services
 * OpenAPI spec version: 20181116
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";

/**
 * The JavaScript challenge settings. Javascript Challenge is the function to filter abnormal or malicious bots and allow access to real clients.
 */
export interface JsChallenge {
  /**
   * Enables or disables the JavaScript challenge Web Application Firewall feature.
   */
  "isEnabled": boolean;
  /**
   * The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
   */
  "action"?: JsChallenge.Action;
  /**
   * The number of failed requests before taking action. If unspecified, defaults to `10`.
   */
  "failureThreshold"?: number;
  /**
   * The number of seconds between challenges from the same IP address. If unspecified, defaults to `60`.
   */
  "actionExpirationInSeconds"?: number;
  /**
   * Adds an additional HTTP header to requests that fail the challenge before being passed to the origin. Only applicable when the `action` is set to `DETECT`.
   */
  "setHttpHeader"?: model.Header;
  "challengeSettings"?: model.BlockChallengeSettings;
}

export namespace JsChallenge {
  export enum Action {
    DETECT = "DETECT",
    BLOCK = "BLOCK",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: JsChallenge): object {
    const jsonObj = {
      ...obj,
      ...{
        "setHttpHeader": obj.setHttpHeader ? model.Header.getJsonObj(obj.setHttpHeader) : undefined,
        "challengeSettings": obj.challengeSettings
          ? model.BlockChallengeSettings.getJsonObj(obj.challengeSettings)
          : undefined
      }
    };

    return jsonObj;
  }
}
