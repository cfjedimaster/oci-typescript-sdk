/**
 * Web Application Acceleration and Security Services API
 * OCI Web Application Acceleration and Security Services
 * OpenAPI spec version: 20181116
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";

/**
 * A content access rule. An access rule specifies an action to take if a set of criteria is matched by a request.
 */
export interface AccessRule {
  /**
   * The unique name of the access rule.
   */
  "name": string;
  /**
   * The list of access rule criteria.
   */
  "criteria": Array<model.AccessRuleCriteria>;
  /**
    * The action to take when the access criteria are met for a rule. If unspecified, defaults to `ALLOW`.
* <p>
- **ALLOW:** Takes no action, just logs the request.
* <p>
- **DETECT:** Takes no action, but creates an alert for the request.
* <p>
- **BLOCK:** Blocks the request by returning specified response code or showing error page.
* <p>
- **BYPASS:** Bypasses some or all challenges.
* <p>
- **REDIRECT:** Redirects the request to the specified URL.
* <p>
Regardless of action, no further rules are processed once a rule is matched.
    */
  "action": AccessRule.Action;
  /**
   * The method used to block requests if `action` is set to `BLOCK` and the access criteria are met. If unspecified, defaults to `SET_RESPONSE_CODE`.
   */
  "blockAction"?: AccessRule.BlockAction;
  /**
   * The response status code to return when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the access criteria are met. If unspecified, defaults to `403`. The list of available response codes: `200`, `201`, `202`, `204`, `206`, `300`, `301`, `302`, `303`, `304`, `307`, `400`, `401`, `403`, `404`, `405`, `408`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `422`, `444`, `499`, `500`, `501`, `502`, `503`, `504`, `507`.
   */
  "blockResponseCode"?: number;
  /**
   * The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the access criteria are met. If unspecified, defaults to 'Access to the website is blocked.'
   */
  "blockErrorPageMessage"?: string;
  /**
   * The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the access criteria are met. If unspecified, defaults to 'Access rules'.
   */
  "blockErrorPageCode"?: string;
  /**
   * The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the access criteria are met. If unspecified, defaults to 'Access blocked by website owner. Please contact support.'
   */
  "blockErrorPageDescription"?: string;
  /**
    * The list of challenges to bypass when `action` is set to `BYPASS`. If unspecified or empty, all challenges are bypassed.
* <p>
- **JS_CHALLENGE:** Bypasses JavaScript Challenge.
* <p>
- **DEVICE_FINGERPRINT_CHALLENGE:** Bypasses Device Fingerprint Challenge.
* <p>
- **HUMAN_INTERACTION_CHALLENGE:** Bypasses Human Interaction Challenge.
* <p>
- **CAPTCHA:** Bypasses CAPTCHA Challenge.
    */
  "bypassChallenges"?: Array<AccessRule.BypassChallenges>;
  /**
   * The target to which the request should be redirected, represented as a URI reference.
   */
  "redirectUrl"?: string;
  /**
    * The response status code to return when `action` is set to `REDIRECT`.
* <p>
- **MOVED_PERMANENTLY:** Used for designating the permanent movement of a page (numerical code - 301).
* <p>
- **FOUND:** Used for designating the temporary movement of a page (numerical code - 302).
    */
  "redirectResponseCode"?: AccessRule.RedirectResponseCode;
}

export namespace AccessRule {
  export enum Action {
    ALLOW = "ALLOW",
    DETECT = "DETECT",
    BLOCK = "BLOCK",
    BYPASS = "BYPASS",
    REDIRECT = "REDIRECT",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export enum BlockAction {
    SETRESPONSECODE = "SET_RESPONSE_CODE",
    SHOWERRORPAGE = "SHOW_ERROR_PAGE",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export enum BypassChallenges {
    JSCHALLENGE = "JS_CHALLENGE",
    DEVICEFINGERPRINTCHALLENGE = "DEVICE_FINGERPRINT_CHALLENGE",
    HUMANINTERACTIONCHALLENGE = "HUMAN_INTERACTION_CHALLENGE",
    CAPTCHA = "CAPTCHA",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export enum RedirectResponseCode {
    MOVEDPERMANENTLY = "MOVED_PERMANENTLY",
    FOUND = "FOUND",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: AccessRule): object {
    const jsonObj = {
      ...obj,
      ...{
        "criteria": obj.criteria
          ? obj.criteria.map(item => {
              return model.AccessRuleCriteria.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
