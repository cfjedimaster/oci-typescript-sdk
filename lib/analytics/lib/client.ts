/**
 * Analytics API
 * Analytics API.

 * OpenAPI spec version: 20190331
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { AnalyticsWaiter } from "./analytics-waiter";
import { composeResponse, composeRequest } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AnalyticsApiKeys {}

export class AnalyticsClient {
  protected static serviceEndpointTemplate = "https://analytics.{region}.ocp.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": AnalyticsWaiter;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190331";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AnalyticsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AnalyticsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new AnalyticsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): AnalyticsWaiter {
    this._waiters = new AnalyticsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): AnalyticsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Change the compartment of an Analytics instance. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param ChangeAnalyticsInstanceCompartmentRequest
   * @return ChangeAnalyticsInstanceCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeAnalyticsInstanceCompartment(
    changeAnalyticsInstanceCompartmentRequest: requests.ChangeAnalyticsInstanceCompartmentRequest
  ): Promise<responses.ChangeAnalyticsInstanceCompartmentResponse> {
    const pathParams = {
      "{analyticsInstanceId}": changeAnalyticsInstanceCompartmentRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeAnalyticsInstanceCompartmentRequest.ifMatch,
      "opc-request-id": changeAnalyticsInstanceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeAnalyticsInstanceCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAnalyticsInstanceCompartmentRequest.changeCompartmentDetails,
        "ChangeCompartmentDetails",
        models.ChangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAnalyticsInstanceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Create a new AnalyticsInstance in the specified compartment. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param CreateAnalyticsInstanceRequest
   * @return CreateAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async createAnalyticsInstance(
    createAnalyticsInstanceRequest: requests.CreateAnalyticsInstanceRequest
  ): Promise<responses.CreateAnalyticsInstanceResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createAnalyticsInstanceRequest.opcRequestId,
      "opc-retry-token": createAnalyticsInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAnalyticsInstanceRequest.createAnalyticsInstanceDetails,
        "CreateAnalyticsInstanceDetails",
        models.CreateAnalyticsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAnalyticsInstanceResponse>{},
        body: await response.json(),
        bodyKey: "analyticsInstance",
        bodyModel: "model.AnalyticsInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Terminates the specified Analytics instance. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param DeleteAnalyticsInstanceRequest
   * @return DeleteAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async deleteAnalyticsInstance(
    deleteAnalyticsInstanceRequest: requests.DeleteAnalyticsInstanceRequest
  ): Promise<responses.DeleteAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": deleteAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": deleteAnalyticsInstanceRequest.ifMatch,
      "opc-request-id": deleteAnalyticsInstanceRequest.opcRequestId,
      "opc-retry-token": deleteAnalyticsInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAnalyticsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Cancel a work request that has not started yet.
   *
   * @param DeleteWorkRequestRequest
   * @return DeleteWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async deleteWorkRequest(
    deleteWorkRequestRequest: requests.DeleteWorkRequestRequest
  ): Promise<responses.DeleteWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": deleteWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": deleteWorkRequestRequest.ifMatch,
      "opc-request-id": deleteWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Info for a specific Analytics instance.
   *
   * @param GetAnalyticsInstanceRequest
   * @return GetAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async getAnalyticsInstance(
    getAnalyticsInstanceRequest: requests.GetAnalyticsInstanceRequest
  ): Promise<responses.GetAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": getAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getAnalyticsInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAnalyticsInstanceResponse>{},
        body: await response.json(),
        bodyKey: "analyticsInstance",
        bodyModel: "model.AnalyticsInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Get the details of a work request.
   *
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * List Analytics instances.
   *
   * @param ListAnalyticsInstancesRequest
   * @return ListAnalyticsInstancesResponse
   * @throws OciError when an error occurs
   */
  public async listAnalyticsInstances(
    listAnalyticsInstancesRequest: requests.ListAnalyticsInstancesRequest
  ): Promise<responses.ListAnalyticsInstancesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAnalyticsInstancesRequest.compartmentId,
      "name": listAnalyticsInstancesRequest.name,
      "capacityType": listAnalyticsInstancesRequest.capacityType,
      "featureSet": listAnalyticsInstancesRequest.featureSet,
      "lifecycleState": listAnalyticsInstancesRequest.lifecycleState,
      "limit": listAnalyticsInstancesRequest.limit,
      "page": listAnalyticsInstancesRequest.page,
      "sortBy": listAnalyticsInstancesRequest.sortBy,
      "sortOrder": listAnalyticsInstancesRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listAnalyticsInstancesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAnalyticsInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AnalyticsInstanceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AnalyticsInstanceSummary objects
   * contained in responses from the listAnalyticsInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAnalyticsInstances(
    request: requests.ListAnalyticsInstancesRequest
  ): AsyncIterableIterator<models.AnalyticsInstanceSummary> {
    return paginateRecords(request, req => this.listAnalyticsInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAnalyticsInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAnalyticsInstancesResponses(
    request: requests.ListAnalyticsInstancesRequest
  ): AsyncIterableIterator<responses.ListAnalyticsInstancesResponse> {
    return paginateResponses(request, req => this.listAnalyticsInstances(req));
  }

  /**
   * Get the errors of a work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestErrorsRequest.limit,
      "page": listWorkRequestErrorsRequest.page
    };

    let headerParams = {
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestError[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<models.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Get the logs of a work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestLogsRequest.limit,
      "page": listWorkRequestLogsRequest.page
    };

    let headerParams = {
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestLog[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLog objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<models.WorkRequestLog> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * List all work requests in a compartment.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "resourceType": listWorkRequestsRequest.resourceType,
      "status": listWorkRequestsRequest.status,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<models.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Scale an Analytics instance up or down. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param ScaleAnalyticsInstanceRequest
   * @return ScaleAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async scaleAnalyticsInstance(
    scaleAnalyticsInstanceRequest: requests.ScaleAnalyticsInstanceRequest
  ): Promise<responses.ScaleAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": scaleAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": scaleAnalyticsInstanceRequest.ifMatch,
      "opc-request-id": scaleAnalyticsInstanceRequest.opcRequestId,
      "opc-retry-token": scaleAnalyticsInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}/actions/scale",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scaleAnalyticsInstanceRequest.scaleAnalyticsInstanceDetails,
        "ScaleAnalyticsInstanceDetails",
        models.ScaleAnalyticsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ScaleAnalyticsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Starts the specified Analytics instance. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param StartAnalyticsInstanceRequest
   * @return StartAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async startAnalyticsInstance(
    startAnalyticsInstanceRequest: requests.StartAnalyticsInstanceRequest
  ): Promise<responses.StartAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": startAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": startAnalyticsInstanceRequest.ifMatch,
      "opc-request-id": startAnalyticsInstanceRequest.opcRequestId,
      "opc-retry-token": startAnalyticsInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.StartAnalyticsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Stop the specified Analytics instance. The operation is long-running
   * and creates a new WorkRequest.
   *
   * @param StopAnalyticsInstanceRequest
   * @return StopAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async stopAnalyticsInstance(
    stopAnalyticsInstanceRequest: requests.StopAnalyticsInstanceRequest
  ): Promise<responses.StopAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": stopAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": stopAnalyticsInstanceRequest.ifMatch,
      "opc-request-id": stopAnalyticsInstanceRequest.opcRequestId,
      "opc-retry-token": stopAnalyticsInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.StopAnalyticsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates certain fields of an Analytics instance. Fields that are not provided in the
   * request will not be updated.
   *
   * @param UpdateAnalyticsInstanceRequest
   * @return UpdateAnalyticsInstanceResponse
   * @throws OciError when an error occurs
   */
  public async updateAnalyticsInstance(
    updateAnalyticsInstanceRequest: requests.UpdateAnalyticsInstanceRequest
  ): Promise<responses.UpdateAnalyticsInstanceResponse> {
    const pathParams = {
      "{analyticsInstanceId}": updateAnalyticsInstanceRequest.analyticsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateAnalyticsInstanceRequest.ifMatch,
      "opc-request-id": updateAnalyticsInstanceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/analyticsInstances/{analyticsInstanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAnalyticsInstanceRequest.updateAnalyticsInstanceDetails,
        "UpdateAnalyticsInstanceDetails",
        models.UpdateAnalyticsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAnalyticsInstanceResponse>{},
        body: await response.json(),
        bodyKey: "analyticsInstance",
        bodyModel: "model.AnalyticsInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
