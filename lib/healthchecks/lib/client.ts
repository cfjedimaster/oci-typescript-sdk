/**
 * Health Checks API
 * API for the Health Checks service. Use this API to manage endpoint probes and monitors.
For more information, see
[Overview of the Health Checks Service](/iaas/Content/HealthChecks/Concepts/healthchecks.htm).

 * OpenAPI spec version: 20180501
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { composeResponse, composeRequest } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum HealthChecksApiKeys {}

export class HealthChecksClient {
  protected static serviceEndpointTemplate =
    "https://healthchecks.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180501";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      HealthChecksClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      HealthChecksClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Moves a monitor into a different compartment. When provided, `If-Match` is checked
   * against ETag values of the resource.
   *
   * @param ChangeHttpMonitorCompartmentRequest
   * @return ChangeHttpMonitorCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeHttpMonitorCompartment(
    changeHttpMonitorCompartmentRequest: requests.ChangeHttpMonitorCompartmentRequest
  ): Promise<responses.ChangeHttpMonitorCompartmentResponse> {
    const pathParams = {
      "{monitorId}": changeHttpMonitorCompartmentRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeHttpMonitorCompartmentRequest.ifMatch,
      "opc-request-id": changeHttpMonitorCompartmentRequest.opcRequestId,
      "opc-retry-token": changeHttpMonitorCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors/{monitorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeHttpMonitorCompartmentRequest.changeHttpMonitorCompartmentDetails,
        "ChangeHttpMonitorCompartmentDetails",
        models.ChangeHttpMonitorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeHttpMonitorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a monitor into a different compartment. When provided, `If-Match` is checked
   * against ETag values of the resource.
   *
   * @param ChangePingMonitorCompartmentRequest
   * @return ChangePingMonitorCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changePingMonitorCompartment(
    changePingMonitorCompartmentRequest: requests.ChangePingMonitorCompartmentRequest
  ): Promise<responses.ChangePingMonitorCompartmentResponse> {
    const pathParams = {
      "{monitorId}": changePingMonitorCompartmentRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changePingMonitorCompartmentRequest.ifMatch,
      "opc-request-id": changePingMonitorCompartmentRequest.opcRequestId,
      "opc-retry-token": changePingMonitorCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors/{monitorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePingMonitorCompartmentRequest.changePingMonitorCompartmentDetails,
        "ChangePingMonitorCompartmentDetails",
        models.ChangePingMonitorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePingMonitorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates an HTTP monitor. Vantage points will be automatically selected if not specified,
   * and probes will be initiated from each vantage point to each of the targets at the frequency
   * specified by `intervalInSeconds`.
   *
   * @param CreateHttpMonitorRequest
   * @return CreateHttpMonitorResponse
   * @throws OciError when an error occurs
   */
  public async createHttpMonitor(
    createHttpMonitorRequest: requests.CreateHttpMonitorRequest
  ): Promise<responses.CreateHttpMonitorResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createHttpMonitorRequest.opcRequestId,
      "opc-retry-token": createHttpMonitorRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createHttpMonitorRequest.createHttpMonitorDetails,
        "CreateHttpMonitorDetails",
        models.CreateHttpMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateHttpMonitorResponse>{},
        body: await response.json(),
        bodyKey: "httpMonitor",
        bodyModel: "model.HttpMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates an on-demand HTTP probe. The location response header contains the URL for
   * fetching the probe results.
   * <p>
   *Note:* On-demand probe configurations are not saved.
   *
   * @param CreateOnDemandHttpProbeRequest
   * @return CreateOnDemandHttpProbeResponse
   * @throws OciError when an error occurs
   */
  public async createOnDemandHttpProbe(
    createOnDemandHttpProbeRequest: requests.CreateOnDemandHttpProbeRequest
  ): Promise<responses.CreateOnDemandHttpProbeResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createOnDemandHttpProbeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpProbeResults",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnDemandHttpProbeRequest.createOnDemandHttpProbeDetails,
        "CreateOnDemandHttpProbeDetails",
        models.CreateOnDemandHttpProbeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnDemandHttpProbeResponse>{},
        body: await response.json(),
        bodyKey: "httpProbe",
        bodyModel: "model.HttpProbe",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates an on-demand ping probe. The location response header contains the URL for
   * fetching probe results.
   * <p>
   *Note:* The on-demand probe configuration is not saved.
   *
   * @param CreateOnDemandPingProbeRequest
   * @return CreateOnDemandPingProbeResponse
   * @throws OciError when an error occurs
   */
  public async createOnDemandPingProbe(
    createOnDemandPingProbeRequest: requests.CreateOnDemandPingProbeRequest
  ): Promise<responses.CreateOnDemandPingProbeResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createOnDemandPingProbeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingProbeResults",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnDemandPingProbeRequest.createOnDemandPingProbeDetails,
        "CreateOnDemandPingProbeDetails",
        models.CreateOnDemandPingProbeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnDemandPingProbeResponse>{},
        body: await response.json(),
        bodyKey: "pingProbe",
        bodyModel: "model.PingProbe",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a ping monitor. Vantage points will be automatically selected if not specified,
   * and probes will be initiated from each vantage point to each of the targets at the frequency
   * specified by `intervalInSeconds`.
   *
   * @param CreatePingMonitorRequest
   * @return CreatePingMonitorResponse
   * @throws OciError when an error occurs
   */
  public async createPingMonitor(
    createPingMonitorRequest: requests.CreatePingMonitorRequest
  ): Promise<responses.CreatePingMonitorResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createPingMonitorRequest.opcRequestId,
      "opc-retry-token": createPingMonitorRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPingMonitorRequest.createPingMonitorDetails,
        "CreatePingMonitorDetails",
        models.CreatePingMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePingMonitorResponse>{},
        body: await response.json(),
        bodyKey: "pingMonitor",
        bodyModel: "model.PingMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes the HTTP monitor and its configuration. All future probes of this
   * monitor are stopped. Results associated with the monitor are not deleted.
   *
   * @param DeleteHttpMonitorRequest
   * @return DeleteHttpMonitorResponse
   * @throws OciError when an error occurs
   */
  public async deleteHttpMonitor(
    deleteHttpMonitorRequest: requests.DeleteHttpMonitorRequest
  ): Promise<responses.DeleteHttpMonitorResponse> {
    const pathParams = {
      "{monitorId}": deleteHttpMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteHttpMonitorRequest.opcRequestId,
      "if-match": deleteHttpMonitorRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors/{monitorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteHttpMonitorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes the ping monitor and its configuration. All future probes of this
   * monitor are stopped. Results associated with the monitor are not deleted.
   *
   * @param DeletePingMonitorRequest
   * @return DeletePingMonitorResponse
   * @throws OciError when an error occurs
   */
  public async deletePingMonitor(
    deletePingMonitorRequest: requests.DeletePingMonitorRequest
  ): Promise<responses.DeletePingMonitorResponse> {
    const pathParams = {
      "{monitorId}": deletePingMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deletePingMonitorRequest.opcRequestId,
      "if-match": deletePingMonitorRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors/{monitorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePingMonitorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the configuration for the specified monitor.
   *
   * @param GetHttpMonitorRequest
   * @return GetHttpMonitorResponse
   * @throws OciError when an error occurs
   */
  public async getHttpMonitor(
    getHttpMonitorRequest: requests.GetHttpMonitorRequest
  ): Promise<responses.GetHttpMonitorResponse> {
    const pathParams = {
      "{monitorId}": getHttpMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getHttpMonitorRequest.opcRequestId,
      "if-none-match": getHttpMonitorRequest.ifNoneMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors/{monitorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHttpMonitorResponse>{},
        body: await response.json(),
        bodyKey: "httpMonitor",
        bodyModel: "model.HttpMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the configuration for the specified ping monitor.
   *
   * @param GetPingMonitorRequest
   * @return GetPingMonitorResponse
   * @throws OciError when an error occurs
   */
  public async getPingMonitor(
    getPingMonitorRequest: requests.GetPingMonitorRequest
  ): Promise<responses.GetPingMonitorResponse> {
    const pathParams = {
      "{monitorId}": getPingMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getPingMonitorRequest.opcRequestId,
      "if-none-match": getPingMonitorRequest.ifNoneMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors/{monitorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPingMonitorResponse>{},
        body: await response.json(),
        bodyKey: "pingMonitor",
        bodyModel: "model.PingMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets information about all vantage points available to the user.
   *
   * @param ListHealthChecksVantagePointsRequest
   * @return ListHealthChecksVantagePointsResponse
   * @throws OciError when an error occurs
   */
  public async listHealthChecksVantagePoints(
    listHealthChecksVantagePointsRequest: requests.ListHealthChecksVantagePointsRequest
  ): Promise<responses.ListHealthChecksVantagePointsResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listHealthChecksVantagePointsRequest.limit,
      "page": listHealthChecksVantagePointsRequest.page,
      "sortBy": listHealthChecksVantagePointsRequest.sortBy,
      "sortOrder": listHealthChecksVantagePointsRequest.sortOrder,
      "name": listHealthChecksVantagePointsRequest.name,
      "displayName": listHealthChecksVantagePointsRequest.displayName
    };

    let headerParams = {
      "opc-request-id": listHealthChecksVantagePointsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vantagePoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHealthChecksVantagePointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "HealthChecksVantagePointSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.HealthChecksVantagePointSummary objects
   * contained in responses from the listHealthChecksVantagePoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHealthChecksVantagePoints(
    request: requests.ListHealthChecksVantagePointsRequest
  ): AsyncIterableIterator<models.HealthChecksVantagePointSummary> {
    return paginateRecords(request, req => this.listHealthChecksVantagePoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listHealthChecksVantagePoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHealthChecksVantagePointsResponses(
    request: requests.ListHealthChecksVantagePointsRequest
  ): AsyncIterableIterator<responses.ListHealthChecksVantagePointsResponse> {
    return paginateResponses(request, req => this.listHealthChecksVantagePoints(req));
  }

  /**
   * Gets a list of HTTP monitors.
   *
   * @param ListHttpMonitorsRequest
   * @return ListHttpMonitorsResponse
   * @throws OciError when an error occurs
   */
  public async listHttpMonitors(
    listHttpMonitorsRequest: requests.ListHttpMonitorsRequest
  ): Promise<responses.ListHttpMonitorsResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listHttpMonitorsRequest.limit,
      "page": listHttpMonitorsRequest.page,
      "compartmentId": listHttpMonitorsRequest.compartmentId,
      "sortBy": listHttpMonitorsRequest.sortBy,
      "sortOrder": listHttpMonitorsRequest.sortOrder,
      "displayName": listHttpMonitorsRequest.displayName,
      "homeRegion": listHttpMonitorsRequest.homeRegion
    };

    let headerParams = {
      "opc-request-id": listHttpMonitorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHttpMonitorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "HttpMonitorSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.HttpMonitorSummary objects
   * contained in responses from the listHttpMonitors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpMonitors(
    request: requests.ListHttpMonitorsRequest
  ): AsyncIterableIterator<models.HttpMonitorSummary> {
    return paginateRecords(request, req => this.listHttpMonitors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listHttpMonitors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpMonitorsResponses(
    request: requests.ListHttpMonitorsRequest
  ): AsyncIterableIterator<responses.ListHttpMonitorsResponse> {
    return paginateResponses(request, req => this.listHttpMonitors(req));
  }

  /**
   * Gets the HTTP probe results for the specified probe or monitor, where
   * the `probeConfigurationId` is the OCID of either a monitor or an
   * on-demand probe.
   *
   * @param ListHttpProbeResultsRequest
   * @return ListHttpProbeResultsResponse
   * @throws OciError when an error occurs
   */
  public async listHttpProbeResults(
    listHttpProbeResultsRequest: requests.ListHttpProbeResultsRequest
  ): Promise<responses.ListHttpProbeResultsResponse> {
    const pathParams = {
      "{probeConfigurationId}": listHttpProbeResultsRequest.probeConfigurationId
    };

    const queryParams = {
      "limit": listHttpProbeResultsRequest.limit,
      "page": listHttpProbeResultsRequest.page,
      "startTimeGreaterThanOrEqualTo": listHttpProbeResultsRequest.startTimeGreaterThanOrEqualTo,
      "startTimeLessThanOrEqualTo": listHttpProbeResultsRequest.startTimeLessThanOrEqualTo,
      "sortOrder": listHttpProbeResultsRequest.sortOrder,
      "target": listHttpProbeResultsRequest.target
    };

    let headerParams = {
      "opc-request-id": listHttpProbeResultsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpProbeResults/{probeConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHttpProbeResultsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "HttpProbeResultSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.HttpProbeResultSummary objects
   * contained in responses from the listHttpProbeResults operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpProbeResults(
    request: requests.ListHttpProbeResultsRequest
  ): AsyncIterableIterator<models.HttpProbeResultSummary> {
    return paginateRecords(request, req => this.listHttpProbeResults(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listHttpProbeResults operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllHttpProbeResultsResponses(
    request: requests.ListHttpProbeResultsRequest
  ): AsyncIterableIterator<responses.ListHttpProbeResultsResponse> {
    return paginateResponses(request, req => this.listHttpProbeResults(req));
  }

  /**
     * Gets a list of configured ping monitors.
* <p>
Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
* a URL for fetching the next page.
* 
     * @param ListPingMonitorsRequest
     * @return ListPingMonitorsResponse
     * @throws OciError when an error occurs
     */
  public async listPingMonitors(
    listPingMonitorsRequest: requests.ListPingMonitorsRequest
  ): Promise<responses.ListPingMonitorsResponse> {
    const pathParams = {};

    const queryParams = {
      "limit": listPingMonitorsRequest.limit,
      "page": listPingMonitorsRequest.page,
      "compartmentId": listPingMonitorsRequest.compartmentId,
      "sortBy": listPingMonitorsRequest.sortBy,
      "sortOrder": listPingMonitorsRequest.sortOrder,
      "displayName": listPingMonitorsRequest.displayName,
      "homeRegion": listPingMonitorsRequest.homeRegion
    };

    let headerParams = {
      "opc-request-id": listPingMonitorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPingMonitorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "PingMonitorSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.PingMonitorSummary objects
   * contained in responses from the listPingMonitors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPingMonitors(
    request: requests.ListPingMonitorsRequest
  ): AsyncIterableIterator<models.PingMonitorSummary> {
    return paginateRecords(request, req => this.listPingMonitors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPingMonitors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPingMonitorsResponses(
    request: requests.ListPingMonitorsRequest
  ): AsyncIterableIterator<responses.ListPingMonitorsResponse> {
    return paginateResponses(request, req => this.listPingMonitors(req));
  }

  /**
     * Returns the results for the specified probe, where the `probeConfigurationId`
* is the OCID of either a monitor or an on-demand probe.
* <p>
Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
* a URL for fetching the next page.  Use `sortOrder` to set the order of the
* results.  If `sortOrder` is unspecified, results are sorted in ascending order by
* `startTime`.
* 
     * @param ListPingProbeResultsRequest
     * @return ListPingProbeResultsResponse
     * @throws OciError when an error occurs
     */
  public async listPingProbeResults(
    listPingProbeResultsRequest: requests.ListPingProbeResultsRequest
  ): Promise<responses.ListPingProbeResultsResponse> {
    const pathParams = {
      "{probeConfigurationId}": listPingProbeResultsRequest.probeConfigurationId
    };

    const queryParams = {
      "limit": listPingProbeResultsRequest.limit,
      "page": listPingProbeResultsRequest.page,
      "startTimeGreaterThanOrEqualTo": listPingProbeResultsRequest.startTimeGreaterThanOrEqualTo,
      "startTimeLessThanOrEqualTo": listPingProbeResultsRequest.startTimeLessThanOrEqualTo,
      "sortOrder": listPingProbeResultsRequest.sortOrder,
      "target": listPingProbeResultsRequest.target
    };

    let headerParams = {
      "opc-request-id": listPingProbeResultsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingProbeResults/{probeConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPingProbeResultsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "PingProbeResultSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.PingProbeResultSummary objects
   * contained in responses from the listPingProbeResults operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPingProbeResults(
    request: requests.ListPingProbeResultsRequest
  ): AsyncIterableIterator<models.PingProbeResultSummary> {
    return paginateRecords(request, req => this.listPingProbeResults(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPingProbeResults operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPingProbeResultsResponses(
    request: requests.ListPingProbeResultsRequest
  ): AsyncIterableIterator<responses.ListPingProbeResultsResponse> {
    return paginateResponses(request, req => this.listPingProbeResults(req));
  }

  /**
   * Updates the configuration of the specified HTTP monitor. Only the fields
   * specified in the request body will be updated; all other configuration
   * properties will remain unchanged.
   *
   * @param UpdateHttpMonitorRequest
   * @return UpdateHttpMonitorResponse
   * @throws OciError when an error occurs
   */
  public async updateHttpMonitor(
    updateHttpMonitorRequest: requests.UpdateHttpMonitorRequest
  ): Promise<responses.UpdateHttpMonitorResponse> {
    const pathParams = {
      "{monitorId}": updateHttpMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateHttpMonitorRequest.opcRequestId,
      "if-match": updateHttpMonitorRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/httpMonitors/{monitorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHttpMonitorRequest.updateHttpMonitorDetails,
        "UpdateHttpMonitorDetails",
        models.UpdateHttpMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHttpMonitorResponse>{},
        body: await response.json(),
        bodyKey: "httpMonitor",
        bodyModel: "model.HttpMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Updates the configuration of the specified ping monitor. Only the fields
   * specified in the request body will be updated; all other configuration properties
   * will remain unchanged.
   *
   * @param UpdatePingMonitorRequest
   * @return UpdatePingMonitorResponse
   * @throws OciError when an error occurs
   */
  public async updatePingMonitor(
    updatePingMonitorRequest: requests.UpdatePingMonitorRequest
  ): Promise<responses.UpdatePingMonitorResponse> {
    const pathParams = {
      "{monitorId}": updatePingMonitorRequest.monitorId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updatePingMonitorRequest.opcRequestId,
      "if-match": updatePingMonitorRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pingMonitors/{monitorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePingMonitorRequest.updatePingMonitorDetails,
        "UpdatePingMonitorDetails",
        models.UpdatePingMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);

    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePingMonitorResponse>{},
        body: await response.json(),
        bodyKey: "pingMonitor",
        bodyModel: "model.PingMonitor",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      let errBody = null;
      if (response.json) {
        errBody = await response.json();
      }
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
