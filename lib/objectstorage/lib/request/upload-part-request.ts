/**
 *
 *
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");
import stream = require("stream");
export interface UploadPartRequest {
  /**
   * The Object Storage namespace used for the request.
   */
  "namespaceName": string;
  /**
   * The name of the bucket. Avoid entering confidential information.
   * Example: `my-new-bucket1`
   *
   */
  "bucketName": string;
  /**
   * The name of the object. Avoid entering confidential information.
   * Example: `test/object1.log`
   *
   */
  "objectName": string;
  /**
   * The upload ID for a multipart upload.
   */
  "uploadId": string;
  /**
   * The part number that identifies the object part currently being uploaded.
   */
  "uploadPartNum": number;
  /**
   * The content length of the body.
   */
  "contentLength": number;
  /**
   * The part being uploaded to the Object Storage service.
   */
  "uploadPartBody": Blob | stream.Readable | ReadableStream | string;
  /**
   * The client request ID for tracing.
   */
  "opcClientRequestId"?: string;
  /**
   * The entity tag (ETag) to match. For creating and committing a multipart upload to an object, this is the entity tag of the target object.
   * For uploading a part, this is the entity tag of the target part.
   *
   */
  "ifMatch"?: string;
  /**
   * The entity tag (ETag) to avoid matching. The only valid value is '*', which indicates that the request should fail if the object
   * already exists. For creating and committing a multipart upload, this is the entity tag of the target object. For uploading a
   * part, this is the entity tag of the target part.
   *
   */
  "ifNoneMatch"?: string;
  /**
   * 100-continue
   */
  "expect"?: string;
  /**
 * The optional base-64 header that defines the encoded MD5 hash of the body. If the optional Content-MD5 header is present, Object
* Storage performs an integrity check on the body of the HTTP request by computing the MD5 hash for the body and comparing it to the
* MD5 hash supplied in the header. If the two hashes do not match, the object is rejected and an HTTP-400 Unmatched Content MD5 error
* is returned with the message:
* <p>
\"The computed MD5 of the request body (ACTUAL_MD5) does not match the Content-MD5 header (HEADER_MD5)\"
* 
 */
  "contentMD5"?: string;
  /**
   * The optional header that specifies \"AES256\" as the encryption algorithm. For more information, see
   * [Using Your Own Keys for Server-Side Encryption](https://docs.cloud.oracle.com/Content/Object/Tasks/usingyourecryptionkeys.htm).
   *
   */
  "opcSseCustomerAlgorithm"?: string;
  /**
   * The optional header that specifies the base64-encoded 256-bit encryption key to use to encrypt or
   * decrypt the data. For more information, see
   * [Using Your Own Keys for Server-Side Encryption](https://docs.cloud.oracle.com/Content/Object/Tasks/usingyourecryptionkeys.htm).
   *
   */
  "opcSseCustomerKey"?: string;
  /**
   * The optional header that specifies the base64-encoded SHA256 hash of the encryption key. This
   * value is used to check the integrity of the encryption key. For more information, see
   * [Using Your Own Keys for Server-Side Encryption](https://docs.cloud.oracle.com/Content/Object/Tasks/usingyourecryptionkeys.htm).
   *
   */
  "opcSseCustomerKeySha256"?: string;
}
