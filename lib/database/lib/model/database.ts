/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

export interface Database {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the database.
   */
  "id": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
   */
  "compartmentId": string;
  /**
   * The character set for the database.
   */
  "characterSet"?: string;
  /**
   * The national character set for the database.
   */
  "ncharacterSet"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Database Home.
   */
  "dbHomeId"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the DB system.
   */
  "dbSystemId"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VM cluster.
   */
  "vmClusterId"?: string;
  /**
   * The database name.
   */
  "dbName": string;
  /**
   * The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
   */
  "pdbName"?: string;
  /**
   * The database workload type.
   */
  "dbWorkload"?: string;
  /**
   * A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
   *
   */
  "dbUniqueName": string;
  /**
   * Additional information about the current lifecycleState.
   */
  "lifecycleDetails"?: string;
  /**
   * The current state of the database.
   */
  "lifecycleState": Database.LifecycleState;
  /**
   * The date and time the database was created.
   */
  "timeCreated"?: Date;
  "dbBackupConfig"?: model.DbBackupConfig;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
* For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: `{\"Department\": \"Finance\"}`
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * The Connection strings used to connect to the Oracle Database.
   */
  "connectionStrings"?: model.DatabaseConnectionStrings;
}

export namespace Database {
  export enum LifecycleState {
    PROVISIONING = "PROVISIONING",
    AVAILABLE = "AVAILABLE",
    UPDATING = "UPDATING",
    BACKUPINPROGRESS = "BACKUP_IN_PROGRESS",
    TERMINATING = "TERMINATING",
    TERMINATED = "TERMINATED",
    RESTOREFAILED = "RESTORE_FAILED",
    FAILED = "FAILED",

    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UNKNOWN_VALUE = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Database): object {
    const jsonObj = {
      ...obj,
      ...{
        "dbBackupConfig": obj.dbBackupConfig
          ? model.DbBackupConfig.getJsonObj(obj.dbBackupConfig)
          : undefined,

        "connectionStrings": obj.connectionStrings
          ? model.DatabaseConnectionStrings.getJsonObj(obj.connectionStrings)
          : undefined
      }
    };

    return jsonObj;
  }
}
