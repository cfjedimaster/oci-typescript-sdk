/**
 * Core Services API
 * API covering the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services. Use this API
to manage resources such as virtual cloud networks (VCNs), compute instances, and
block storage volumes.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Instance launch details.
 * Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
 *
 */
export interface LaunchInstanceDetails {
  /**
    * The availability domain of the instance.
* <p>
Example: `Uocm:PHX-AD-1`
* 
    */
  "availabilityDomain": string;
  /**
   * The OCID of the compartment.
   */
  "compartmentId": string;
  /**
   * Details for the primary VNIC, which is automatically created and attached when
   * the instance is launched.
   *
   */
  "createVnicDetails"?: model.CreateVnicDetails;
  /**
   * The OCID of dedicated VM host.
   *
   */
  "dedicatedVmHostId"?: string;
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a
* namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
    * A user-friendly name. Does not have to be unique, and it's changeable.
* Avoid entering confidential information.
* <p>
Example: `My bare metal instance`
* 
    */
  "displayName"?: string;
  /**
    * Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the 'metadata' object.
* <p>
They are distinguished from 'metadata' fields in that these can be nested JSON objects (whereas 'metadata' fields are string/string maps only).
* 
    */
  "extendedMetadata"?: { [key: string]: any };
  /**
    * A fault domain is a grouping of hardware and infrastructure within an availability domain.
* Each availability domain contains three fault domains. Fault domains let you distribute your
* instances so that they are not on the same physical hardware within a single availability domain.
* A hardware failure or Compute hardware maintenance that affects one fault domain does not affect
* instances in other fault domains.
* <p>
If you do not specify the fault domain, the system selects one for you. To change the fault
* domain for an instance, terminate it and launch a new instance in the preferred fault domain.
* <p>
To get a list of fault domains, use the
* {@link #listFaultDomains(ListFaultDomainsRequest) listFaultDomains} operation in the
* Identity and Access Management Service API.
* <p>
Example: `FAULT-DOMAIN-1`
* 
    */
  "faultDomain"?: string;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no
* predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: `{\"Department\": \"Finance\"}`
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Deprecated. Instead use `hostnameLabel` in
   * {@link CreateVnicDetails}.
   * If you provide both, the values must match.
   *
   */
  "hostnameLabel"?: string;
  /**
   * Deprecated. Use `sourceDetails` with {@link #instanceSourceViaImageDetails(InstanceSourceViaImageDetailsRequest) instanceSourceViaImageDetails}
   * source type instead. If you specify values for both, the values must match.
   *
   */
  "imageId"?: string;
  /**
    * This is an advanced option.
* <p>
When a bare metal or virtual machine
* instance boots, the iPXE firmware that runs on the instance is
* configured to run an iPXE script to continue the boot process.
* <p>
If you want more control over the boot process, you can provide
* your own custom iPXE script that will run when the instance boots;
* however, you should be aware that the same iPXE script will run
* every time an instance boots; not only after the initial
* LaunchInstance call.
* <p>
The default iPXE script connects to the instance's local boot
* volume over iSCSI and performs a network boot. If you use a custom iPXE
* script and want to network-boot from the instance's local boot volume
* over iSCSI the same way as the default iPXE script, you should use the
* following iSCSI IP address: 169.254.0.2, and boot volume IQN:
* iqn.2015-02.oracle.boot.
* <p>
For more information about the Bring Your Own Image feature of
* Oracle Cloud Infrastructure, see
* [Bring Your Own Image](https://docs.cloud.oracle.com/Content/Compute/References/bringyourownimage.htm).
* <p>
For more information about iPXE, see http://ipxe.org.
* 
    */
  "ipxeScript"?: string;
  "launchOptions"?: model.LaunchOptions;
  /**
    * Custom metadata key/value pairs that you provide, such as the SSH public key
* required to connect to the instance.
* <p>
A metadata service runs on every launched instance. The service is an HTTP
* endpoint listening on 169.254.169.254. You can use the service to:
* <p>
* Provide information to [Cloud-Init](https://cloudinit.readthedocs.org/en/latest/)
*   to be used for various system initialization tasks.
* <p>
* Get information about the instance, including the custom metadata that you
*   provide when you launch the instance.
* <p>
 **Providing Cloud-Init Metadata**
* <p>
 You can use the following metadata key names to provide information to
*  Cloud-Init:
* <p>
 **\"ssh_authorized_keys\"** - Provide one or more public SSH keys to be
*  included in the `~/.ssh/authorized_keys` file for the default user on the
*  instance. Use a newline character to separate multiple keys. The SSH
*  keys must be in the format necessary for the `authorized_keys` file, as shown
*  in the example below.
* <p>
 **\"user_data\"** - Provide your own base64-encoded data to be used by
*  Cloud-Init to run custom scripts or provide custom Cloud-Init configuration. For
*  information about how to take advantage of user data, see the
*  [Cloud-Init Documentation](http://cloudinit.readthedocs.org/en/latest/topics/format.html).
* <p>
 **Note:** Cloud-Init does not pull this data from the `http://169.254.169.254/opc/v1/instance/metadata/`
*  path. When the instance launches and either of these keys are provided, the key values are formatted as
*  OpenStack metadata and copied to the following locations, which are recognized by Cloud-Init:
* <p>
 `http://169.254.169.254/openstack/latest/meta_data.json` - This JSON blob
*  contains, among other things, the SSH keys that you provided for
*   **\"ssh_authorized_keys\"**.
* <p>
 `http://169.254.169.254/openstack/latest/user_data` - Contains the
*  base64-decoded data that you provided for **\"user_data\"**.
* <p>
 **Metadata Example**
* <p>
      \"metadata\" : {
*          \"quake_bot_level\" : \"Severe\",
*          \"ssh_authorized_keys\" : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZ06fccNTQfq+xubFlJ5ZR3kt+uzspdH9tXL+lAejSM1NXM+CFZev7MIxfEjas06y80ZBZ7DUTQO0GxJPeD8NCOb1VorF8M4xuLwrmzRtkoZzU16umt4y1W0Q4ifdp3IiiU0U8/WxczSXcUVZOLqkz5dc6oMHdMVpkimietWzGZ4LBBsH/LjEVY7E0V+a0sNchlVDIZcm7ErReBLcdTGDq0uLBiuChyl6RUkX1PNhusquTGwK7zc8OBXkRuubn5UKXhI3Ul9Nyk4XESkVWIGNKmw8mSpoJSjR8P9ZjRmcZVo8S+x4KVPMZKQEor== ryan.smith@company.com
*          ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAzJSAtwEPoB3Jmr58IXrDGzLuDYkWAYg8AsLYlo6JZvKpjY1xednIcfEVQJm4T2DhVmdWhRrwQ8DmayVZvBkLt+zs2LdoAJEVimKwXcJFD/7wtH8Lnk17HiglbbbNXsemjDY0hea4JUE5CfvkIdZBITuMrfqSmA4n3VNoorXYdvtTMoGG8fxMub46RPtuxtqi9bG9Zqenordkg5FJt2mVNfQRqf83CWojcOkklUWq4CjyxaeLf5i9gv1fRoBo4QhiA8I6NCSppO8GnoV/6Ox6TNoh9BiifqGKC9VGYuC89RvUajRBTZSK2TK4DPfaT+2R+slPsFrwiT/oPEhhEK1S5Q== rsa-key-20160227\",
*          \"user_data\" : \"SWYgeW91IGNhbiBzZWUgdGhpcywgdGhlbiBpdCB3b3JrZWQgbWF5YmUuCg==\"
*       }
*  **Getting Metadata on the Instance**
* <p>
 To get information about your instance, connect to the instance using SSH and issue any of the
*  following GET requests:
* <p>
     curl http://169.254.169.254/opc/v1/instance/
*      curl http://169.254.169.254/opc/v1/instance/metadata/
*      curl http://169.254.169.254/opc/v1/instance/metadata/<any-key-name>
* <p>
 You'll get back a response that includes all the instance information; only the metadata information; or
*  the metadata information for the specified key name, respectively.
* 
    */
  "metadata"?: { [key: string]: string };
  "agentConfig"?: model.LaunchInstanceAgentConfigDetails;
  /**
    * The shape of an instance. The shape determines the number of CPUs, amount of memory,
* and other resources allocated to the instance.
* <p>
You can enumerate all available shapes by calling {@link #listShapes(ListShapesRequest) listShapes}.
* 
    */
  "shape": string;
  "shapeConfig"?: model.LaunchInstanceShapeConfigDetails;
  /**
   * Details for creating an instance.
   * Use this parameter to specify whether a boot volume or an image should be used to launch a new instance.
   *
   */
  "sourceDetails"?: model.InstanceSourceViaImageDetails | model.InstanceSourceViaBootVolumeDetails;
  /**
   * Deprecated. Instead use `subnetId` in
   * {@link CreateVnicDetails}.
   * At least one of them is required; if you provide both, the values must match.
   *
   */
  "subnetId"?: string;
  /**
   * Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
   */
  "isPvEncryptionInTransitEnabled"?: boolean;
}

export namespace LaunchInstanceDetails {
  export function getJsonObj(obj: LaunchInstanceDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "createVnicDetails": obj.createVnicDetails
          ? model.CreateVnicDetails.getJsonObj(obj.createVnicDetails)
          : undefined,

        "launchOptions": obj.launchOptions
          ? model.LaunchOptions.getJsonObj(obj.launchOptions)
          : undefined,

        "agentConfig": obj.agentConfig
          ? model.LaunchInstanceAgentConfigDetails.getJsonObj(obj.agentConfig)
          : undefined,

        "shapeConfig": obj.shapeConfig
          ? model.LaunchInstanceShapeConfigDetails.getJsonObj(obj.shapeConfig)
          : undefined,
        "sourceDetails": obj.sourceDetails
          ? model.InstanceSourceDetails.getJsonObj(obj.sourceDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
