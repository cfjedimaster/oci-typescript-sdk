/**
 * Core Services API
 * API covering the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services. Use this API
to manage resources such as virtual cloud networks (VCNs), compute instances, and
block storage volumes.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { BlockstorageClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";
import { waitForWorkRequest, WorkRequestClient, responses } from "oci-workrequests";

export class BlockstorageWaiter {
  public constructor(
    private client: BlockstorageClient,
    private workRequestClient: WorkRequestClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forBootVolume till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBootVolumeResponse | null (null in case of 404 response)
   */
  public async forBootVolume(
    request: serviceRequests.GetBootVolumeRequest,
    ...targetStates: models.BootVolume.LifecycleState[]
  ): Promise<serviceResponses.GetBootVolumeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBootVolume(request),
      response => targetStates.exists(response.bootVolume.lifecycleState),
      targetStates.includes(models.BootVolume.LifecycleState.TERMINATED)
    );
  }

  /**
   * Waits forBootVolumeBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBootVolumeBackupResponse | null (null in case of 404 response)
   */
  public async forBootVolumeBackup(
    request: serviceRequests.GetBootVolumeBackupRequest,
    ...targetStates: models.BootVolumeBackup.LifecycleState[]
  ): Promise<serviceResponses.GetBootVolumeBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBootVolumeBackup(request),
      response => targetStates.exists(response.bootVolumeBackup.lifecycleState),
      targetStates.includes(models.BootVolumeBackup.LifecycleState.TERMINATED)
    );
  }

  /**
   * Waits forVolume till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeResponse | null (null in case of 404 response)
   */
  public async forVolume(
    request: serviceRequests.GetVolumeRequest,
    ...targetStates: models.Volume.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolume(request),
      response => targetStates.exists(response.volume.lifecycleState),
      targetStates.includes(models.Volume.LifecycleState.TERMINATED)
    );
  }

  /**
   * Waits forVolumeBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeBackupResponse | null (null in case of 404 response)
   */
  public async forVolumeBackup(
    request: serviceRequests.GetVolumeBackupRequest,
    ...targetStates: models.VolumeBackup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeBackup(request),
      response => targetStates.exists(response.volumeBackup.lifecycleState),
      targetStates.includes(models.VolumeBackup.LifecycleState.TERMINATED)
    );
  }

  /**
   * Waits forVolumeGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeGroupResponse | null (null in case of 404 response)
   */
  public async forVolumeGroup(
    request: serviceRequests.GetVolumeGroupRequest,
    ...targetStates: models.VolumeGroup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeGroupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeGroup(request),
      response => targetStates.exists(response.volumeGroup.lifecycleState),
      targetStates.includes(models.VolumeGroup.LifecycleState.TERMINATED)
    );
  }

  /**
   * Waits forVolumeGroupBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeGroupBackupResponse | null (null in case of 404 response)
   */
  public async forVolumeGroupBackup(
    request: serviceRequests.GetVolumeGroupBackupRequest,
    ...targetStates: models.VolumeGroupBackup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeGroupBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeGroupBackup(request),
      response => targetStates.exists(response.volumeGroupBackup.lifecycleState),
      targetStates.includes(models.VolumeGroupBackup.LifecycleState.TERMINATED)
    );
  }
}
