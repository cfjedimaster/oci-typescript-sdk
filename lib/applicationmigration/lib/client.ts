/**
 * Application Migration Service API
 * API for the Application Migration service. Use this API to migrate applications from Oracle Cloud Infrastructure - Classic to Oracle Cloud Infrastructure.

 * OpenAPI spec version: 20191031
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ApplicationMigrationWaiter } from "./applicationmigration-waiter";
import { composeResponse, composeRequest } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApplicationMigrationApiKeys {}

export class ApplicationMigrationClient {
  protected static serviceEndpointTemplate =
    "https://applicationmigration.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ApplicationMigrationWaiter;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20191031";
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ApplicationMigrationClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ApplicationMigrationClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ApplicationMigrationWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ApplicationMigrationWaiter {
    this._waiters = new ApplicationMigrationWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ApplicationMigrationWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Cancels the specified work request
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": cancelWorkRequestRequest.opcRequestId,
      "if-match": cancelWorkRequestRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a Migration into a different compartment.
   * @param ChangeMigrationCompartmentRequest
   * @return ChangeMigrationCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeMigrationCompartment(
    changeMigrationCompartmentRequest: requests.ChangeMigrationCompartmentRequest
  ): Promise<responses.ChangeMigrationCompartmentResponse> {
    const pathParams = {
      "{migrationId}": changeMigrationCompartmentRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeMigrationCompartmentRequest.ifMatch,
      "opc-request-id": changeMigrationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeMigrationCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMigrationCompartmentRequest.changeMigrationCompartmentDetails,
        "ChangeCompartmentDetails",
        models.ChangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMigrationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Moves a Source into a different compartment.
   * @param ChangeSourceCompartmentRequest
   * @return ChangeSourceCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeSourceCompartment(
    changeSourceCompartmentRequest: requests.ChangeSourceCompartmentRequest
  ): Promise<responses.ChangeSourceCompartmentResponse> {
    const pathParams = {
      "{sourceId}": changeSourceCompartmentRequest.sourceId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeSourceCompartmentRequest.ifMatch,
      "opc-request-id": changeSourceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSourceCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources/{sourceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSourceCompartmentRequest.changeSourceCompartmentDetails,
        "ChangeCompartmentDetails",
        models.ChangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSourceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates an application migration in the specified compartment.
   * Specify the compartment using the compartment ID.
   *
   * @param CreateMigrationRequest
   * @return CreateMigrationResponse
   * @throws OciError when an error occurs
   */
  public async createMigration(
    createMigrationRequest: requests.CreateMigrationRequest
  ): Promise<responses.CreateMigrationResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createMigrationRequest.opcRequestId,
      "opc-retry-token": createMigrationRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMigrationRequest.createMigrationDetails,
        "CreateMigrationDetails",
        models.CreateMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMigrationResponse>{},
        body: await response.json(),
        bodyKey: "migration",
        bodyModel: "model.Migration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a migration source in the specified compartment.
   * Specify the compartment using the compartment ID.
   *
   * @param CreateSourceRequest
   * @return CreateSourceResponse
   * @throws OciError when an error occurs
   */
  public async createSource(
    createSourceRequest: requests.CreateSourceRequest
  ): Promise<responses.CreateSourceResponse> {
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createSourceRequest.opcRequestId,
      "opc-retry-token": createSourceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSourceRequest.createSourceDetails,
        "CreateSourceDetails",
        models.CreateSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSourceResponse>{},
        body: await response.json(),
        bodyKey: "source",
        bodyModel: "model.Source",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes the specified Application object.
   * @param DeleteMigrationRequest
   * @return DeleteMigrationResponse
   * @throws OciError when an error occurs
   */
  public async deleteMigration(
    deleteMigrationRequest: requests.DeleteMigrationRequest
  ): Promise<responses.DeleteMigrationResponse> {
    const pathParams = {
      "{migrationId}": deleteMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteMigrationRequest.opcRequestId,
      "if-match": deleteMigrationRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMigrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Deletes the specified Source object.
   * @param DeleteSourceRequest
   * @return DeleteSourceResponse
   * @throws OciError when an error occurs
   */
  public async deleteSource(
    deleteSourceRequest: requests.DeleteSourceRequest
  ): Promise<responses.DeleteSourceResponse> {
    const pathParams = {
      "{sourceId}": deleteSourceRequest.sourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": deleteSourceRequest.opcRequestId,
      "if-match": deleteSourceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources/{sourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets an application migration using the ID.
   * @param GetMigrationRequest
   * @return GetMigrationResponse
   * @throws OciError when an error occurs
   */
  public async getMigration(
    getMigrationRequest: requests.GetMigrationRequest
  ): Promise<responses.GetMigrationResponse> {
    const pathParams = {
      "{migrationId}": getMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getMigrationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMigrationResponse>{},
        body: await response.json(),
        bodyKey: "migration",
        bodyModel: "model.Migration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets a migration source using the source ID.
   * @param GetSourceRequest
   * @return GetSourceResponse
   * @throws OciError when an error occurs
   */
  public async getSource(
    getSourceRequest: requests.GetSourceRequest
  ): Promise<responses.GetSourceResponse> {
    const pathParams = {
      "{sourceId}": getSourceRequest.sourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getSourceRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources/{sourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSourceResponse>{},
        body: await response.json(),
        bodyKey: "source",
        bodyModel: "model.Source",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Gets the details of a work request.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Returns a list of migrations in a given compartment.
   *
   * @param ListMigrationsRequest
   * @return ListMigrationsResponse
   * @throws OciError when an error occurs
   */
  public async listMigrations(
    listMigrationsRequest: requests.ListMigrationsRequest
  ): Promise<responses.ListMigrationsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMigrationsRequest.compartmentId,
      "id": listMigrationsRequest.id,
      "limit": listMigrationsRequest.limit,
      "page": listMigrationsRequest.page,
      "sortOrder": listMigrationsRequest.sortOrder,
      "sortBy": listMigrationsRequest.sortBy,
      "displayName": listMigrationsRequest.displayName,
      "lifecycleState": listMigrationsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listMigrationsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMigrationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "MigrationSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.MigrationSummary objects
   * contained in responses from the listMigrations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMigrations(
    request: requests.ListMigrationsRequest
  ): AsyncIterableIterator<models.MigrationSummary> {
    return paginateRecords(request, req => this.listMigrations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMigrations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMigrationsResponses(
    request: requests.ListMigrationsRequest
  ): AsyncIterableIterator<responses.ListMigrationsResponse> {
    return paginateResponses(request, req => this.listMigrations(req));
  }

  /**
   * Returns a list of applications running in the source environment. This list is generated dynamically by interrogating the source and changes as applications are started or stopped in that environment.
   *
   * @param ListSourceApplicationsRequest
   * @return ListSourceApplicationsResponse
   * @throws OciError when an error occurs
   */
  public async listSourceApplications(
    listSourceApplicationsRequest: requests.ListSourceApplicationsRequest
  ): Promise<responses.ListSourceApplicationsResponse> {
    const pathParams = {
      "{sourceId}": listSourceApplicationsRequest.sourceId
    };

    const queryParams = {
      "limit": listSourceApplicationsRequest.limit,
      "page": listSourceApplicationsRequest.page,
      "sortOrder": listSourceApplicationsRequest.sortOrder,
      "sortBy": listSourceApplicationsRequest.sortBy,
      "compartmentId": listSourceApplicationsRequest.compartmentId,
      "displayName": listSourceApplicationsRequest.displayName
    };

    let headerParams = {
      "opc-request-id": listSourceApplicationsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources/{sourceId}/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SourceApplicationSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SourceApplicationSummary objects
   * contained in responses from the listSourceApplications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSourceApplications(
    request: requests.ListSourceApplicationsRequest
  ): AsyncIterableIterator<models.SourceApplicationSummary> {
    return paginateRecords(request, req => this.listSourceApplications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSourceApplications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSourceApplicationsResponses(
    request: requests.ListSourceApplicationsRequest
  ): AsyncIterableIterator<responses.ListSourceApplicationsResponse> {
    return paginateResponses(request, req => this.listSourceApplications(req));
  }

  /**
   * Returns a list of migration sources in a specified compartment.
   *
   * @param ListSourcesRequest
   * @return ListSourcesResponse
   * @throws OciError when an error occurs
   */
  public async listSources(
    listSourcesRequest: requests.ListSourcesRequest
  ): Promise<responses.ListSourcesResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSourcesRequest.compartmentId,
      "id": listSourcesRequest.id,
      "limit": listSourcesRequest.limit,
      "page": listSourcesRequest.page,
      "sortOrder": listSourcesRequest.sortOrder,
      "sortBy": listSourcesRequest.sortBy,
      "displayName": listSourcesRequest.displayName,
      "lifecycleState": listSourcesRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listSourcesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourcesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SourceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SourceSummary objects
   * contained in responses from the listSources operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSources(
    request: requests.ListSourcesRequest
  ): AsyncIterableIterator<models.SourceSummary> {
    return paginateRecords(request, req => this.listSources(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSources operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSourcesResponses(
    request: requests.ListSourcesRequest
  ): AsyncIterableIterator<responses.ListSourcesResponse> {
    return paginateResponses(request, req => this.listSources(req));
  }

  /**
   * Gets the errors for a work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestErrorsRequest.limit,
      "page": listWorkRequestErrorsRequest.page,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestError[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<models.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Gets the logs for a work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestLogsRequest.limit,
      "page": listWorkRequestLogsRequest.page,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestLogEntry[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<models.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment or for a specified resource.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page
    };

    let headerParams = {
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "WorkRequestSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<models.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Validates target configuration and migrates a PaaS application running in a Source environment into the customers Oracle Cloud Infrastructure tenancy. This an optional action and only required if automatic start of migration was not selected when creating the migration.
   *
   * @param MigrateApplicationRequest
   * @return MigrateApplicationResponse
   * @throws OciError when an error occurs
   */
  public async migrateApplication(
    migrateApplicationRequest: requests.MigrateApplicationRequest
  ): Promise<responses.MigrateApplicationResponse> {
    const pathParams = {
      "{migrationId}": migrateApplicationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": migrateApplicationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/migrate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.MigrateApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Update the configuration for an application migration.
   * @param UpdateMigrationRequest
   * @return UpdateMigrationResponse
   * @throws OciError when an error occurs
   */
  public async updateMigration(
    updateMigrationRequest: requests.UpdateMigrationRequest
  ): Promise<responses.UpdateMigrationResponse> {
    const pathParams = {
      "{migrationId}": updateMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateMigrationRequest.opcRequestId,
      "opc-retry-token": updateMigrationRequest.opcRetryToken,
      "if-match": updateMigrationRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMigrationRequest.updateMigrationDetails,
        "UpdateMigrationDetails",
        models.UpdateMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMigrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }

  /**
   * Update source details.
   * @param UpdateSourceRequest
   * @return UpdateSourceResponse
   * @throws OciError when an error occurs
   */
  public async updateSource(
    updateSourceRequest: requests.UpdateSourceRequest
  ): Promise<responses.UpdateSourceResponse> {
    const pathParams = {
      "{sourceId}": updateSourceRequest.sourceId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": updateSourceRequest.opcRequestId,
      "if-match": updateSourceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sources/{sourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSourceRequest.updateSourceDetails,
        "UpdateSourceDetails",
        models.UpdateSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });

    const response = await this._httpClient.send(request);
    if (response.status && response.status >= 200 && response.status <= 299) {
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } else {
      const errBody = await common.handleErrorBody(response);
      throw common.handleErrorResponse(response, errBody);
    }
  }
}
